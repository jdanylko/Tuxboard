!function i(o,r,s){function a(t,e){if(!r[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);throw(n=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",n}n=r[t]={exports:{}},o[t][0].call(n.exports,function(e){return a(o[t][1][e]||e)},n,n.exports,i,o,r,s)}return r[t].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)a(s[e]);return a}({1:[function(e,t,Le){!function(Te){!function(){"use strict";function d(e){e=e.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}function m(e){if(null==e)return window;if("[object Window]"===e.toString())return e;e=e.ownerDocument;return e&&e.defaultView||window}function u(e){e=m(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function p(e){return e instanceof m(e).Element||e instanceof Element}function h(e){return e instanceof m(e).HTMLElement||e instanceof HTMLElement}function o(e){return"undefined"!=typeof ShadowRoot&&(e instanceof m(e).ShadowRoot||e instanceof ShadowRoot)}function a(e){return e?(e.nodeName||"").toLowerCase():null}function v(e){return((p(e)?e.ownerDocument:e.document)||window.document).documentElement}function f(e){return d(v(e)).left+u(e).scrollLeft}function y(e){return m(e).getComputedStyle(e)}function l(e){var t=y(e),n=t.overflow,e=t.overflowX,t=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+t+e)}function b(e,t,n){void 0===n&&(n=!1);var i=v(t),o=d(e),r=h(t),s={scrollLeft:0,scrollTop:0},e={x:0,y:0};return!r&&(r||n)||("body"===a(t)&&!l(i)||(s=(n=t)!==m(n)&&h(n)?{scrollLeft:n.scrollLeft,scrollTop:n.scrollTop}:u(n)),h(t)?((e=d(t)).x+=t.clientLeft,e.y+=t.clientTop):i&&(e.x=f(i))),{x:o.left+s.scrollLeft-e.x,y:o.top+s.scrollTop-e.y,width:o.width,height:o.height}}function T(e){var t=d(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function s(e){return"html"===a(e)?e:e.assignedSlot||e.parentNode||(o(e)?e.host:null)||v(e)}function _(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(a(t))?t.ownerDocument.body:h(t)&&l(t)?t:e(s(t))}(e),e=n===(null==(i=e.ownerDocument)?void 0:i.body),i=m(n),n=e?[i].concat(i.visualViewport||[],l(n)?n:[]):n,t=t.concat(n);return e?t:t.concat(_(s(n)))}function r(e){return h(e)&&"fixed"!==y(e).position?e.offsetParent:null}function L(e){for(var t,n=m(e),i=r(e);i&&(t=i,0<=["table","td","th"].indexOf(a(t)))&&"static"===y(i).position;)i=r(i);return(!i||"html"!==a(i)&&("body"!==a(i)||"static"!==y(i).position))&&(i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox"),n=-1!==navigator.userAgent.indexOf("Trident");if(n&&h(e)&&"fixed"===y(e).position)return null;for(var i=s(e);h(i)&&["html","body"].indexOf(a(i))<0;){var o=y(i);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return i;i=i.parentNode}return null}(e))||n}Object.defineProperty(Le,"__esModule",{value:!0});var O="top",x="bottom",D="right",A="left",C="auto",W=[O,x,D,A],I="start",c="end",g="clippingParents",w="viewport",S="popper",E="reference",P=W.reduce(function(e,t){return e.concat([t+"-"+I,t+"-"+c])},[]),j=[].concat(W,[C]).reduce(function(e,t){return e.concat([t,t+"-"+I,t+"-"+c])},[]),k=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function R(e){var n=new Map,i=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){i.has(e.name)||!function t(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){i.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}function B(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var N='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',M='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',q=["name","enabled","phase","fn","effect","requires","options"];function $(e){return e.split("-")[0]}var H=Math.max,U=Math.min,z=Math.round;function V(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&o(n)){var i=t;do{if(i&&e.isSameNode(i))return!0}while(i=i.parentNode||i.host)}return!1}function F(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function K(e,t){return t===w?F((r=m(o=e),s=v(o),a=r.visualViewport,l=s.clientWidth,c=s.clientHeight,s=r=0,a&&(l=a.width,c=a.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=a.offsetLeft,s=a.offsetTop)),{width:l,height:c,x:r+f(o),y:s})):h(t)?((i=d(n=t)).top=i.top+n.clientTop,i.left=i.left+n.clientLeft,i.bottom=i.top+n.clientHeight,i.right=i.left+n.clientWidth,i.width=n.clientWidth,i.height=n.clientHeight,i.x=i.left,i.y=i.top,i):F((o=v(e),s=v(o),t=u(o),i=null==(n=o.ownerDocument)?void 0:n.body,e=H(s.scrollWidth,s.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),n=H(s.scrollHeight,s.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),o=-t.scrollLeft+f(o),t=-t.scrollTop,"rtl"===y(i||s).direction&&(o+=H(s.clientWidth,i?i.clientWidth:0)-e),{width:e,height:n,x:o,y:t}));var n,i,o,r,s,a,l,c}function X(n,e,t){var i,o,r,e="clippingParents"===e?(o=_(s(i=n)),p(r=0<=["absolute","fixed"].indexOf(y(i).position)&&h(i)?L(i):i)?o.filter(function(e){return p(e)&&V(e,r)&&"body"!==a(e)}):[]):[].concat(e),e=[].concat(e,[t]),t=e[0],t=e.reduce(function(e,t){t=K(n,t);return e.top=H(t.top,e.top),e.right=U(t.right,e.right),e.bottom=U(t.bottom,e.bottom),e.left=H(t.left,e.left),e},K(n,t));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function Y(e){return e.split("-")[1]}function J(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function Q(e){var t,n=e.reference,i=e.element,o=e.placement,e=o?$(o):null,o=o?Y(o):null,r=n.x+n.width/2-i.width/2,s=n.y+n.height/2-i.height/2;switch(e){case O:t={x:r,y:n.y-i.height};break;case x:t={x:r,y:n.y+n.height};break;case D:t={x:n.x+n.width,y:s};break;case A:t={x:n.x-i.width,y:s};break;default:t={x:n.x,y:n.y}}var a=e?J(e):null;if(null!=a){var l="y"===a?"height":"width";switch(o){case I:t[a]=t[a]-(n[l]/2-i[l]/2);break;case c:t[a]=t[a]+(n[l]/2-i[l]/2)}}return t}function G(){return{top:0,right:0,bottom:0,left:0}}function Z(e){return Object.assign({},G(),e)}function ee(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function te(e,t){var i,n=t=void 0===t?{}:t,o=n.placement,r=void 0===o?e.placement:o,s=n.boundary,a=void 0===s?g:s,l=n.rootBoundary,c=void 0===l?w:l,t=n.elementContext,o=void 0===t?S:t,s=n.altBoundary,l=void 0!==s&&s,t=n.padding,s=void 0===t?0:t,n=Z("number"!=typeof s?s:ee(s,W)),t=e.elements.reference,s=e.rects.popper,l=e.elements[l?o===S?E:S:o],a=X(p(l)?l:l.contextElement||v(e.elements.popper),a,c),c=d(t),t=Q({reference:c,element:s,strategy:"absolute",placement:r}),t=F(Object.assign({},s,t)),c=o===S?t:c,u={top:a.top-c.top+n.top,bottom:c.bottom-a.bottom+n.bottom,left:a.left-c.left+n.left,right:c.right-a.right+n.right},e=e.modifiersData.offset;return o===S&&e&&(i=e[r],Object.keys(u).forEach(function(e){var t=0<=[D,x].indexOf(e)?1:-1,n=0<=[O,x].indexOf(e)?"y":"x";u[e]+=i[n]*t})),u}var ne="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",ie={placement:"bottom",modifiers:[],strategy:"absolute"};function oe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function e(e){var t=e=void 0===e?{}:e,e=t.defaultModifiers,f=void 0===e?[]:e,t=t.defaultOptions,g=void 0===t?ie:t;return function(s,a,t){void 0===t&&(t=g);var n,i,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},ie,g),modifiersData:{},elements:{reference:s,popper:a},attributes:{},styles:{}},c=[],u=!1,d={state:l,setOptions:function(e){h(),l.options=Object.assign({},g,l.options,e),l.scrollParents={reference:p(s)?_(s):s.contextElement?_(s.contextElement):[],popper:_(a)};var n,t,i,o,r,e=(e=[].concat(f,l.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=R(e),k.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return l.orderedModifiers=e.filter(function(e){return e.enabled}),"production"!==Te.env.NODE_ENV&&(e=[].concat(e,l.options.modifiers),o=function(e){return e.name},r=new Set,e=e.filter(function(e){e=o(e);if(!r.has(e))return r.add(e),!0}),(i=e).forEach(function(n){Object.keys(n).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(B(N,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(B(N,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));case"phase":k.indexOf(n.phase)<0&&console.error(B(N,n.name,'"phase"',"either "+k.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(B(N,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":"function"!=typeof n.effect&&console.error(B(N,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":Array.isArray(n.requires)||console.error(B(N,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(B(N,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+q.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==i.find(function(e){return e.name===t})&&console.error(B(M,String(n.name),t,t))})})}),$(l.options.placement)===C&&(l.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))),[(e=y(a)).marginTop,e.marginRight,e.marginBottom,e.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))),l.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(n=e({state:l,name:t,instance:d,options:void 0===n?{}:n}),c.push(n||function(){}))}),d.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,e=e.popper;if(oe(t,e)){l.rects={reference:b(t,L(e),"fixed"===l.options.strategy),popper:T(e)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach(function(e){return l.modifiersData[e.name]=Object.assign({},e.data)});for(var n,i,o,r=0,s=0;s<l.orderedModifiers.length;s++){if("production"!==Te.env.NODE_ENV&&100<(r+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0!==l.reset?(n=(o=l.orderedModifiers[s]).fn,i=o.options,o=o.name,"function"==typeof n&&(l=n({state:l,options:void 0===i?{}:i,name:o,instance:d})||l)):(l.reset=!1,s=-1)}}else"production"!==Te.env.NODE_ENV&&console.error(ne)}},update:(n=function(){return new Promise(function(e){d.forceUpdate(),e(l)})},function(){return i=i||new Promise(function(e){Promise.resolve().then(function(){i=void 0,e(n())})})}),destroy:function(){h(),u=!0}};return oe(s,a)?d.setOptions(t).then(function(e){!u&&t.onFirstUpdate&&t.onFirstUpdate(e)}):"production"!==Te.env.NODE_ENV&&console.error(ne),d;function h(){c.forEach(function(e){return e()}),c=[]}}}var re={passive:!0};var t={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,o=void 0===(e=i.scroll)||e,r=void 0===(i=i.resize)||i,s=m(t.elements.popper),a=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&a.forEach(function(e){e.addEventListener("scroll",n.update,re)}),r&&s.addEventListener("resize",n.update,re),function(){o&&a.forEach(function(e){e.removeEventListener("scroll",n.update,re)}),r&&s.removeEventListener("resize",n.update,re)}},data:{}};var n={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=Q({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},se={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ae(e){var t=e.popper,n=e.popperRect,i=e.placement,o=e.offsets,r=e.position,s=e.gpuAcceleration,a=e.adaptive,l=e.roundOffsets,c=!0===l?(f=(p=o).x,g=p.y,p=window.devicePixelRatio||1,{x:z(z(f*p)/p)||0,y:z(z(g*p)/p)||0}):"function"==typeof l?l(o):o,u=c.x,d=void 0===u?0:u,h=c.y,e=void 0===h?0:h,f=o.hasOwnProperty("x"),g=o.hasOwnProperty("y"),p=A,l=O,u=window;a&&(c="clientHeight",h="clientWidth",(o=L(t))===m(t)&&"static"!==y(o=v(t)).position&&(c="scrollHeight",h="scrollWidth"),i===O&&(l=x,e-=o[c]-n.height,e*=s?1:-1),i===A&&(p=D,d-=o[h]-n.width,d*=s?1:-1));var a=Object.assign({position:r},a&&se);return s?Object.assign({},a,((s={})[l]=g?"0":"",s[p]=f?"0":"",s.transform=(u.devicePixelRatio||1)<2?"translate("+d+"px, "+e+"px)":"translate3d("+d+"px, "+e+"px, 0)",s)):Object.assign({},a,((a={})[l]=g?e+"px":"",a[p]=f?d+"px":"",a.transform="",a))}var i={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t,n=e.state,i=e.options,e=void 0===(o=i.gpuAcceleration)||o,o=void 0===(o=i.adaptive)||o,i=void 0===(i=i.roundOffsets)||i;"production"!==Te.env.NODE_ENV&&(t=y(n.elements.popper).transitionProperty||"",o&&["transform","top","right","bottom","left"].some(function(e){return 0<=t.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "))),e={placement:$(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:e},null!=n.modifiersData.popperOffsets&&(n.styles.popper=Object.assign({},n.styles.popper,ae(Object.assign({},e,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:o,roundOffsets:i})))),null!=n.modifiersData.arrow&&(n.styles.arrow=Object.assign({},n.styles.arrow,ae(Object.assign({},e,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:i})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})},data:{}};var le={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},i=o.elements[e];h(i)&&a(i)&&(Object.assign(i.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?i.removeAttribute(e):i.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var i=e.state,o={popper:{position:i.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(i.elements.popper.style,o.popper),i.styles=o,i.elements.arrow&&Object.assign(i.elements.arrow.style,o.arrow),function(){Object.keys(i.elements).forEach(function(e){var t=i.elements[e],n=i.attributes[e]||{},e=Object.keys((i.styles.hasOwnProperty(e)?i.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});h(t)&&a(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};var ce={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var s=e.state,t=e.options,n=e.name,a=void 0===(i=t.offset)?[0,0]:i,e=j.reduce(function(e,t){var n,i,o,r;return e[t]=(n=t,i=s.rects,o=a,r=$(n),t=0<=[A,O].indexOf(r)?-1:1,o=(o=(n="function"==typeof o?o(Object.assign({},i,{placement:n})):o)[0])||0,n=((n=n[1])||0)*t,0<=[A,D].indexOf(r)?{x:n,y:o}:{x:o,y:n}),e},{}),i=(t=e[s.placement]).x,t=t.y;null!=s.modifiersData.popperOffsets&&(s.modifiersData.popperOffsets.x+=i,s.modifiersData.popperOffsets.y+=t),s.modifiersData[n]=e}},ue={left:"right",right:"left",bottom:"top",top:"bottom"};function de(e){return e.replace(/left|right|bottom|top/g,function(e){return ue[e]})}var he={start:"end",end:"start"};function fe(e){return e.replace(/start|end/g,function(e){return he[e]})}var ge={name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,t=e.options,i=e.name;if(!n.modifiersData[i]._skip){for(var o=t.mainAxis,r=void 0===o||o,e=t.altAxis,s=void 0===e||e,o=t.fallbackPlacements,a=t.padding,l=t.boundary,c=t.rootBoundary,u=t.altBoundary,e=t.flipVariations,d=void 0===e||e,h=t.allowedAutoPlacements,e=n.options.placement,t=$(e),t=o||(t===e||!d?[de(e)]:function(e){if($(e)===C)return[];var t=de(e);return[fe(e),t,fe(t)]}(e)),f=[e].concat(t).reduce(function(e,t){return e.concat($(t)===C?function(n,e){var t=e=void 0===e?{}:e,i=t.placement,o=t.boundary,r=t.rootBoundary,s=t.padding,e=t.flipVariations,a=void 0===(t=t.allowedAutoPlacements)?j:t,l=Y(i),i=l?e?P:P.filter(function(e){return Y(e)===l}):W;0===(e=i.filter(function(e){return 0<=a.indexOf(e)})).length&&(e=i,"production"!==Te.env.NODE_ENV&&console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var c=e.reduce(function(e,t){return e[t]=te(n,{placement:t,boundary:o,rootBoundary:r,padding:s})[$(t)],e},{});return Object.keys(c).sort(function(e,t){return c[e]-c[t]})}(n,{placement:t,boundary:l,rootBoundary:c,padding:a,flipVariations:d,allowedAutoPlacements:h}):t)},[]),g=n.rects.reference,p=n.rects.popper,m=new Map,v=!0,y=f[0],b=0;b<f.length;b++){var _=f[b],w=$(_),S=Y(_)===I,E=0<=[O,x].indexOf(w),T=E?"width":"height",L=te(n,{placement:_,boundary:l,rootBoundary:c,altBoundary:u,padding:a}),E=E?S?D:A:S?x:O;g[T]>p[T]&&(E=de(E));S=de(E),T=[];if(r&&T.push(L[w]<=0),s&&T.push(L[E]<=0,L[S]<=0),T.every(function(e){return e})){y=_,v=!1;break}m.set(_,T)}if(v)for(var k=d?3:1;0<k;k--)if("break"===function(t){var e=f.find(function(e){e=m.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return y=e,"break"}(k))break;n.placement!==y&&(n.modifiersData[i]._skip=!0,n.placement=y,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function pe(e,t,n){return H(e,U(t,n))}var me={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,o=void 0===(S=n.mainAxis)||S,r=void 0!==(E=n.altAxis)&&E,s=n.boundary,a=n.rootBoundary,l=n.altBoundary,c=n.padding,u=n.tether,d=void 0===u||u,h=n.tetherOffset,f=void 0===h?0:h,g=te(t,{boundary:s,rootBoundary:a,padding:c,altBoundary:l}),p=$(t.placement),m=Y(t.placement),v=!m,y=J(p),b="x"===y?"y":"x",_=t.modifiersData.popperOffsets,w=t.rects.reference,e=t.rects.popper,S="function"==typeof f?f(Object.assign({},t.rects,{placement:t.placement})):f,E={x:0,y:0};_&&((o||r)&&(u="y"===y?"height":"width",n=_[y],s=_[y]+g[h="y"===y?O:A],c=_[y]-g[a="y"===y?x:D],l=d?-e[u]/2:0,p=(m===I?w:e)[u],f=m===I?-e[u]:-w[u],m=t.elements.arrow,e=d&&m?T(m):{width:0,height:0},h=(m=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:G())[h],a=m[a],e=pe(0,w[u],e[u]),h=v?w[u]/2-l-e-h-S:p-e-h-S,e=v?-w[u]/2+l+e+a+S:f+e+a+S,S=(a=t.elements.arrow&&L(t.elements.arrow))?"y"===y?a.clientTop||0:a.clientLeft||0:0,a=t.modifiersData.offset?t.modifiersData.offset[t.placement][y]:0,S=_[y]+h-a-S,a=_[y]+e-a,o&&(c=pe(d?U(s,S):s,n,d?H(c,a):c),_[y]=c,E[y]=c-n),r&&(r=(n=_[b])+g["x"===y?O:A],y=n-g["x"===y?x:D],y=pe(d?U(r,S):r,n,d?H(y,a):y),_[b]=y,E[b]=y-n)),t.modifiersData[i]=E)},requiresIfExists:["offset"]};var ve={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,i=e.state,o=e.name,r=e.options,s=i.elements.arrow,a=i.modifiersData.popperOffsets,l=$(i.placement),c=J(l),u=0<=[A,D].indexOf(l)?"height":"width";s&&a&&(t=r.padding,n=i,e=Z("number"!=typeof(t="function"==typeof t?t(Object.assign({},n.rects,{placement:n.placement})):t)?t:ee(t,W)),l=T(s),r="y"===c?O:A,n="y"===c?x:D,t=i.rects.reference[u]+i.rects.reference[c]-a[c]-i.rects.popper[u],a=a[c]-i.rects.reference[c],s=(s=L(s))?"y"===c?s.clientHeight||0:s.clientWidth||0:0,r=e[r],n=s-l[u]-e[n],n=pe(r,a=s/2-l[u]/2+(t/2-a/2),n),i.modifiersData[o]=((o={})[c]=n,o.centerOffset=n-a,o))},effect:function(e){var t=e.state;null!=(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)&&("string"==typeof e&&!(e=t.elements.popper.querySelector(e))||("production"!==Te.env.NODE_ENV&&(h(e)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" "))),V(t.elements.popper,e)?t.elements.arrow=e:"production"!==Te.env.NODE_ENV&&console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" "))))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ye(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function be(t){return[O,D,x,A].some(function(e){return 0<=t[e]})}var _e={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,o=t.rects.popper,r=t.modifiersData.preventOverflow,s=te(t,{elementContext:"reference"}),e=te(t,{altBoundary:!0}),i=ye(s,i),e=ye(e,o,r),o=be(i),r=be(e);t.modifiersData[n]={referenceClippingOffsets:i,popperEscapeOffsets:e,isReferenceHidden:o,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":o,"data-popper-escaped":r})}},we=e({defaultModifiers:[t,n,i,le]}),Se=[t,n,i,le,ce,ge,me,ve,_e],Ee=e({defaultModifiers:Se});Le.applyStyles=le,Le.arrow=ve,Le.computeStyles=i,Le.createPopper=Ee,Le.createPopperLite=we,Le.defaultModifiers=Se,Le.detectOverflow=te,Le.eventListeners=t,Le.flip=ge,Le.hide=_e,Le.offset=ce,Le.popperGenerator=e,Le.popperOffsets=n,Le.preventOverflow=me}.call(this)}.call(this,e("_process"))},{_process:3}],2:[function(e,t,n){var i,o;i=this,o=function(e){"use strict";function t(n){if(n&&n.__esModule)return n;var i=Object.create(null);return n&&Object.keys(n).forEach(function(e){var t;"default"!==e&&(t=Object.getOwnPropertyDescriptor(n,e),Object.defineProperty(i,e,t.get?t:{enumerable:!0,get:function(){return n[e]}}))}),i.default=n,Object.freeze(i)}var s=t(e);const d={find(e,t=document.documentElement){return[].concat(...Element.prototype.querySelectorAll.call(t,e))},findOne(e,t=document.documentElement){return Element.prototype.querySelector.call(t,e)},children(e,t){return[].concat(...e.children).filter(e=>e.matches(t))},parents(e,t){const n=[];let i=e.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(t)&&n.push(i),i=i.parentNode;return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]}},i="transitionend",a=e=>{for(;e+=Math.floor(1e6*Math.random()),document.getElementById(e););return e},n=t=>{let n=t.getAttribute("data-bs-target");if(!n||"#"===n){let e=t.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;e.includes("#")&&!e.startsWith("#")&&(e=`#${e.split("#")[1]}`),n=e&&"#"!==e?e.trim():null}return n},l=e=>{e=n(e);return e&&document.querySelector(e)?e:null},o=e=>{e=n(e);return e?document.querySelector(e):null},r=e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);var i=Number.parseFloat(t),e=Number.parseFloat(n);return i||e?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0},c=e=>{e.dispatchEvent(new Event(i))},u=e=>!(!e||"object"!=typeof e)&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType,h=e=>u(e)?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?d.findOne(e):null,f=(t,e)=>{let n=!1;e+=5;t.addEventListener(i,function e(){n=!0,t.removeEventListener(i,e)}),setTimeout(()=>{n||c(t)},e)},g=(o,r,s)=>{Object.keys(s).forEach(e=>{var t,n=s[e],i=r[e],t=i&&u(i)?"element":null==(t=i)?`${t}`:{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(t))throw new TypeError(`${o.toUpperCase()}: Option "${e}" provided type "${t}" but expected type "${n}".`)})},p=e=>{if(!e)return!1;if(e.style&&e.parentNode&&e.parentNode.style){var t=getComputedStyle(e),e=getComputedStyle(e.parentNode);return"none"!==t.display&&"none"!==e.display&&"hidden"!==t.visibility}return!1},m=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),v=e=>{if(!document.documentElement.attachShadow)return null;if("function"!=typeof e.getRootNode)return e instanceof ShadowRoot?e:e.parentNode?v(e.parentNode):null;e=e.getRootNode();return e instanceof ShadowRoot?e:null},y=()=>{},b=e=>e.offsetHeight,_=()=>{var{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},w=()=>"rtl"===document.documentElement.dir;var S=i=>{var e;e=()=>{const e=_();if(e){const t=i.NAME,n=e.fn[t];e.fn[t]=i.jQueryInterface,e.fn[t].Constructor=i,e.fn[t].noConflict=()=>(e.fn[t]=n,i.jQueryInterface)}},"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()};const E=e=>{"function"==typeof e&&e()},T=new Map;var L=function(e,t,n){T.has(e)||T.set(e,new Map);const i=T.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},k=function(e,t){return T.has(e)&&T.get(e).get(t)||null},O=function(e,t){if(T.has(e)){const n=T.get(e);n.delete(t),0===n.size&&T.delete(e)}};const x=/[^.]*(?=\..*)\.|.*/,D=/\..*/,A=/::\d+$/,C={};let W=1;const I={mouseenter:"mouseover",mouseleave:"mouseout"},P=/^(mouseenter|mouseleave)/i,j=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function R(e,t){return t&&`${t}::${W++}`||e.uidEvent||W++}function B(e){var t=R(e);return e.uidEvent=t,C[t]=C[t]||{},C[t]}function N(n,i,o=null){var r=Object.keys(n);for(let e=0,t=r.length;e<t;e++){var s=n[r[e]];if(s.originalHandler===i&&s.delegationSelector===o)return s}return null}function M(e,t,n){var i="string"==typeof t,t=i?n:t;let o=H(e);return j.has(o)||(o=e),[i,t,o]}function q(e,t,n,i,o){if("string"==typeof t&&e){n||(n=i,i=null),P.test(t)&&(a=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)},i?i=a(i):n=a(n));var[r,s,a]=M(t,n,i);const f=B(e),g=f[a]||(f[a]={}),p=N(g,s,r?n:null);if(p)p.oneOff=p.oneOff&&o;else{var l,c,u,d,h,t=R(s,t.replace(x,""));const m=r?(u=e,d=n,h=i,function n(i){var o=u.querySelectorAll(d);for(let{target:t}=i;t&&t!==this;t=t.parentNode)for(let e=o.length;e--;)if(o[e]===t)return i.delegateTarget=t,n.oneOff&&U.off(u,i.type,d,h),h.apply(t,[i]);return null}):(l=e,c=n,function e(t){return t.delegateTarget=l,e.oneOff&&U.off(l,t.type,c),c.apply(l,[t])});m.delegationSelector=r?n:null,m.originalHandler=s,m.oneOff=o,m.uidEvent=t,g[t]=m,e.addEventListener(a,m,r)}}}function $(e,t,n,i,o){i=N(t[n],i,o);i&&(e.removeEventListener(n,i,Boolean(o)),delete t[n][i.uidEvent])}function H(e){return e=e.replace(D,""),I[e]||e}const U={on(e,t,n,i){q(e,t,n,i,!1)},one(e,t,n,i){q(e,t,n,i,!0)},off(n,i,e,t){if("string"==typeof i&&n){const[o,r,s]=M(i,e,t),a=s!==i,l=B(n);t=i.startsWith(".");if(void 0!==r)return l&&l[s]?void $(n,l,s,r,o?e:null):void 0;t&&Object.keys(l).forEach(e=>{!function(t,n,i,o){const r=n[i]||{};Object.keys(r).forEach(e=>{e.includes(o)&&(e=r[e],$(t,n,i,e.originalHandler,e.delegationSelector))})}(n,l,e,i.slice(1))});const c=l[s]||{};Object.keys(c).forEach(e=>{var t=e.replace(A,"");a&&!i.includes(t)||(e=c[e],$(n,l,s,e.originalHandler,e.delegationSelector))})}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=_();var o=H(t),r=t!==o,s=j.has(o);let a,l=!0,c=!0,u=!1,d=null;return r&&i&&(a=i.Event(t,n),i(e).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(d=document.createEvent("HTMLEvents"),d.initEvent(o,l,!0)):d=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(e=>{Object.defineProperty(d,e,{get(){return n[e]}})}),u&&d.preventDefault(),c&&e.dispatchEvent(d),d.defaultPrevented&&void 0!==a&&a.preventDefault(),d}};class z{constructor(e){(e=h(e))&&(this._element=e,L(this._element,this.constructor.DATA_KEY,this))}dispose(){O(this._element,this.constructor.DATA_KEY),U.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(e=>{this[e]=null})}_queueCallback(e,t,n=!0){n?(n=r(t),U.one(t,"transitionend",()=>E(e)),f(t,n)):E(e)}static getInstance(e){return k(e,this.DATA_KEY)}static get VERSION(){return"5.0.1"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const V="bs.alert";V;class F extends z{static get NAME(){return"alert"}close(e){var t=e?this._getRootElement(e):this._element,e=this._triggerCloseEvent(t);null===e||e.defaultPrevented||this._removeElement(t)}_getRootElement(e){return o(e)||e.closest(".alert")}_triggerCloseEvent(e){return U.trigger(e,"close.bs.alert")}_removeElement(e){e.classList.remove("show");var t=e.classList.contains("fade");this._queueCallback(()=>this._destroyElement(e),e,t)}_destroyElement(e){e.parentNode&&e.parentNode.removeChild(e),U.trigger(e,"closed.bs.alert")}static jQueryInterface(t){return this.each(function(){let e=k(this,V);e=e||new F(this),"close"===t&&e[t](this)})}static handleDismiss(t){return function(e){e&&e.preventDefault(),t.close(this)}}}U.on(document,"click.bs.alert.data-api",'[data-bs-dismiss="alert"]',F.handleDismiss(new F)),S(F);const K="bs.button";K;const X='[data-bs-toggle="button"]';class Y extends z{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each(function(){let e=k(this,K);e=e||new Y(this),"toggle"===t&&e[t]()})}}function J(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function Q(e){return e.replace(/[A-Z]/g,e=>`-${e.toLowerCase()}`)}U.on(document,"click.bs.button.data-api",X,e=>{e.preventDefault();e=e.target.closest(X);let t=k(e,K);t=t||new Y(e),t.toggle()}),S(Y);const G={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${Q(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${Q(t)}`)},getDataAttributes(n){if(!n)return{};const i={};return Object.keys(n.dataset).filter(e=>e.startsWith("bs")).forEach(e=>{let t=e.replace(/^bs/,"");t=t.charAt(0).toLowerCase()+t.slice(1,t.length),i[t]=J(n.dataset[e])}),i},getDataAttribute(e,t){return J(e.getAttribute(`data-bs-${Q(t)}`))},offset(e){e=e.getBoundingClientRect();return{top:e.top+document.body.scrollTop,left:e.left+document.body.scrollLeft}},position(e){return{top:e.offsetTop,left:e.offsetLeft}}},Z="carousel",ee="bs.carousel";var te=`.${ee}`;const ne={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},ie={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},oe="next",re="prev",se="left",ae="right",le=`slid${te}`;const ce="active",ue=".active.carousel-item";class de extends z{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=d.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return ne}static get NAME(){return Z}next(){this._isSliding||this._slide(oe)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._isSliding||this._slide(re)}pause(e){e||(this._isPaused=!0),d.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(c(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=d.findOne(ue,this._element);var t=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)U.one(this._element,le,()=>this.to(e));else{if(t===e)return this.pause(),void this.cycle();t=t<e?oe:re;this._slide(t,this._items[e])}}_getConfig(e){return e={...ne,...e},g(Z,e,ie),e}_handleSwipe(){var e=Math.abs(this.touchDeltaX);e<=40||(e=e/this.touchDeltaX,this.touchDeltaX=0,e&&this._slide(0<e?ae:se))}_addEventListeners(){this._config.keyboard&&U.on(this._element,"keydown.bs.carousel",e=>this._keydown(e)),"hover"===this._config.pause&&(U.on(this._element,"mouseenter.bs.carousel",e=>this.pause(e)),U.on(this._element,"mouseleave.bs.carousel",e=>this.cycle(e))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=e=>{!this._pointerEvent||"pen"!==e.pointerType&&"touch"!==e.pointerType?this._pointerEvent||(this.touchStartX=e.touches[0].clientX):this.touchStartX=e.clientX},n=e=>{this.touchDeltaX=e.touches&&1<e.touches.length?0:e.touches[0].clientX-this.touchStartX},i=e=>{!this._pointerEvent||"pen"!==e.pointerType&&"touch"!==e.pointerType||(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(e=>this.cycle(e),500+this._config.interval))};d.find(".carousel-item img",this._element).forEach(e=>{U.on(e,"dragstart.bs.carousel",e=>e.preventDefault())}),this._pointerEvent?(U.on(this._element,"pointerdown.bs.carousel",e=>t(e)),U.on(this._element,"pointerup.bs.carousel",e=>i(e)),this._element.classList.add("pointer-event")):(U.on(this._element,"touchstart.bs.carousel",e=>t(e)),U.on(this._element,"touchmove.bs.carousel",e=>n(e)),U.on(this._element,"touchend.bs.carousel",e=>i(e)))}_keydown(e){/input|textarea/i.test(e.target.tagName)||("ArrowLeft"===e.key?(e.preventDefault(),this._slide(ae)):"ArrowRight"===e.key&&(e.preventDefault(),this._slide(se)))}_getItemIndex(e){return this._items=e&&e.parentNode?d.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){var n=e===oe,i=e===re,o=this._getItemIndex(t),e=this._items.length-1;if((i&&0===o||n&&o===e)&&!this._config.wrap)return t;i=(o+(i?-1:1))%this._items.length;return-1==i?this._items[this._items.length-1]:this._items[i]}_triggerSlideEvent(e,t){var n=this._getItemIndex(e),i=this._getItemIndex(d.findOne(ue,this._element));return U.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=d.findOne(".active",this._indicatorsElement);e.classList.remove(ce),e.removeAttribute("aria-current");const n=d.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(ce),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||d.findOne(ue,this._element);var t;e&&((t=Number.parseInt(e.getAttribute("data-bs-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval)}_slide(e,t){var n=this._directionToOrder(e);const i=d.findOne(ue,this._element),o=this._getItemIndex(i),r=t||this._getItemByOrder(n,i),s=this._getItemIndex(r);e=Boolean(this._interval),t=n===oe;const a=t?"carousel-item-start":"carousel-item-end",l=t?"carousel-item-next":"carousel-item-prev",c=this._orderToDirection(n);if(r&&r.classList.contains(ce))this._isSliding=!1;else{n=this._triggerSlideEvent(r,c);if(!n.defaultPrevented&&i&&r){this._isSliding=!0,e&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const u=()=>{U.trigger(this._element,le,{relatedTarget:r,direction:c,from:o,to:s})};this._element.classList.contains("slide")?(r.classList.add(l),b(r),i.classList.add(a),r.classList.add(a),this._queueCallback(()=>{r.classList.remove(a,l),r.classList.add(ce),i.classList.remove(ce,l,a),this._isSliding=!1,setTimeout(u,0)},i,!0)):(i.classList.remove(ce),r.classList.add(ce),this._isSliding=!1,u()),e&&this.cycle()}}}_directionToOrder(e){return[ae,se].includes(e)?w()?e===se?re:oe:e===se?oe:re:e}_orderToDirection(e){return[oe,re].includes(e)?w()?e===re?se:ae:e===re?ae:se:e}static carouselInterface(e,t){let n=k(e,ee),i={...ne,...G.getDataAttributes(e)};"object"==typeof t&&(i={...i,...t});var o="string"==typeof t?t:i.slide;if(n=n||new de(e,i),"number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(e){return this.each(function(){de.carouselInterface(this,e)})}static dataApiClickHandler(e){const t=o(this);if(t&&t.classList.contains("carousel")){const i={...G.getDataAttributes(t),...G.getDataAttributes(this)};var n=this.getAttribute("data-bs-slide-to");n&&(i.interval=!1),de.carouselInterface(t,i),n&&k(t,ee).to(n),e.preventDefault()}}}U.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",de.dataApiClickHandler),U.on(window,"load.bs.carousel.data-api",()=>{var n=d.find('[data-bs-ride="carousel"]');for(let e=0,t=n.length;e<t;e++)de.carouselInterface(n[e],k(n[e],ee))}),S(de);const he="collapse",fe="bs.collapse";e=`.${fe}`;const ge={toggle:!0,parent:""},pe={toggle:"boolean",parent:"(string|element)"};const me="show",ve="collapse",ye="collapsing",be="collapsed",_e='[data-bs-toggle="collapse"]';class we extends z{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=d.find(`${_e}[href="#${this._element.id}"],`+`${_e}[data-bs-target="#${this._element.id}"]`);var n=d.find(_e);for(let e=0,t=n.length;e<t;e++){var i=n[e],o=l(i),r=d.find(o).filter(e=>e===this._element);null!==o&&r.length&&(this._selector=o,this._triggerArray.push(i))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}static get Default(){return ge}static get NAME(){return he}toggle(){this._element.classList.contains(me)?this.hide():this.show()}show(){if(!this._isTransitioning&&!this._element.classList.contains(me)){let e,t;this._parent&&(e=d.find(".show, .collapsing",this._parent).filter(e=>"string"==typeof this._config.parent?e.getAttribute("data-bs-parent")===this._config.parent:e.classList.contains(ve)),0===e.length&&(e=null));const i=d.findOne(this._selector);if(e){var n=e.find(e=>i!==e);if(t=n?k(n,fe):null,t&&t._isTransitioning)return}if(!U.trigger(this._element,"show.bs.collapse").defaultPrevented){e&&e.forEach(e=>{i!==e&&we.collapseInterface(e,"hide"),t||L(e,fe,null)});const o=this._getDimension();this._element.classList.remove(ve),this._element.classList.add(ye),this._element.style[o]=0,this._triggerArray.length&&this._triggerArray.forEach(e=>{e.classList.remove(be),e.setAttribute("aria-expanded",!0)}),this.setTransitioning(!0);n=`scroll${o[0].toUpperCase()+o.slice(1)}`;this._queueCallback(()=>{this._element.classList.remove(ye),this._element.classList.add(ve,me),this._element.style[o]="",this.setTransitioning(!1),U.trigger(this._element,"shown.bs.collapse")},this._element,!0),this._element.style[o]=`${this._element[n]}px`}}}hide(){if(!this._isTransitioning&&this._element.classList.contains(me)&&!U.trigger(this._element,"hide.bs.collapse").defaultPrevented){var e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,b(this._element),this._element.classList.add(ye),this._element.classList.remove(ve,me);var t=this._triggerArray.length;if(0<t)for(let e=0;e<t;e++){const n=this._triggerArray[e],i=o(n);i&&!i.classList.contains(me)&&(n.classList.add(be),n.setAttribute("aria-expanded",!1))}this.setTransitioning(!0);this._element.style[e]="",this._queueCallback(()=>{this.setTransitioning(!1),this._element.classList.remove(ye),this._element.classList.add(ve),U.trigger(this._element,"hidden.bs.collapse")},this._element,!0)}}setTransitioning(e){this._isTransitioning=e}_getConfig(e){return(e={...ge,...e}).toggle=Boolean(e.toggle),g(he,e,pe),e}_getDimension(){return this._element.classList.contains("width")?"width":"height"}_getParent(){var{parent:e}=this._config,e=h(e),t=`${_e}[data-bs-parent="${e}"]`;return d.find(t,e).forEach(e=>{var t=o(e);this._addAriaAndCollapsedClass(t,[e])}),e}_addAriaAndCollapsedClass(e,t){if(e&&t.length){const n=e.classList.contains(me);t.forEach(e=>{n?e.classList.remove(be):e.classList.add(be),e.setAttribute("aria-expanded",n)})}}static collapseInterface(e,t){let n=k(e,fe);const i={...ge,...G.getDataAttributes(e),..."object"==typeof t&&t?t:{}};if(!n&&i.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(i.toggle=!1),n=n||new we(e,i),"string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}static jQueryInterface(e){return this.each(function(){we.collapseInterface(this,e)})}}U.on(document,"click.bs.collapse.data-api",_e,function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const i=G.getDataAttributes(this);e=l(this);const t=d.find(e);t.forEach(e=>{const t=k(e,fe);let n;n=t?(null===t._parent&&"string"==typeof i.parent&&(t._config.parent=i.parent,t._parent=t._getParent()),"toggle"):i,we.collapseInterface(e,n)})}),S(we);const Se="dropdown",Ee="bs.dropdown";var Te=`.${Ee}`,te=".data-api";const Le="Escape",ke="ArrowUp",Oe="ArrowDown",xe=new RegExp(`${ke}|${Oe}|${Le}`);var De=`click${Te}${te}`,e=`keydown${Te}${te}`;const Ae="show",Ce='[data-bs-toggle="dropdown"]',We=".dropdown-menu",Ie=w()?"top-end":"top-start",Pe=w()?"top-start":"top-end",je=w()?"bottom-end":"bottom-start",Re=w()?"bottom-start":"bottom-end",Be=w()?"left-start":"right-start",Ne=w()?"right-start":"left-start",Me={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},qe={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class $e extends z{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}static get Default(){return Me}static get DefaultType(){return qe}static get NAME(){return Se}toggle(){m(this._element)||(this._element.classList.contains(Ae)?this.hide():this.show())}show(){if(!m(this._element)&&!this._menu.classList.contains(Ae)){const n=$e.getParentFromElement(this._element);var e={relatedTarget:this._element};if(!U.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._inNavbar)G.setDataAttribute(this._menu,"popper","none");else{if(void 0===s)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=n:u(this._config.reference)?e=h(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const i=this._getPopperConfig();var t=i.modifiers.find(e=>"applyStyles"===e.name&&!1===e.enabled);this._popper=s.createPopper(e,this._menu,i),t&&G.setDataAttribute(this._menu,"popper","static")}"ontouchstart"in document.documentElement&&!n.closest(".navbar-nav")&&[].concat(...document.body.children).forEach(e=>U.on(e,"mouseover",y)),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle(Ae),this._element.classList.toggle(Ae),U.trigger(this._element,"shown.bs.dropdown",e)}}}hide(){var e;!m(this._element)&&this._menu.classList.contains(Ae)&&(e={relatedTarget:this._element},this._completeHide(e))}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_addEventListeners(){U.on(this._element,"click.bs.dropdown",e=>{e.preventDefault(),this.toggle()})}_completeHide(e){U.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(e=>U.off(e,"mouseover",y)),this._popper&&this._popper.destroy(),this._menu.classList.remove(Ae),this._element.classList.remove(Ae),this._element.setAttribute("aria-expanded","false"),G.removeDataAttribute(this._menu,"popper"),U.trigger(this._element,"hidden.bs.dropdown",e))}_getConfig(e){if(e={...this.constructor.Default,...G.getDataAttributes(this._element),...e},g(Se,e,this.constructor.DefaultType),"object"==typeof e.reference&&!u(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Se.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_getMenuElement(){return d.next(this._element,We)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return Be;if(e.classList.contains("dropstart"))return Ne;var t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?Pe:Ie:t?Re:je}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map(e=>Number.parseInt(e,10)):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem(t){const n=d.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(p);if(n.length){let e=n.indexOf(t.target);t.key===ke&&0<e&&e--,t.key===Oe&&e<n.length-1&&e++,e=-1===e?0:e,n[e].focus()}}static dropdownInterface(e,t){let n=k(e,Ee);var i="object"==typeof t?t:null;if(n=n||new $e(e,i),"string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}static jQueryInterface(e){return this.each(function(){$e.dropdownInterface(this,e)})}static clearMenus(n){if(!n||2!==n.button&&("keyup"!==n.type||"Tab"===n.key)){var i=d.find(Ce);for(let e=0,t=i.length;e<t;e++){const r=k(i[e],Ee);if(r&&!1!==r._config.autoClose&&r._element.classList.contains(Ae)){const s={relatedTarget:r._element};if(n){const a=n.composedPath();var o=a.includes(r._menu);if(a.includes(r._element)||"inside"===r._config.autoClose&&!o||"outside"===r._config.autoClose&&o)continue;if(r._menu.contains(n.target)&&("keyup"===n.type&&"Tab"===n.key||/input|select|option|textarea|form/i.test(n.target.tagName)))continue;"click"===n.type&&(s.clickEvent=n)}r._completeHide(s)}}}}static getParentFromElement(e){return o(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?!("Space"===e.key||e.key!==Le&&(e.key!==Oe&&e.key!==ke||e.target.closest(We))):xe.test(e.key)){var t=this.classList.contains(Ae);if((t||e.key!==Le)&&(e.preventDefault(),e.stopPropagation(),!m(this))){var n=()=>this.matches(Ce)?this:d.prev(this,Ce)[0];if(e.key===Le)return n().focus(),void $e.clearMenus();t||e.key!==ke&&e.key!==Oe?t&&"Space"!==e.key?$e.getInstance(n())._selectMenuItem(e):$e.clearMenus():n().click()}}}}U.on(document,e,Ce,$e.dataApiKeydownHandler),U.on(document,e,We,$e.dataApiKeydownHandler),U.on(document,De,$e.clearMenus),U.on(document,"keyup.bs.dropdown.data-api",$e.clearMenus),U.on(document,De,Ce,function(e){e.preventDefault(),$e.dropdownInterface(this)}),S($e);const He=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Ue=".sticky-top",ze=()=>{var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)},Ve=(t=ze())=>{Fe(),Ke("body","paddingRight",e=>e+t),Ke(He,"paddingRight",e=>e+t),Ke(Ue,"marginRight",e=>e-t)},Fe=()=>{var e=document.body.style.overflow;e&&G.setDataAttribute(document.body,"overflow",e),document.body.style.overflow="hidden"},Ke=(e,i,o)=>{const r=ze();d.find(e).forEach(e=>{var t,n;e!==document.body&&window.innerWidth>e.clientWidth+r||(t=e.style[i],n=window.getComputedStyle(e)[i],G.setDataAttribute(e,i,t),e.style[i]=`${o(Number.parseFloat(n))}px`)})},Xe=()=>{Ye("body","overflow"),Ye("body","paddingRight"),Ye(He,"paddingRight"),Ye(Ue,"marginRight")},Ye=(e,n)=>{d.find(e).forEach(e=>{var t=G.getDataAttribute(e,n);void 0===t?e.style.removeProperty(n):(G.removeDataAttribute(e,n),e.style[n]=t)})},Je={isVisible:!0,isAnimated:!1,rootElement:document.body,clickCallback:null},Qe={isVisible:"boolean",isAnimated:"boolean",rootElement:"element",clickCallback:"(function|null)"},Ge="backdrop",Ze=`mousedown.bs.${Ge}`;class et{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&b(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation(()=>{E(e)})):E(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(()=>{this.dispose(),E(e)})):E(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className="modal-backdrop",this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...Je,..."object"==typeof e?e:{}}).rootElement=e.rootElement||document.body,g(Ge,e,Qe),e}_append(){this._isAppended||(this._config.rootElement.appendChild(this._getElement()),U.on(this._getElement(),Ze,()=>{E(this._config.clickCallback)}),this._isAppended=!0)}dispose(){this._isAppended&&(U.off(this._element,Ze),this._getElement().parentNode.removeChild(this._element),this._isAppended=!1)}_emulateAnimation(e){var t;this._config.isAnimated?(t=r(this._getElement()),U.one(this._getElement(),"transitionend",()=>E(e)),f(this._getElement(),t)):E(e)}}const tt=".bs.modal";const nt={backdrop:!0,keyboard:!0,focus:!0},it={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},ot=(tt,tt,`hidden${tt}`),rt=`show${tt}`,st=(tt,`focusin${tt}`),at=`resize${tt}`,lt=`click.dismiss${tt}`,ct=`keydown.dismiss${tt}`,ut=(tt,`mousedown.dismiss${tt}`);tt;const dt="modal-open",ht="modal-static";class ft extends z{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=d.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1}static get Default(){return nt}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){var t;this._isShown||this._isTransitioning||(this._isAnimated()&&(this._isTransitioning=!0),t=U.trigger(this._element,rt,{relatedTarget:e}),this._isShown||t.defaultPrevented||(this._isShown=!0,Ve(),document.body.classList.add(dt),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),U.on(this._element,lt,'[data-bs-dismiss="modal"]',e=>this.hide(e)),U.on(this._dialog,ut,()=>{U.one(this._element,"mouseup.dismiss.bs.modal",e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)})}),this._showBackdrop(()=>this._showElement(e))))}hide(e){e&&e.preventDefault(),this._isShown&&!this._isTransitioning&&(U.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,(e=this._isAnimated())&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),U.off(document,st),this._element.classList.remove("show"),U.off(this._element,lt),U.off(this._dialog,ut),this._queueCallback(()=>this._hideModal(),this._element,e)))}dispose(){[window,this._dialog].forEach(e=>U.off(e,tt)),this._backdrop.dispose(),super.dispose(),U.off(document,st)}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new et({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_getConfig(e){return e={...nt,...G.getDataAttributes(this._element),...e},g("modal",e,it),e}_showElement(e){var t=this._isAnimated();const n=d.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),t&&b(this._element),this._element.classList.add("show"),this._config.focus&&this._enforceFocus();this._queueCallback(()=>{this._config.focus&&this._element.focus(),this._isTransitioning=!1,U.trigger(this._element,"shown.bs.modal",{relatedTarget:e})},this._dialog,t)}_enforceFocus(){U.off(document,st),U.on(document,st,e=>{document===e.target||this._element===e.target||this._element.contains(e.target)||this._element.focus()})}_setEscapeEvent(){this._isShown?U.on(this._element,ct,e=>{this._config.keyboard&&"Escape"===e.key?(e.preventDefault(),this.hide()):this._config.keyboard||"Escape"!==e.key||this._triggerBackdropTransition()}):U.off(this._element,ct)}_setResizeEvent(){this._isShown?U.on(window,at,()=>this._adjustDialog()):U.off(window,at)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(dt),this._resetAdjustments(),Xe(),U.trigger(this._element,ot)})}_showBackdrop(e){U.on(this._element,lt,e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())}),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(!U.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented){const e=this._element.scrollHeight>document.documentElement.clientHeight;e||(this._element.style.overflowY="hidden"),this._element.classList.add(ht);const t=r(this._dialog);U.off(this._element,"transitionend"),U.one(this._element,"transitionend",()=>{this._element.classList.remove(ht),e||(U.one(this._element,"transitionend",()=>{this._element.style.overflowY=""}),f(this._element,t))}),f(this._element,t),this._element.focus()}}_adjustDialog(){var e=this._element.scrollHeight>document.documentElement.clientHeight,t=ze(),n=0<t;(!n&&e&&!w()||n&&!e&&w())&&(this._element.style.paddingLeft=`${t}px`),(n&&!e&&!w()||!n&&e&&w())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,n){return this.each(function(){const e=ft.getInstance(this)||new ft(this,"object"==typeof t?t:{});if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](n)}})}}U.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',function(e){const t=o(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),U.one(t,rt,e=>{e.defaultPrevented||U.one(t,ot,()=>{p(this)&&this.focus()})});const n=ft.getInstance(t)||new ft(t);n.toggle(this)}),S(ft);const gt="offcanvas",pt="bs.offcanvas";e=`.${pt}`;const mt={backdrop:!0,keyboard:!0,scroll:!1},vt={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},yt=".offcanvas.show",bt=`hidden${e}`,_t=`focusin${e}`;class wt extends z{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._addEventListeners()}static get NAME(){return gt}static get Default(){return mt}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||U.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(Ve(),this._enforceFocusOnElement(this._element)),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add("show"),this._queueCallback(()=>{U.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})},this._element,!0))}hide(){this._isShown&&(U.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(U.off(document,_t),this._element.blur(),this._isShown=!1,this._element.classList.remove("show"),this._backdrop.hide(),this._queueCallback(()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||Xe(),U.trigger(this._element,bt)},this._element,!0)))}dispose(){this._backdrop.dispose(),super.dispose(),U.off(document,_t)}_getConfig(e){return e={...mt,...G.getDataAttributes(this._element),..."object"==typeof e?e:{}},g(gt,e,vt),e}_initializeBackDrop(){return new et({isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_enforceFocusOnElement(t){U.off(document,_t),U.on(document,_t,e=>{document===e.target||t===e.target||t.contains(e.target)||t.focus()}),t.focus()}_addEventListeners(){U.on(this._element,"click.dismiss.bs.offcanvas",'[data-bs-dismiss="offcanvas"]',()=>this.hide()),U.on(this._element,"keydown.dismiss.bs.offcanvas",e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()})}static jQueryInterface(t){return this.each(function(){const e=k(this,pt)||new wt(this,"object"==typeof t?t:{});if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}})}}U.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',function(e){var t=o(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),!m(this)){U.one(t,bt,()=>{p(this)&&this.focus()});e=d.findOne(yt);e&&e!==t&&wt.getInstance(e).hide();const n=k(t,pt)||new wt(t);n.toggle(this)}}),U.on(window,"load.bs.offcanvas.data-api",()=>{d.find(yt).forEach(e=>(k(e,pt)||new wt(e)).show())}),S(wt);const St=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]);const Et=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Tt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;De={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function Lt(e,n,t){if(!e.length)return e;if(t&&"function"==typeof t)return t(e);const i=new window.DOMParser,o=i.parseFromString(e,"text/html"),r=Object.keys(n);var s=[].concat(...o.body.querySelectorAll("*"));for(let e=0,t=s.length;e<t;e++){const l=s[e];var a=l.nodeName.toLowerCase();if(r.includes(a)){const c=[].concat(...l.attributes),u=[].concat(n["*"]||[],n[a]||[]);c.forEach(e=>{((e,t)=>{var n=e.nodeName.toLowerCase();if(t.includes(n))return!St.has(n)||Boolean(Et.test(e.nodeValue)||Tt.test(e.nodeValue));const i=t.filter(e=>e instanceof RegExp);for(let e=0,t=i.length;e<t;e++)if(i[e].test(n))return!0;return!1})(e,u)||l.removeAttribute(e.nodeName)})}else l.parentNode.removeChild(l)}return o.body.innerHTML}const kt="tooltip",Ot="bs.tooltip";e=`.${Ot}`;const xt="bs-tooltip",Dt=new RegExp(`(^|\\s)${xt}\\S+`,"g"),At=new Set(["sanitize","allowList","sanitizeFn"]),Ct={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Wt={AUTO:"auto",TOP:"top",RIGHT:w()?"left":"right",BOTTOM:"bottom",LEFT:w()?"right":"left"},It={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:De,popperConfig:null},Pt={HIDE:`hide${e}`,HIDDEN:`hidden${e}`,SHOW:`show${e}`,SHOWN:`shown${e}`,INSERTED:`inserted${e}`,CLICK:`click${e}`,FOCUSIN:`focusin${e}`,FOCUSOUT:`focusout${e}`,MOUSEENTER:`mouseenter${e}`,MOUSELEAVE:`mouseleave${e}`},jt="fade",Rt="show",Bt="show",Nt="hover",Mt="focus";class qt extends z{constructor(e,t){if(void 0===s)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(t),this.tip=null,this._setListeners()}static get Default(){return It}static get NAME(){return kt}static get Event(){return Pt}static get DefaultType(){return Ct}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else this.getTipElement().classList.contains(Rt)?this._leave(null,this):this._enter(null,this)}dispose(){clearTimeout(this._timeout),U.off(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.parentNode&&this.tip.parentNode.removeChild(this.tip),this._popper&&this._popper.destroy(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this.isWithContent()&&this._isEnabled){var e=U.trigger(this._element,this.constructor.Event.SHOW);const n=v(this._element);var t=(null===n?this._element.ownerDocument.documentElement:n).contains(this._element);if(!e.defaultPrevented&&t){const i=this.getTipElement();t=a(this.constructor.NAME);i.setAttribute("id",t),this._element.setAttribute("aria-describedby",t),this.setContent(),this._config.animation&&i.classList.add(jt);t="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,t=this._getAttachment(t);this._addAttachmentClass(t);const{container:o}=this._config;L(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(o.appendChild(i),U.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=s.createPopper(this._element,i,this._getPopperConfig(t)),i.classList.add(Rt);const r="function"==typeof this._config.customClass?this._config.customClass():this._config.customClass;r&&i.classList.add(...r.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(e=>{U.on(e,"mouseover",y)});t=this.tip.classList.contains(jt);this._queueCallback(()=>{var e=this._hoverState;this._hoverState=null,U.trigger(this._element,this.constructor.Event.SHOWN),"out"===e&&this._leave(null,this)},this.tip,t)}}}hide(){if(this._popper){const t=this.getTipElement();var e;U.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented||(t.classList.remove(Rt),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(e=>U.off(e,"mouseover",y)),this._activeTrigger.click=!1,this._activeTrigger[Mt]=!1,this._activeTrigger[Nt]=!1,e=this.tip.classList.contains(jt),this._queueCallback(()=>{this._isWithActiveTrigger()||(this._hoverState!==Bt&&t.parentNode&&t.parentNode.removeChild(t),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),U.trigger(this._element,this.constructor.Event.HIDDEN),this._popper&&(this._popper.destroy(),this._popper=null))},this.tip,e),this._hoverState="")}}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");return e.innerHTML=this._config.template,this.tip=e.children[0],this.tip}setContent(){const e=this.getTipElement();this.setElementContent(d.findOne(".tooltip-inner",e),this.getTitle()),e.classList.remove(jt,Rt)}setElementContent(e,t){if(null!==e)return u(t)?(t=h(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.appendChild(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Lt(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){let e=this._element.getAttribute("data-bs-original-title");return e=e||("function"==typeof this._config.title?this._config.title.call(this._element):this._config.title),e}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){var n=this.constructor.DATA_KEY;return(t=t||k(e.delegateTarget,n))||(t=new this.constructor(e.delegateTarget,this._getDelegateConfig()),L(e.delegateTarget,n,t)),t}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map(e=>Number.parseInt(e,10)):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(e){e={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${xt}-${this.updateAttachment(e)}`)}_getAttachment(e){return Wt[e.toUpperCase()]}_setListeners(){const e=this._config.trigger.split(" ");e.forEach(e=>{var t;"click"===e?U.on(this._element,this.constructor.Event.CLICK,this._config.selector,e=>this.toggle(e)):"manual"!==e&&(t=e===Nt?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,e=e===Nt?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT,U.on(this._element,t,this._config.selector,e=>this._enter(e)),U.on(this._element,e,this._config.selector,e=>this._leave(e)))}),this._hideModalHandler=()=>{this._element&&this.hide()},U.on(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){var e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");!e&&"string"==t||(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?Mt:Nt]=!0),t.getTipElement().classList.contains(Rt)||t._hoverState===Bt?t._hoverState=Bt:(clearTimeout(t._timeout),t._hoverState=Bt,t._config.delay&&t._config.delay.show?t._timeout=setTimeout(()=>{t._hoverState===Bt&&t.show()},t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?Mt:Nt]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t._config.delay&&t._config.delay.hide?t._timeout=setTimeout(()=>{"out"===t._hoverState&&t.hide()},t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=G.getDataAttributes(this._element);return Object.keys(t).forEach(e=>{At.has(e)&&delete t[e]}),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:h(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),g(kt,e,this.constructor.DefaultType),e.sanitize&&(e.template=Lt(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};if(this._config)for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(Dt);null!==e&&0<e.length&&e.map(e=>e.trim()).forEach(e=>t.classList.remove(e))}_handlePopperPlacementChange(e){var{state:e}=e;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}static jQueryInterface(n){return this.each(function(){let e=k(this,Ot);var t="object"==typeof n&&n;if((e||!/dispose|hide/.test(n))&&(e=e||new qt(this,t),"string"==typeof n)){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n]()}})}}S(qt);const $t="bs.popover";e=`.${$t}`;const Ht="bs-popover",Ut=new RegExp(`(^|\\s)${Ht}\\S+`,"g"),zt={...qt.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},Vt={...qt.DefaultType,content:"(string|element|function)"},Ft={HIDE:`hide${e}`,HIDDEN:`hidden${e}`,SHOW:`show${e}`,SHOWN:`shown${e}`,INSERTED:`inserted${e}`,CLICK:`click${e}`,FOCUSIN:`focusin${e}`,FOCUSOUT:`focusout${e}`,MOUSEENTER:`mouseenter${e}`,MOUSELEAVE:`mouseleave${e}`};class Kt extends qt{static get Default(){return zt}static get NAME(){return"popover"}static get Event(){return Ft}static get DefaultType(){return Vt}isWithContent(){return this.getTitle()||this._getContent()}setContent(){const e=this.getTipElement();this.setElementContent(d.findOne(".popover-header",e),this.getTitle());let t=this._getContent();"function"==typeof t&&(t=t.call(this._element)),this.setElementContent(d.findOne(".popover-body",e),t),e.classList.remove("fade","show")}_addAttachmentClass(e){this.getTipElement().classList.add(`${Ht}-${this.updateAttachment(e)}`)}_getContent(){return this._element.getAttribute("data-bs-content")||this._config.content}_cleanTipClass(){const t=this.getTipElement(),e=t.getAttribute("class").match(Ut);null!==e&&0<e.length&&e.map(e=>e.trim()).forEach(e=>t.classList.remove(e))}static jQueryInterface(n){return this.each(function(){let e=k(this,$t);var t="object"==typeof n?n:null;if((e||!/dispose|hide/.test(n))&&(e||(e=new Kt(this,t),L(this,$t,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n]()}})}}S(Kt);const Xt="scrollspy";const Yt=".bs.scrollspy";const Jt={offset:10,method:"auto",target:""},Qt={offset:"number",method:"string",target:"(string|element)"};Yt,Yt;Yt;const Gt="dropdown-item",Zt="active",en=".nav-link",tn=".list-group-item",nn="position";class on extends z{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._selector=`${this._config.target} ${en}, ${this._config.target} ${tn}, ${this._config.target} .${Gt}`,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,U.on(this._scrollElement,"scroll.bs.scrollspy",()=>this._process()),this.refresh(),this._process()}static get Default(){return Jt}static get NAME(){return Xt}refresh(){var e=this._scrollElement===this._scrollElement.window?"offset":nn;const i="auto"===this._config.method?e:this._config.method,o=i===nn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();const t=d.find(this._selector);t.map(e=>{var t=l(e);const n=t?d.findOne(t):null;if(n){e=n.getBoundingClientRect();if(e.width||e.height)return[G[i](n).top+o,t]}return null}).filter(e=>e).sort((e,t)=>e[0]-t[0]).forEach(e=>{this._offsets.push(e[0]),this._targets.push(e[1])})}dispose(){U.off(this._scrollElement,Yt),super.dispose()}_getConfig(t){if("string"!=typeof(t={...Jt,...G.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target&&u(t.target)){let{id:e}=t.target;e||(e=a(Xt),t.target.id=e),t.target=`#${e}`}return g(Xt,t,Qt),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=this._selector.split(",").map(e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`),n=d.findOne(e.join(","));n.classList.contains(Gt)?(d.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(Zt),n.classList.add(Zt)):(n.classList.add(Zt),d.parents(n,".nav, .list-group").forEach(e=>{d.prev(e,`${en}, ${tn}`).forEach(e=>e.classList.add(Zt)),d.prev(e,".nav-item").forEach(e=>{d.children(e,en).forEach(e=>e.classList.add(Zt))})})),U.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){d.find(this._selector).filter(e=>e.classList.contains(Zt)).forEach(e=>e.classList.remove(Zt))}static jQueryInterface(t){return this.each(function(){const e=on.getInstance(this)||new on(this,"object"==typeof t?t:{});if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}U.on(window,"load.bs.scrollspy.data-api",()=>{d.find('[data-bs-spy="scroll"]').forEach(e=>new on(e))}),S(on);const rn="bs.tab";e=`.${rn}`;const sn="active",an=".active",ln=":scope > li > .active";class cn extends z{static get NAME(){return"tab"}show(){if(!this._element.parentNode||this._element.parentNode.nodeType!==Node.ELEMENT_NODE||!this._element.classList.contains(sn)){let e;var t=o(this._element),n=this._element.closest(".nav, .list-group");n&&(i="UL"===n.nodeName||"OL"===n.nodeName?ln:an,e=d.find(i,n),e=e[e.length-1]);var i=e?U.trigger(e,"hide.bs.tab",{relatedTarget:this._element}):null;U.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==i&&i.defaultPrevented||(this._activate(this._element,n),n=()=>{U.trigger(e,"hidden.bs.tab",{relatedTarget:this._element}),U.trigger(this._element,"shown.bs.tab",{relatedTarget:e})},t?this._activate(t,t.parentNode,n):n())}}_activate(e,t,n){const i=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?d.children(t,an):d.find(ln,t))[0];var o=n&&i&&i.classList.contains("fade"),t=()=>this._transitionComplete(e,i,n);i&&o?(i.classList.remove("show"),this._queueCallback(t,e,!0)):t()}_transitionComplete(e,t,n){if(t){t.classList.remove(sn);const o=d.findOne(":scope > .dropdown-menu .active",t.parentNode);o&&o.classList.remove(sn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(sn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),b(e),e.classList.contains("fade")&&e.classList.add("show");let i=e.parentNode;i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")&&((t=e.closest(".dropdown"))&&d.find(".dropdown-toggle",t).forEach(e=>e.classList.add(sn)),e.setAttribute("aria-expanded",!0)),n&&n()}static jQueryInterface(t){return this.each(function(){const e=k(this,rn)||new cn(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}U.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',function(e){if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),!m(this)){const t=k(this,rn)||new cn(this);t.show()}}),S(cn);const un="bs.toast";e=`.${un}`;const dn="show",hn="showing",fn={animation:"boolean",autohide:"boolean",delay:"number"},gn={animation:!0,autohide:!0,delay:5e3};class pn extends z{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return fn}static get Default(){return gn}static get NAME(){return"toast"}show(){U.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),b(this._element),this._element.classList.add(hn),this._queueCallback(()=>{this._element.classList.remove(hn),this._element.classList.add(dn),U.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()},this._element,this._config.animation))}hide(){this._element.classList.contains(dn)&&(U.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.remove(dn),this._queueCallback(()=>{this._element.classList.add("hide"),U.trigger(this._element,"hidden.bs.toast")},this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(dn)&&this._element.classList.remove(dn),super.dispose()}_getConfig(e){return e={...gn,...G.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},g("toast",e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}t?this._clearTimeout():(e=e.relatedTarget,this._element===e||this._element.contains(e)||this._maybeScheduleHide())}_setListeners(){U.on(this._element,"click.dismiss.bs.toast",'[data-bs-dismiss="toast"]',()=>this.hide()),U.on(this._element,"mouseover.bs.toast",e=>this._onInteraction(e,!0)),U.on(this._element,"mouseout.bs.toast",e=>this._onInteraction(e,!1)),U.on(this._element,"focusin.bs.toast",e=>this._onInteraction(e,!0)),U.on(this._element,"focusout.bs.toast",e=>this._onInteraction(e,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(n){return this.each(function(){let e=k(this,un);var t="object"==typeof n&&n;if(e=e||new pn(this,t),"string"==typeof n){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n](this)}})}}return S(pn),{Alert:F,Button:Y,Carousel:de,Collapse:we,Dropdown:$e,Modal:ft,Offcanvas:wt,Popover:Kt,ScrollSpy:on,Tab:cn,Toast:pn,Tooltip:qt}},"object"==typeof n&&void 0!==t?t.exports=o(e("@popperjs/core")):"function"==typeof define&&define.amd?define(["@popperjs/core"],o):(i="undefined"!=typeof globalThis?globalThis:i||self).bootstrap=o(i.Popper)},{"@popperjs/core":1}],3:[function(e,t,n){var i,o,t=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(i===setTimeout)return setTimeout(t,0);if((i===r||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch(e){try{return i.call(null,t,0)}catch(e){return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:r}catch(e){i=r}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var l,c=[],u=!1,d=-1;function h(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=a(h);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function p(){}t.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new g(e,t)),1!==c.length||u||a(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},t.title="browser",t.browser=!0,t.env={},t.argv=[],t.version="",t.versions={},t.on=p,t.addListener=p,t.once=p,t.off=p,t.removeListener=p,t.removeAllListeners=p,t.emit=p,t.prependListener=p,t.prependOnceListener=p,t.listeners=function(e){return[]},t.binding=function(e){throw new Error("process.binding is not supported")},t.cwd=function(){return"/"},t.chdir=function(e){throw new Error("process.chdir is not supported")},t.umask=function(){return 0}},{}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AddWidgetDialog=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./AddWidgetService"),s=e("../../../core/BaseDialog"),a=e("../../../core/common"),l=e("bootstrap"),c=e("../../../Services/TuxboardService");n.AddWidgetDialog=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(u,s.BaseDialog),i(u,[{key:"getDataId",value:function(e){return e.getAttribute(a.dataId)}},{key:"getWidgetDialog",value:function(){return document.querySelector(this.addWidgetDialogSelector)}},{key:"getWidgetList",value:function(){return this.getWidgetDialog().querySelectorAll(this.widgetListItemSelector)}},{key:"getAddWidgetButton",value:function(){return this.getWidgetDialog().querySelector(this.addWidgetButtonSelector)}},{key:"getWidgetTabGroups",value:function(){return this.getWidgetDialog().querySelectorAll(this.widgetTabGroupSelector)}},{key:"getSelectedWidget",value:function(){return this.getWidgetDialog().querySelector(this.widgetListItemSelector+this.widgetSelectionSelector)}},{key:"getSelectedSelector",value:function(){return(0,a.noPeriod)(this.widgetSelectionSelector)}},{key:"setWidgetDialog",value:function(e){var t=this.getWidgetDialog().querySelector(this.dialogBodySelector);t&&(t.innerHTML=e)}},{key:"hide",value:function(){var e=l.Modal.getInstance(this.getWidgetDialog());e&&e.hide()}},{key:"updateAddWidget",value:function(){var e=this.getAddWidgetButton();(this.getSelectedWidget()?(0,a.enableElement):(0,a.disableElement))(e)}},{key:"resetSelectedWidgets",value:function(){var t=this,e=this.getWidgetList();[].forEach.call(e,function(e){e.classList.remove(t.getSelectedSelector())})}},{key:"selectWidget",value:function(e){var t=e.currentTarget,e=t.classList.contains(this.getSelectedSelector());this.resetSelectedWidgets(),e||t.classList.add(this.getSelectedSelector()),this.updateAddWidget()}},{key:"addWidgetClick",value:function(e){var t=this,n=this.getSelectedWidget().getAttribute(a.dataId),i=this.tuxboard.getTab(),o=i.getLayout().getFirstLayoutRow().getColumns(),r=o&&0<o.length?o[0]:null;this.service.addWidgetService(i.getCurrentTabId(),n).then(function(e){var n;!e||(n=JSON.parse(e)).success&&(t.hide(),r.getDom().insertAdjacentHTML("beforeend",n.template),e=i.getLayout().getWidgetPlacements().filter(function(e,t){return e.getPlacementId()===n.placementId}),t.tuxboard.updateWidgets(e))})}},{key:"setupWidgetClicks",value:function(){var t=this;this.getAddWidgetButton().addEventListener("click",function(e){return t.addWidgetClick(e)},{once:!0}),[].forEach.call(this.getWidgetList(),function(e){e.addEventListener("click",function(e){return t.selectWidget(e)},{once:!0})})}},{key:"setupWidgetTabs",value:function(){this.getWidgetTabGroups().forEach(function(e){var t=new l.Tab(e);e.addEventListener("click",function(e){e.preventDefault(),t.show()})})}},{key:"initialize",value:function(e){this.setWidgetDialog(e),this.setupWidgetTabs(),this.setupWidgetClicks()}}]),u);function u(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(u.__proto__||Object.getPrototypeOf(u)).call(this,t));return n.tuxboard=e,n.service=new r.AddWidgetService,n.tuxboardService=new c.TuxboardService,n.addWidgetDialogSelector="#widget-dialog",n.widgetTabGroupSelector=".widget-tabs",n.widgetListItemSelector="a.widget-item",n.addWidgetButtonSelector=".add-widget",n.widgetSelectionSelector=".selected",n.selector=t||n.addWidgetDialogSelector,n}},{"../../../Services/TuxboardService":20,"../../../core/BaseDialog":28,"../../../core/common":36,"./AddWidgetService":5,bootstrap:2}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AddWidgetService=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}e=e("../../../core/BaseService");n.AddWidgetService=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e.BaseService),i(r,[{key:"addWidgetService",value:function(e,t){t=new Request(this.tuxWidgetAddWidgetUrl,{method:"post",body:JSON.stringify({TabId:e,WidgetId:t}),headers:{"Content-Type":"application/json"}});return fetch(t).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"getWidgetDialogService",value:function(){var e=new Request(this.tuxWidgetDialogUrl);return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}}]),r);function r(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));return e.tuxWidgetDialogUrl="/widgetdialog/",e.tuxWidgetAddWidgetUrl="/widgetdialog/addwidget/",e}},{"../../../core/BaseService":29}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ChangeLayoutDialog=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../../../core/BaseDialog"),s=e("./ChangeLayoutService"),a=e("../../../core/common"),l=e("bootstrap"),c=e("./LayoutItem"),u=e("./LayoutModel");n.ChangeLayoutDialog=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(d,r.BaseDialog),i(d,[{key:"getLayoutOverlay",value:function(){return this.getLayoutDialog().querySelector(this.generalOverlaySelector)}},{key:"getLayoutDialog",value:function(){return document.querySelector(this.layoutDialogSelector)}},{key:"getLayoutList",value:function(){return this.getLayoutDialog().querySelector(this.layoutListSelector)}},{key:"getDropdown",value:function(){return this.getLayoutDialog().querySelector(this.dropdownToggleSelector)}},{key:"getLayoutListItems",value:function(){return this.getLayoutList().children}},{key:"getLayoutItemSelector",value:function(e){return this.layoutItemSelector+"["+a.dataId+'="'+e+'"]'}},{key:"getSaveLayoutButton",value:function(){return this.getLayoutDialog().querySelector(this.saveLayoutButtonSelector)}},{key:"setLayoutDialog",value:function(e){var t=this.getLayoutDialog().querySelector(this.dialogBodySelector);t&&(t.innerHTML=e)}},{key:"initialize",value:function(e){this.setLayoutDialog(e);new l.Dropdown(this.getDropdown());this.initLayoutDragAndDrop(),this.attachLayoutEvents(),this.updateLayoutRowEvents(),this.resetColumnStatus()}},{key:"hide",value:function(){var e=l.Modal.getInstance(this.getLayoutDialog());e&&e.hide()}},{key:"displayLayoutErrors",value:function(e){var t=this.getLayoutDialog();[].forEach.call(e.LayoutErrors,function(e){e=t.querySelector("[data-id='"+e.layoutRowId+"']");e?e.setAttribute("style","outline: 1px solid #F00"):e.removeAttribute("style")})}},{key:"saveCurrentLayout",value:function(e){var t=this,i=new Array;[].forEach.call(this.getLayoutListItems(),function(e,t){var n=e.getAttribute("data-row-type"),e=(e=e.getAttribute(a.dataId))||"0";i.push(new c.LayoutItem(t,e,n))});var n=new u.LayoutModel(i,this.currentTab.getCurrentTabId());this.layoutService.saveLayoutService(n).then(function(){t.hide(),t.tuxboard.refresh()})}},{key:"attachLayoutEvents",value:function(){var t=this,e=this.getLayoutDialog();this.getSaveLayoutButton().addEventListener("click",function(e){return t.saveCurrentLayout(e)},{once:!0});e=e.querySelectorAll(this.layoutTypesSelector);[].forEach.call(e,function(e){e.addEventListener("click",function(e){return t.addLayoutRow(e)},{once:!0})})}},{key:"updateLayoutRowEvents",value:function(){var t=this,e=this.getLayoutDialog().querySelectorAll(this.deleteLayoutButtonSelector);[].forEach.call(e,function(e){e.addEventListener("click",function(e){return t.layoutDeleteButtonClick(e)},{once:!0})})}},{key:"addLayoutRow",value:function(e){var t=this,e=e.target.attributes[a.dataId].value;this.layoutService.addLayoutRow(e).then(function(e){t.updateLayoutData(e)})}},{key:"getRowByEvent",value:function(e){e=e.target.attributes[a.dataId].value;return this.getLayoutDialog().querySelector(this.getLayoutItemSelector(e))}},{key:"updateLayoutData",value:function(e){this.resetColumnStatus(),this.getLayoutList().insertAdjacentHTML("beforeend",e),this.initLayoutDragAndDrop(),this.updateLayoutRowEvents()}},{key:"resetColumnStatus",value:function(){var e=this.getLayoutDialog(),t=this.getLayoutListItems();[].forEach.call(t,function(e){e.style=""});e=e.querySelector(this.layoutMessageSelector);e&&(e.innerHTML="")}},{key:"setColumnStatus",value:function(e,t){var n=this.getLayoutDialog(),e="li["+a.dataId+"='"+e+"']",e=n.querySelector(e);n.querySelector(this.layoutMessageSelector).innerHTML=t.text,e.setAttribute("style","outline: 1px solid #F00")}},{key:"layoutDeleteButtonClick",value:function(e){var t,n=this,i=this.getRowByEvent(e);i&&(t=(0,a.getDataId)(i),this.layoutService.deleteRowFromLayoutDialogService(i).then(function(e){e.success?(n.resetColumnStatus(),i.remove()):n.setColumnStatus(t,e)}))}},{key:"initLayoutDragAndDrop",value:function(){var t=this,e=this.getLayoutList(),n=this.getLayoutListItems();function i(e){e.target.parentElement.parentElement.setAttribute("draggable","true")}function o(e){e.target.parentElement.parentElement.setAttribute("draggable","false")}function r(e){e.dataTransfer.effectAllowed="move";var t=e.target;t instanceof HTMLLIElement&&e.dataTransfer.setData("text",t.getAttribute(a.dataId))}[].forEach.call(n,function(e){e=e.querySelector(t.layoutListHandleSelector);e.addEventListener("mousedown",i,!1),e.addEventListener("mouseup",o,!1),e.parentNode.parentNode.addEventListener("dragstart",r,!1)}),e.addEventListener("dragover",function(e){!function(e){e.preventDefault&&e.preventDefault();e.dataTransfer.dropEffect="move";var t=e.target,e=e.dataTransfer.getData("text"),e=document.querySelector(".layout-item[data-id='"+e+"']");e&&(0,a.isLayoutListItem)(t)&&((0,a.isBefore)(e,t)?e.insertBefore(e,t):e.insertBefore(e,t.nextSibling),t.classList.remove("over"))}(e)},!1),e.addEventListener("dragenter",function(e){e.preventDefault&&e.preventDefault();{if(e.target instanceof HTMLUListElement)return!0;if(e.target instanceof HTMLLIElement)return e.target.attributes.style="border-bottom: 1px dashed #F00",!0}return!1},!1),e.addEventListener("dragleave",function(e){e.preventDefault&&e.preventDefault();{if(e.target instanceof HTMLUListElement)return!0;if(e.target instanceof HTMLLIElement)return!(e.target.attributes.style="")}return!1},!1),e.addEventListener("drop",function(e){e.preventDefault&&e.preventDefault();var t=e.dataTransfer.getData("text"),t=document.querySelector(".layout-item[data-id='"+t+"']"),n=e.target;for(;!(0,a.isLayoutListItem)(n);)n=n.parentNode;t&&(0,a.isLayoutListItem)(n)&&(e=n.parentNode,(0,a.isBefore)(t,n)?e.insertBefore(t,n):e.insertBefore(t,n.nextSibling),n.classList.remove("over"))},!1),e.addEventListener("dragend",function(e){e=e.target;e&&e.setAttribute("draggable","false")},!1)}}]),d);function d(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(d.__proto__||Object.getPrototypeOf(d)).call(this,t));return n.tuxboard=e,n.layoutService=new s.ChangeLayoutService,n.layoutDialogSelector="#layout-dialog",n.saveLayoutButtonSelector=".save-layout",n.deleteLayoutButtonSelector=".layout-delete-button",n.layoutListSelector=".layout-list",n.layoutItemSelector=".layout-item",n.dropdownToggleSelector=".dropdown-toggle",n.layoutTypesSelector=".layout-types a",n.layoutListHandleSelector=".handle",n.layoutMessageSelector="#layout-message",n.canRefresh=!1,n.selector=t||n.layoutDialogSelector,n.currentTab=n.tuxboard.getTab(),n}},{"../../../core/BaseDialog":28,"../../../core/common":36,"./ChangeLayoutService":7,"./LayoutItem":8,"./LayoutModel":9,bootstrap:2}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ChangeLayoutService=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../../../core/BaseService"),s=e("../../../core/common");n.ChangeLayoutService=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,r.BaseService),i(a,[{key:"getLayoutDialog",value:function(e){e=new Request(this.tuxLayoutDialogUrl+e,{method:"post"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"addLayoutRow",value:function(e){e=new Request(this.tuxLayoutAddRowUrl+e,{method:"post"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"deleteRowFromLayoutDialogService",value:function(e){var t=e.getAttribute(s.dataId);if("0"!==t){t=new Request(this.tuxDeleteLayoutRowUrl+t,{method:"delete"});return fetch(t).then(this.validateResponse).then(this.readResponseAsJson).catch(this.logError)}e.remove()}},{key:"saveLayoutService",value:function(e){e=new Request(this.tuxSaveLayoutUrl,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}});return fetch(e).then(this.validateResponse).catch(this.logError)}}]),a);function a(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e));return e.tuxLayoutDialogUrl="/layoutdialog/",e.tuxLayoutAddRowUrl="/layoutdialog/addlayoutrow/",e.tuxSaveLayoutUrl="/layoutdialog/saveLayout/",e.tuxDeleteLayoutRowUrl="/layoutdialog/DeleteLayoutRow/",e}},{"../../../core/BaseService":29,"../../../core/common":36}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.LayoutItem=function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Index=t,this.LayoutRowId=n,this.TypeId=i}},{}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.LayoutModel=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.LayoutList=t,this.TabId=n}},{}],10:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AddWidgetButton=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../Dialogs/AddWidgetDialog/AddWidgetDialog"),s=e("../../Extras/Dialogs/AddWidgetDialog/AddWidgetService"),a=e("bootstrap"),e=e("./TuxbarButton");n.AddWidgetButton=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,e.TuxbarButton),i(l,[{key:"getDom",value:function(){return this.tuxBar.getDom().querySelector(this.selector)}},{key:"displayDialogEvent",value:function(e,t){var n,i=this;e.currentTarget&&((n=new r.AddWidgetDialog(t.getTuxboard())).getWidgetDialog().addEventListener("show.bs.modal",function(){i.service.getWidgetDialogService().then(function(e){n.initialize(e),n.hideOverlay()})},{once:!0}),new a.Modal(n.getWidgetDialog()).show())}}]),l);function l(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,t,e));n.tuxbarAddWidgetSelector="#widget-button",n.service=new s.AddWidgetService,n.selector=e||n.tuxbarAddWidgetSelector;e=n.tuxBar.getDom().querySelector(n.selector);return e&&e.addEventListener("click",function(e){n.displayDialogEvent(e,t)},!1),n}},{"../../Extras/Dialogs/AddWidgetDialog/AddWidgetService":5,"../Dialogs/AddWidgetDialog/AddWidgetDialog":4,"./TuxbarButton":14,bootstrap:2}],11:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ChangeLayoutButton=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../Dialogs/ChangeLayoutDialog/ChangeLayoutDialog"),s=e("../Dialogs/ChangeLayoutDialog/ChangeLayoutService"),a=e("bootstrap"),e=e("./TuxbarButton");n.ChangeLayoutButton=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,e.TuxbarButton),i(l,[{key:"getDom",value:function(){return this.tuxBar.getDom().querySelector(this.selector)}},{key:"changeLayoutClick",value:function(e,t){var n,i,o=this;e.currentTarget&&(t=t.getTuxboard(),n=t.getTab(),(i=new r.ChangeLayoutDialog(t)).getDom().addEventListener("shown.bs.modal",function(e){o.service.getLayoutDialog(n.getCurrentTabId()).then(function(e){i.initialize(e),i.hideOverlay()})},{once:!0}),new a.Modal(i.getLayoutDialog()).show())}}]),l);function l(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,t,e));n.tuxbarChangeLayoutButtonSelector="#layout-button",n.service=new s.ChangeLayoutService,n.selector=e||n.tuxbarChangeLayoutButtonSelector;e=n.getDom();return e&&e.addEventListener("click",function(e){n.changeLayoutClick(e,t)},!1),n}},{"../Dialogs/ChangeLayoutDialog/ChangeLayoutDialog":6,"../Dialogs/ChangeLayoutDialog/ChangeLayoutService":7,"./TuxbarButton":14,bootstrap:2}],12:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.RefreshButton=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}e=e("./TuxbarButton");n.RefreshButton=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e.TuxbarButton),i(r,[{key:"getDom",value:function(){return this.tuxBar.getDom().querySelector(this.selector)}}]),r);function r(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e,t));n.tuxbarRefreshButtonSelector="#refresh-button",n.selector=t||n.tuxbarRefreshButtonSelector;t=n.getDom();return t&&t.addEventListener("click",function(e){n.tuxBar.getTuxboard().refresh()},!1),n}},{"./TuxbarButton":14}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Tuxbar=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./AddWidgetButton"),s=e("./TuxbarMessage"),a=e("./ChangeLayoutButton"),l=e("./RefreshButton");n.Tuxbar=(i(c,[{key:"getDom",value:function(){return document.querySelector(this.tuxbarSelector)}},{key:"getTuxboard",value:function(){return this.parent}},{key:"initialize",value:function(){this.controls.push(new r.AddWidgetButton(this)),this.controls.push(new a.ChangeLayoutButton(this)),this.controls.push(new l.RefreshButton(this)),this.controls.push(new s.TuxbarMessage(this))}}]),c);function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),this.parent=e,this.tuxbarSelector=".tuxbar",this.controls=[],this.tuxbarSelector=t||this.tuxbarSelector,this.initialize()}},{"./AddWidgetButton":10,"./ChangeLayoutButton":11,"./RefreshButton":12,"./TuxbarMessage":15}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.TuxbarButton=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tuxBar=t,this.selector=n}},{}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.TuxbarMessage=(i(r,[{key:"getDom",value:function(){return this.tuxBar.getDom().querySelector(this.tuxbarMessageSelector)}},{key:"setMessage",value:function(e,t){var n=this.getDom();n&&(n.innerHTML=e)}}]),r);function r(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.tuxBar=e,this.selector=t,this.tuxbarMessageSelector="#tuxbar-status",this.tuxbarMessageSelector=t||this.tuxbarMessageSelector}},{}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.DragWidgetInfo=function e(t,n,i,o,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.placementId=t,this.currentColumnIndex=n,this.currentLayoutRowId=i,this.previousColumnIndex=o,this.previousLayoutRowId=r}},{}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.PlacementItem=function e(t,n,i,o){var r=4<arguments.length&&void 0!==arguments[4]&&arguments[4];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.PlacementId=t,this.Index=n,this.LayoutRowId=i,this.ColumnIndex=o,this.Static=r}},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.SettingValue=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.WidgetSettingId=t,this.Value=n}},{}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.WidgetProperties=function e(t,n,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.PlacementId=t,this.ColumnIndex=n,this.Index=i,this.LayoutRowId=o}},{}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.TuxboardService=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}e=e("../core/BaseService");n.TuxboardService=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e.BaseService),i(r,[{key:"updateWidgetPlacementStatus",value:function(){}},{key:"saveWidgetPlacementService",value:function(e,t){t={Column:t.currentColumnIndex,LayoutRowId:t.currentLayoutRowId,PreviousColumn:t.previousColumnIndex,PreviousLayout:t.previousLayoutRowId,PlacementId:t.placementId,PlacementList:t.placementList},t=new Request(this.tuxWidgetPlacementUrl,{method:"put",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}});return fetch(t).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"removeWidgetService",value:function(e){e=new Request(this.tuxWidgetRemoveWidgetUrl,{method:"delete",body:JSON.stringify({TabId:"",PlacementId:e}),headers:{"Content-Type":"application/json"}});return fetch(e).then(this.validateResponse).then(this.readResponseAsJson).catch(this.logError)}},{key:"updateCollapsedWidgetService",value:function(e,t){t=new Request(this.tuxToolCollapseUrl,{method:"post",body:JSON.stringify({Id:e,Collapsed:t})});return fetch(t).then(this.validateResponse).then(this.readResponseAsJson).catch(this.logError)}},{key:"getWidgetTemplate",value:function(e){e=new Request(this.tuxWidgetTemplateUrl+e,{method:"get"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"getWidgetService",value:function(e){e=new Request(this.tuxWidgetContentUrl+e,{method:"get"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"refreshService",value:function(){var e=new Request(this.tuxRefreshTuxboardUrl,{method:"get"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"getWidgetSettings",value:function(e){e=new Request(this.tuxWidgetSettingsUrl+e,{method:"get"});return fetch(e).then(this.validateResponse).then(this.readResponseAsText).catch(this.logError)}},{key:"saveSettings",value:function(e){e={Settings:Array.from(e).map(function(e){return{WidgetSettingId:e.WidgetSettingId,Value:e.Value}})},e=new Request(this.tuxWidgetSaveSettingsUrl,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}});return fetch(e).then(this.validateResponse).then(this.readResponseAsJson).catch(this.logError)}}]),r);function r(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));return e.tuxWidgetDialogUrl="/widgetdialog/",e.tuxWidgetSettingsUrl="/widgetsettings/",e.tuxWidgetAddWidgetUrl="/widgetdialog/addwidget/",e.tuxWidgetTemplateUrl="/WidgetTemplate/",e.tuxRefreshTuxboardUrl="/Tuxboard/Get/",e.tuxToolCollapseUrl="/Tuxboard/CollapseWidget/",e.tuxWidgetPlacementUrl="/Tuxboard/Put/",e.tuxWidgetRemoveWidgetUrl="/Tuxboard/removewidget/",e.tuxWidgetContentUrl="/Widget/",e.tuxWidgetSaveSettingsUrl="/WidgetSettings/Save/",e}},{"../core/BaseService":29}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetCollection=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../Widget/WidgetPlacement");n.WidgetCollection=(i(s,[{key:"getWidgetSelector",value:function(){return this.widgetSelector}},{key:"getWidgets",value:function(){var n=this;return Array.from(this.parent.querySelectorAll(this.widgetSelector)).map(function(e,t){return n.createWidget(e,t)})}},{key:"createWidget",value:function(e,t){var n=new r.WidgetPlacement(this.parent),e=e.getAttribute(n.getAttributeName());return n.setPlacementId(e),n.setIndex(t),n.setColumnIndex(this.columnIndex),n}},{key:"getWidgetProperties",value:function(e){return e.getProperties()}}]),s);function s(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.parent=e,this.columnIndex=t,this.layoutRowId=n,this.widgetSelector=".card",this.widgetSelector=i||this.widgetSelector}},{"../Widget/WidgetPlacement":22}],22:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetPlacement=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var s=e("../core/common"),a=e("../Services/TuxboardService"),l=e("../Models/WidgetProperties"),c=e("./WidgetSettings"),u=e("./WidgetToolbar/WidgetToolBar");n.WidgetPlacement=(o(d,[{key:"isCollapsed",value:function(){return this.getDom().classList.contains(s.collapsedToggleSelector)}},{key:"isStatic",value:function(){return"true"===this.getDom().getAttribute(s.isStaticAttribute)}},{key:"getDom",value:function(){return this.parent.querySelector(this.getSelector())}},{key:"getAttributeName",value:function(){return s.dataId}},{key:"setPlacementId",value:function(e){this.placementId=e}},{key:"getPlacementId",value:function(){return this.placementId}},{key:"setIndex",value:function(e){this.index=e}},{key:"getIndex",value:function(){return this.index}},{key:"setColumnIndex",value:function(e){this.columnIndex=e}},{key:"getColumnIndex",value:function(){return this.columnIndex}},{key:"getSelector",value:function(){return this.getSelectorWithId(this.getPlacementId())}},{key:"getSelectorWithId",value:function(e){return this.widgetSelector+"["+this.getAttributeName()+"='"+e+"']"}},{key:"getBody",value:function(){return this.getDom().querySelector(this.widgetBodySelector)}},{key:"hideBody",value:function(){var e=this.getBody();e&&null===e.getAttribute("hidden")&&e.setAttribute("hidden","")}},{key:"showBody",value:function(){var e=this.getBody();e&&null!==e.getAttribute("hidden")&&e.removeAttribute("hidden")}},{key:"getOverlay",value:function(){return this.getDom().querySelector(this.widgetOverlaySelector)}},{key:"showOverlay",value:function(){var e=this.getOverlay();e&&null!==e.getAttribute("hidden")&&e.removeAttribute("hidden")}},{key:"hideOverlay",value:function(){var e=this.getOverlay();e&&null===e.getAttribute("hidden")&&e.setAttribute("hidden","")}},{key:"getWidgetBodySelector",value:function(){return this.widgetBodySelector}},{key:"setWidgetBodySelector",value:function(e){this.widgetBodySelector=e}},{key:"getWidgetOverlay",value:function(){return this.widgetOverlaySelector}},{key:"setWidgetOverlay",value:function(e){this.widgetOverlaySelector=e}},{key:"setBody",value:function(e){var t=this.getDom();!t||(t=t.querySelector(this.widgetBodySelector))&&((0,s.clearNodes)(t),t.insertAdjacentHTML("afterbegin",e))}},{key:"setTitle",value:function(e){var t=this.getDom().querySelector(this.widgetTitleSelector);t&&(t.innerHTML=e)}},{key:"showWidgetSettings",value:function(){this.settings.displaySettings()}},{key:"updateWidgetToolbar",value:function(){"object"!=i(this.toolbar)&&(this.toolbar=new u.WidgetToolBar(this))}},{key:"update",value:function(){var t=this;this.isStatic()||(this.showOverlay(),this.service.getWidgetService(this.placementId).then(function(e){t.setBody(e),t.isCollapsed()||t.showBody(),t.hideOverlay(),t.updateWidgetToolbar()}))}},{key:"getProperties",value:function(){return new l.WidgetProperties(this.placementId,this.getColumnIndex(),this.getIndex(),this.parent.getAttribute(s.dataId))}}]),d);function d(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),this.parent=e,this.widgetSelector=".card",this.widgetTitleSelector=".card-title",this.widgetBodySelector=".card-body",this.generalOverlaySelector=".overlay",this.loadingSelector=".loading-status",this.widgetOverlaySelector=this.generalOverlaySelector+this.loadingSelector,this.service=new a.TuxboardService,this.widgetSelector=t||this.widgetSelector,this.settings=new c.WidgetSettings(this)}},{"../Models/WidgetProperties":19,"../Services/TuxboardService":20,"../core/common":36,"./WidgetSettings":23,"./WidgetToolbar/WidgetToolBar":26}],23:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetSettings=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../core/common"),s=e("../Models/SettingValue"),a=e("../Services/TuxboardService");n.WidgetSettings=(i(l,[{key:"getDom",value:function(){return this.widget.getDom().querySelector(this.widgetSettingsSelector)}},{key:"showWidgetSettings",value:function(){var e=this.getDom();e&&null!==e.getAttribute("hidden")&&e.removeAttribute("hidden"),this.widget.hideBody()}},{key:"hideWidgetSettings",value:function(){var e=this.getDom();e&&null===e.getAttribute("hidden")&&e.removeAttribute("hidden"),this.widget.showBody()}},{key:"attachSettingsEvent",value:function(){var t=this;this.getDom().querySelector(this.widgetSettingsSaveButtonSelector).addEventListener("click",function(e){t.saveSettingsClick(e)},!1),this.getDom().querySelector(this.widgetSettingsCancelButtonSelector).addEventListener("click",function(){t.hideWidgetSettings(),t.widget.showBody()},!1)}},{key:"getSettingValues",value:function(){var e=this.getDom().querySelectorAll(this.widgetSettingInputsSelector);return Array.from(e).map(function(e,t){return new s.SettingValue((0,r.getDataId)(e),e.value)})}},{key:"saveSettingsClick",value:function(e){var t=this,n=this.getSettingValues();this.service.saveSettings(n).then(function(e){e=Array.from(e).filter(function(e){return"widgettitle"===e.name.toLowerCase()})[0];e&&t.widget.setTitle(e.value),t.hideWidgetSettings(),t.widget.update()})}},{key:"displaySettings",value:function(){var n=this;this.widget.showOverlay(),this.service.getWidgetSettings(this.widget.getPlacementId()).then(function(e){var t=n.getDom();t?((0,r.clearNodes)(t),t.insertAdjacentHTML("beforeend",String(e)),n.widget.hideBody(),n.widget.hideOverlay(),n.showWidgetSettings(),n.attachSettingsEvent()):(n.widget.showBody(),n.hideWidgetSettings())})}}]),l);function l(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),this.widget=e,this.selector=t,this.widgetSettingsSelector=".widget-settings",this.widgetSettingsCancelButtonSelector=".settings-cancel",this.widgetSettingsSaveButtonSelector=".settings-save",this.widgetSettingInputsSelector=".setting-value",this.service=new a.TuxboardService,this.widgetSettingsSelector=t||this.widgetSettingsSelector}},{"../Models/SettingValue":18,"../Services/TuxboardService":20,"../core/common":36}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetCollapseButton=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../../core/common"),s=e("../../Services/TuxboardService"),e=e("./WidgetToolbarButton");n.WidgetCollapseButton=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,e.WidgetToolbarButton),i(a,[{key:"minimizeWidget",value:function(e,t){e=e.currentTarget;e&&(e=e.getAttribute(r.dataId),(t=t.getWidgetPlacement().getDom())&&(t.classList.contains(this.collapsedToggleSelector)?(t.classList.remove(this.collapsedToggleSelector),this.showWidgetBody(e),this.service.updateCollapsedWidgetService(e,!1).then(function(e){})):(t.classList.add(this.collapsedToggleSelector),this.hideWidgetBody(e),this.service.updateCollapsedWidgetService(e,!0).then(function(e){}))))}},{key:"getWidgetBody",value:function(e){e=(0,r.getDomWidget)(e);return e?e.querySelector(".card"):null}},{key:"hideWidgetBody",value:function(e){e=this.getWidgetBody(e);e&&e.setAttribute("hidden","")}},{key:"showWidgetBody",value:function(e){e=this.getWidgetBody(e);e&&e.removeAttribute("hidden")}}]),a);function a(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,t,e));n.collapsedButtonSelector=".collapse-widget",n.collapsedToggleSelector="collapsed",n.service=new s.TuxboardService,n.selector=e||n.collapsedButtonSelector,n.setName("collapseButton");e=n.getDom();return e&&e.addEventListener("click",function(e){n.minimizeWidget(e,t)},!1),n}},{"../../Services/TuxboardService":20,"../../core/common":36,"./WidgetToolbarButton":27}],25:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetRemoveButton=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("../../core/common"),s=e("../../Services/TuxboardService"),e=e("./WidgetToolbarButton");n.WidgetRemoveButton=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,e.WidgetToolbarButton),i(a,[{key:"removeWidget",value:function(e,t){e=e.currentTarget;e&&(e=e.getAttribute(r.dataId),this.service.removeWidgetService(e).then(function(e){e&&e.success&&(e="["+r.dataId+"='"+e.id+"']",(e=document.querySelector(e))&&e.remove())}))}}]),a);function a(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,t,e));n.removeWidgetButtonSelector=".remove-widget",n.service=new s.TuxboardService,n.selector=e||n.removeWidgetButtonSelector,n.setName("removeButton");e=n.getDom();return e&&e.addEventListener("click",function(e){n.removeWidget(e,t)},!1),n}},{"../../Services/TuxboardService":20,"../../core/common":36,"./WidgetToolbarButton":27}],26:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WidgetToolBar=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./WidgetCollapseButton"),s=e("./WidgetRemoveButton");n.WidgetToolBar=(i(a,[{key:"getDom",value:function(){return this.widgetPlacement.getDom().querySelector(this.widgetToolbarSelector)}},{key:"getWidgetPlacement",value:function(){return this.widgetPlacement}},{key:"addButton",value:function(e){this.buttonList.push(e)}},{key:"removeButton",value:function(e){var t=e.getName(),e=this.buttonList.findIndex(function(e){return e.getName()===t});-1<e&&this.buttonList.splice(e,1)}},{key:"setupWidgetDropdown",value:function(){var t=this,e=this.widgetPlacement.getDom().querySelector(this.dropdownSettingsOption);e&&e.addEventListener("click",function(e){t.widgetPlacement.showWidgetSettings()},!1);e=this.widgetPlacement.getDom().querySelector(this.dropdownRefreshOption);e&&e.addEventListener("click",function(e){e.preventDefault(),t.widgetPlacement.update()},!1)}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.widgetPlacement=e,this.widgetToolbarSelector=".card-tools",this.widgetToolDropdownSelector=".dropdown-card-tool",this.dropdownRefreshOption=".refresh-option",this.dropdownSettingsOption=".settings-option",this.buttonList=new Array,this.widgetToolbarSelector=t||this.widgetToolbarSelector,this.addButton(new r.WidgetCollapseButton(this)),this.addButton(new s.WidgetRemoveButton(this)),this.setupWidgetDropdown()}},{"./WidgetCollapseButton":24,"./WidgetRemoveButton":25}],27:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.WidgetToolbarButton=(i(r,[{key:"getDom",value:function(){return this.parent.getDom().querySelector(this.selector)}},{key:"setName",value:function(e){this.name=e}},{key:"getName",value:function(){return name}},{key:"getSelector",value:function(){return this.selector}}]),r);function r(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.parent=e,this.selector=t}},{}],28:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.BaseDialog=(i(r,[{key:"getDom",value:function(){return document.querySelector(this.selector)}},{key:"getOverlay",value:function(){return this.getDom().querySelector(this.generalOverlaySelector)}},{key:"showOverlay",value:function(){var e=this.getOverlay();e&&e.hasAttribute("hidden")&&e.removeAttribute("hidden")}},{key:"hideOverlay",value:function(){var e=this.getOverlay();e&&!e.hasAttribute("hidden")&&e.setAttribute("hidden","")}}]),r);function r(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.selector=e,this.dialogBodySelector=".modal-body",this.generalOverlaySelector=".overlay",this.loadingSelector=".loading-status",this.dialogOverlaySelector=this.generalOverlaySelector+this.loadingSelector}},{}],29:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.BaseService=(i(r,[{key:"validateResponse",value:function(e){if(e.ok)return e;e=e.status+" - "+e.statusText;throw Error(e)}},{key:"readResponseAsJson",value:function(e){return e.json()}},{key:"readResponseAsText",value:function(e){return e.text()}},{key:"logError",value:function(e){}}]),r);function r(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.debug=e}},{}],30:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Column=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./common"),s=e("../Widget/WidgetCollection");n.Column=(i(a,[{key:"getDom",value:function(){return this.parent}},{key:"getAttributeName",value:function(){return r.dataId}},{key:"getIndex",value:function(){return this.index}},{key:"setIndex",value:function(e){this.index=e}},{key:"setLayoutRowId",value:function(e){this.layoutRowId=e}},{key:"getSelector",value:function(){return this.selector}},{key:"getColumnSelector",value:function(){return this.selector+":nth-child("+(this.index+1)+")"}},{key:"getWidgetCollection",value:function(){return this.widgets||(this.widgets=new s.WidgetCollection(this.parent,this.index,this.layoutRowId)),this.widgets}},{key:"getPlacement",value:function(n){return this.getWidgetCollection().getWidgets().find(function(e,t){return e.getPlacementId()===n}).getDom()}},{key:"getColumnByPlacement",value:function(e){e=this.getPlacement(e);return(0,r.getClosestByClass)(e,(0,r.noPeriod)(this.columnSelector))}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.parent=e,this.selector=t,this.columnSelector=".column",this.columnSelector=t||this.columnSelector}},{"../Widget/WidgetCollection":21,"./common":36}],31:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ColumnCollection=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./Column");n.ColumnCollection=(i(s,[{key:"fromLayoutRow",value:function(){var n=this;return Array.from(this.parent.querySelectorAll(this.columnSelector)).map(function(e,t){return n.createColumn(e,t)})}},{key:"createColumn",value:function(e,t){e=new r.Column(e);return e.setIndex(t),e.setLayoutRowId(this.layoutRowId),e}},{key:"getWidgets",value:function(){return this.fromLayoutRow().map(function(e,t){return e.getWidgetCollection()})}}]),s);function s(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.parent=e,this.layoutRowId=t,this.columnSelector=".column",this.columnSelector=n||this.columnSelector}},{"./Column":30}],32:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Layout=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./LayoutRowCollection");function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Layout=(i(a,[{key:"getDom",value:function(){return this.parent.querySelectorAll(this.layoutRowSelector)}},{key:"fromTab",value:function(e){return e.getDom().querySelectorAll(this.layoutRowSelector)}},{key:"getLayoutRows",value:function(){if(this.layoutRows||(this.layoutRows=new r.LayoutRowCollection(this.parent)),this.layoutRows)return this.layoutRows.getLayoutRows();throw new Error("No layout rows were found.")}},{key:"getFirstLayoutRow",value:function(){return this.layoutRows?this.layoutRows.getLayoutRows()[0]:null}},{key:"getColumns",value:function(){var n=[];return this.getLayoutRows().map(function(e,t){e=e.getColumns();n.push.apply(n,s(e))}),n}},{key:"getWidgetPlacements",value:function(){var n=[];return this.getLayoutRows().map(function(e,t){e.getColumns().map(function(e,t){e=e.getWidgetCollection().getWidgets();n.push.apply(n,s(e))})}),n}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.parent=e,this.layoutRowSelector=".layout-row",this.layoutRowSelector=t||this.layoutRowSelector}},{"./LayoutRowCollection":34}],33:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.LayoutRow=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./ColumnCollection"),s=e("./common");n.LayoutRow=(i(a,[{key:"getColumns",value:function(){return this.columns||(this.columns=new r.ColumnCollection(this.getDom(),this.id)),this.columns.fromLayoutRow()}},{key:"getWidgets",value:function(){return this.getColumns().map(function(e,t){return e.getWidgetCollection()})}},{key:"getDom",value:function(){return this.parent.querySelector(this.getSelector())}},{key:"getAttributeName",value:function(){return s.dataId}},{key:"setId",value:function(e){this.id=e}},{key:"setIndex",value:function(e){this.index=e}},{key:"getSelector",value:function(){return this.layoutRowSelector+"["+this.getAttributeName()+"='"+this.id+"']"}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.parent=e,this.layoutRowSelector=".layout-row",this.layoutRowSelector=t||this.layoutRowSelector}},{"./ColumnCollection":31,"./common":36}],34:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.LayoutRowCollection=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./LayoutRow");n.LayoutRowCollection=(i(s,[{key:"fromLayout",value:function(){var n=this;if(this.layoutRowSelector&&this.parent){var e=Array.from(this.parent.querySelectorAll(this.layoutRowSelector));if(e)return e.map(function(e,t){return n.createLayoutRow(e,t)})}throw new Error("No layout rows were found.")}},{key:"createLayoutRow",value:function(e,t){var n=new r.LayoutRow(this.parent),e=e.getAttribute(n.getAttributeName());return n.setId(e),n.setIndex(t),n}},{key:"getLayoutRows",value:function(){return this.fromLayout()}}]),s);function s(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.parent=e,this.layoutRowSelector=".layout-row",this.layoutRowSelector=t||this.layoutRowSelector}},{"./LayoutRow":33}],35:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Tab=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./common"),s=e("./Layout");n.Tab=(i(a,[{key:"getDom",value:function(){return this.parent.querySelector(this.tabSelector)}},{key:"getLayout",value:function(){return this.layout||(this.layout=new s.Layout(this.getDom())),this.layout}},{key:"getCurrentTab",value:function(){return document.querySelector(this.tabSelector+"[data-active='true']")}},{key:"getCurrentTabId",value:function(){return this.getCurrentTab().getAttribute(r.dataId)}}]),a);function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.parent=e,this.tabSelector=".dashboard-tab",this.tabSelector=t||this.tabSelector}},{"./Layout":32,"./common":36}],36:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.collapsedToggleSelector=n.isStaticAttribute=n.dataId=void 0,n.getDataId=l,n.getDomWidget=i,n.getPlacementId=l,n.noPeriod=c,n.disableElement=function(e){e.classList.add("disabled"),e.setAttribute("disabled","disabled")},n.enableElement=function(e){e.classList.remove("disabled"),e.removeAttribute("disabled")},n.clearNodes=function(e){for(;e.firstChild;)e.firstChild.remove()},n.isWidget=function(e,t){return"div"===e.tagName.toLowerCase()&&e.classList.contains(c(t))&&""!==l(e)},n.getClosestByClass=u,n.getWidgetSnapshot=function(e){return Array.from(document.querySelectorAll(".card")).map(function(e){var t=l(e),n=u(e,c(".layout-row")),i=h(0,t),o=d(0,t),e="true"===e.getAttribute(a);return new r.PlacementItem(t,i,n.getAttribute(s),o,e)})},n.getColumnByPlacement=o,n.getColumnIndexByDragInfo=d,n.getWidgetIndex=h,n.isBefore=function(e,t){if(t.parentNode===e.parentNode){var n=void 0;for(n=e.previousSibling;n;n=n.previousSibling)if(n===t)return!0}return!1},n.createFromHtml=function(e){var t=document.createElement("div");return t.innerHTML=e.trim(),Array.from(t.children)},n.isLayoutListItem=function(e){return e&&"li"===e.tagName.toLowerCase()&&e.classList.contains("layout-item")};var r=e("../Models/PlacementItem"),s=n.dataId="data-id",a=n.isStaticAttribute="data-static";n.collapsedToggleSelector="collapsed";function l(e){return e.getAttribute(s)}function i(e){return document.querySelector("["+s+"='"+e+"']")}function c(e){return e.startsWith(".")?e.replace(".",""):e}function u(e,t){for(;e;){if(e.classList.contains(t))return e;e=e.parentElement}}function o(e,t){return u(i(t),c(".column"))}function d(e,t){var n=o(0,t);return Array.from(n.parentElement.querySelectorAll(".column")).findIndex(function(e){return null!=e.querySelector("["+s+"='"+t+"']")})}function h(e,n){var t=o(0,n).querySelectorAll(".card");return Array.from(t).findIndex(function(e,t){return e.getAttribute(s)===n})}},{"../Models/PlacementItem":17}],37:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Tuxboard=void 0;var i=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=e("./core/common"),s=e("./Models/DragWidgetInfo"),a=e("./core/Tab"),l=e("./Extras/Tuxbar/Tuxbar"),c=e("./Services/TuxboardService");var u=function(e,s,a,l){return new(a=a||Promise)(function(n,t){function i(e){try{r(l.next(e))}catch(e){t(e)}}function o(e){try{r(l.throw(e))}catch(e){t(e)}}function r(e){var t;e.done?n(e.value):((t=e.value)instanceof a?t:new a(function(e){e(t)})).then(i,o)}r((l=l.apply(e,s||[])).next())})},d=n.Tuxboard=(i(h,[{key:"getDom",value:function(){return document.querySelector(this.tuxboardSelector)}},{key:"getDashboardId",value:function(){return(0,r.getDataId)(this.getDom())}},{key:"initialize",value:function(){this.attachDragAndDropEvents()}},{key:"getTab",value:function(){return this.tab&&!(0<arguments.length&&void 0!==arguments[0]&&arguments[0])||(this.tab&&delete this.tab,this.tab=new a.Tab(this.getDom())),this.tab}},{key:"addWidget",value:function(n){var i=this;this.service.getWidgetTemplate(n).then(function(e){var t;!e||(t=i.getFirstColumn())&&(i.addWidgetToColumn(t,e),(t=i.getWidgetsByColumn(t).getWidgets().filter(function(e,t){return e.getPlacementId()===n}))&&i.updateWidgets(t))})}},{key:"refresh",value:function(){return u(this,void 0,void 0,regeneratorRuntime.mark(function e(){var n=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.service.refreshService().then(function(e){var t=n.getDom();t&&((0,r.clearNodes)(t),(0,r.createFromHtml)(e).forEach(function(e){return t.insertAdjacentElement("beforeend",e)}))}).catch(function(e){return console.log(e)});case 2:this.initialize(),this.updateAllWidgets();case 4:case"end":return e.stop()}},e,this)}))}},{key:"updateAllWidgets",value:function(){var e=this.getWidgetsByTab(this.getTab(!0));this.updateWidgets(e)}},{key:"updateWidgets",value:function(e){Array.from(e).map(function(e){e.update()})}},{key:"getWidgetsByTab",value:function(e){return e.getLayout().getWidgetPlacements()}},{key:"getLayoutByTab",value:function(e){return e.getLayout()}},{key:"getLayoutRowsByLayout",value:function(e){return e.getLayoutRows()}},{key:"getColumnsByLayoutRow",value:function(e){return e.getColumns()}},{key:"getWidgetsByColumn",value:function(e){return e.getWidgetCollection()}},{key:"hasWidgets",value:function(e){return 0<this.getWidgetsByTab(e).length}},{key:"addWidgetToColumn",value:function(e,t){e&&e.getDom().insertAdjacentHTML("beforeend",t)}},{key:"getFirstColumn",value:function(){var e=this.getLayoutByTab(this.getTab()),e=this.getColumnsByLayoutRow(e.layoutRows[0]);return e&&0<e.length?e[0]:null}},{key:"attachDragAndDropEvents",value:function(){var n=this,e=this.getTab().getLayout().getColumns(),t=!0,i=!1,o=void 0;try{for(var r,s=e[Symbol.iterator]();!(t=(r=s.next()).done);t=!0)!function(){var t=r.value;t.getDom().addEventListener("dragstart",function(e){n.dragStart(e,t,n)},!1),t.getDom().addEventListener("dragover",n.dragover,!1),t.getDom().addEventListener("dragenter",n.dragenter,!1),t.getDom().addEventListener("dragleave",n.dragLeave,!1),t.getDom().addEventListener("drop",function(e){n.drop(e,n)},!1),t.getDom().addEventListener("dragend",function(e){n.dragEnd(e,n)},!1)}()}catch(e){i=!0,o=e}finally{try{!t&&s.return&&s.return()}finally{if(i)throw o}}}},{key:"dragStart",value:function(e,t,n){e.stopPropagation&&e.stopPropagation(),e.dataTransfer.effectAllowed="move";var i=e.target;n.dragInfo=new s.DragWidgetInfo(i.getAttribute(r.dataId),t.getIndex(),t.layoutRowId,t.getIndex(),t.layoutRowId),e.dataTransfer.setData("text",JSON.stringify(n.dragInfo))}},{key:"dragover",value:function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.dataTransfer.dropEffect="move";e=e.target;return(0,r.isWidget)(e,".card")}},{key:"dragenter",value:function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();e=e.target;e&&e.classList.add("over")}},{key:"dragLeave",value:function(e){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();e=e.target;e&&e.classList.remove("over")}},{key:"drop",value:function(e,t){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation();var n=e.target;t.dragInfo=JSON.parse(e.dataTransfer.getData("text"));e=document.querySelector("["+r.dataId+"='"+t.dragInfo.placementId+"'");(0,r.isWidget)(n,".card")?n.insertBefore(e,n):n.classList.contains((0,r.noPeriod)(".column"))&&((t=(0,r.getClosestByClass)(n,(0,r.noPeriod)(".card")))?n.insertBefore(e,t):n.append(e))}},{key:"dragEnd",value:function(e,t){e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),document.querySelectorAll(".column").forEach(function(e){return e.classList.remove("over")});var n=t.dragInfo.placementId;t.dragInfo.placementList=(0,r.getWidgetSnapshot)(t.dragInfo);var i=t.dragInfo.placementList.filter(function(e){return e.PlacementId===n});i&&0<i.length&&(t.dragInfo.currentLayoutRowId=i[0].LayoutRowId,t.dragInfo.currentColumnIndex=i[0].ColumnIndex),this.service.saveWidgetPlacementService(e,t.dragInfo).then(function(e){return console.log("Saved. Message: "+e)}),e.dataTransfer.clearData()}}]),h);function h(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),this.service=new c.TuxboardService,this.tuxboardSelector=".dashboard",this.tuxboardSelector=e||this.tuxboardSelector,this.initialize(),this.updateAllWidgets()}window.addEventListener("DOMContentLoaded",function(){var e=new d;new l.Tuxbar(e)})},{"./Extras/Tuxbar/Tuxbar":13,"./Models/DragWidgetInfo":16,"./Services/TuxboardService":20,"./core/Tab":35,"./core/common":36}]},{},[37]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

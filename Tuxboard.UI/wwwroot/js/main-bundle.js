/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./wwwroot/src/Tuxboard.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js":
/*!***********************************************************!*\
  !*** ./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n  * Bootstrap v5.0.0-alpha1 (https://getbootstrap.com/)\n  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var MAX_UID = 1000000;\n  var MILLISECONDS_MULTIPLIER = 1000;\n  var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  var toType = function toType(obj) {\n    if (obj === null || obj === undefined) {\n      return \"\" + obj;\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  var getUID = function getUID(prefix) {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  var getSelector = function getSelector(element) {\n    var selector = element.getAttribute('data-target');\n\n    if (!selector || selector === '#') {\n      var hrefAttr = element.getAttribute('href');\n      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n    }\n\n    return selector;\n  };\n\n  var getSelectorFromElement = function getSelectorFromElement(element) {\n    var selector = getSelector(element);\n\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n\n    return null;\n  };\n\n  var getElementFromSelector = function getElementFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n\n  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    var _window$getComputedSt = window.getComputedStyle(element),\n        transitionDuration = _window$getComputedSt.transitionDuration,\n        transitionDelay = _window$getComputedSt.transitionDelay;\n\n    var floatTransitionDuration = parseFloat(transitionDuration);\n    var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  var triggerTransitionEnd = function triggerTransitionEnd(element) {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  var isElement = function isElement(obj) {\n    return (obj[0] || obj).nodeType;\n  };\n\n  var emulateTransitionEnd = function emulateTransitionEnd(element, duration) {\n    var called = false;\n    var durationPadding = 5;\n    var emulatedDuration = duration + durationPadding;\n\n    function listener() {\n      called = true;\n      element.removeEventListener(TRANSITION_END, listener);\n    }\n\n    element.addEventListener(TRANSITION_END, listener);\n    setTimeout(function () {\n      if (!called) {\n        triggerTransitionEnd(element);\n      }\n    }, emulatedDuration);\n  };\n\n  var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {\n    Object.keys(configTypes).forEach(function (property) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && isElement(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new Error(componentName.toUpperCase() + \": \" + (\"Option \\\"\" + property + \"\\\" provided type \\\"\" + valueType + \"\\\" \") + (\"but expected type \\\"\" + expectedTypes + \"\\\".\"));\n      }\n    });\n  };\n\n  var isVisible = function isVisible(element) {\n    if (!element) {\n      return false;\n    }\n\n    if (element.style && element.parentNode && element.parentNode.style) {\n      var elementStyle = getComputedStyle(element);\n      var parentNodeStyle = getComputedStyle(element.parentNode);\n      return elementStyle.display !== 'none' && parentNodeStyle.display !== 'none' && elementStyle.visibility !== 'hidden';\n    }\n\n    return false;\n  };\n\n  var findShadowRoot = function findShadowRoot(element) {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n\n    if (typeof element.getRootNode === 'function') {\n      var root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n\n    if (!element.parentNode) {\n      return null;\n    }\n\n    return findShadowRoot(element.parentNode);\n  };\n\n  var noop = function noop() {\n    return function () {};\n  };\n\n  var reflow = function reflow(element) {\n    return element.offsetHeight;\n  };\n\n  var getjQuery = function getjQuery() {\n    var _window = window,\n        jQuery = _window.jQuery;\n\n    if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  var mapData = function () {\n    var storeData = {};\n    var id = 1;\n    return {\n      set: function set(element, key, data) {\n        if (typeof element.key === 'undefined') {\n          element.key = {\n            key: key,\n            id: id\n          };\n          id++;\n        }\n\n        storeData[element.key.id] = data;\n      },\n      get: function get(element, key) {\n        if (!element || typeof element.key === 'undefined') {\n          return null;\n        }\n\n        var keyProperties = element.key;\n\n        if (keyProperties.key === key) {\n          return storeData[keyProperties.id];\n        }\n\n        return null;\n      },\n      delete: function _delete(element, key) {\n        if (typeof element.key === 'undefined') {\n          return;\n        }\n\n        var keyProperties = element.key;\n\n        if (keyProperties.key === key) {\n          delete storeData[keyProperties.id];\n          delete element.key;\n        }\n      }\n    };\n  }();\n\n  var Data = {\n    setData: function setData(instance, key, data) {\n      mapData.set(instance, key, data);\n    },\n    getData: function getData(instance, key) {\n      return mapData.get(instance, key);\n    },\n    removeData: function removeData(instance, key) {\n      mapData.delete(instance, key);\n    }\n  };\n\n  /* istanbul ignore file */\n  var find = Element.prototype.querySelectorAll;\n  var findOne = Element.prototype.querySelector; // MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\n\n  var defaultPreventedPreservedOnDispatch = function () {\n    var e = new CustomEvent('Bootstrap', {\n      cancelable: true\n    });\n    var element = document.createElement('div');\n    element.addEventListener('Bootstrap', function () {\n      return null;\n    });\n    e.preventDefault();\n    element.dispatchEvent(e);\n    return e.defaultPrevented;\n  }();\n\n  var scopeSelectorRegex = /:scope\\b/;\n\n  var supportScopeQuery = function () {\n    var element = document.createElement('div');\n\n    try {\n      element.querySelectorAll(':scope *');\n    } catch (_) {\n      return false;\n    }\n\n    return true;\n  }();\n\n  if (!supportScopeQuery) {\n    find = function find(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelectorAll(selector);\n      }\n\n      var hasId = Boolean(this.id);\n\n      if (!hasId) {\n        this.id = getUID('scope');\n      }\n\n      var nodeList = null;\n\n      try {\n        selector = selector.replace(scopeSelectorRegex, \"#\" + this.id);\n        nodeList = this.querySelectorAll(selector);\n      } finally {\n        if (!hasId) {\n          this.removeAttribute('id');\n        }\n      }\n\n      return nodeList;\n    };\n\n    findOne = function findOne(selector) {\n      if (!scopeSelectorRegex.test(selector)) {\n        return this.querySelector(selector);\n      }\n\n      var matches = find.call(this, selector);\n\n      if (typeof matches[0] !== 'undefined') {\n        return matches[0];\n      }\n\n      return null;\n    };\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var $ = getjQuery();\n  var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  var stripNameRegex = /\\..*/;\n  var stripUidRegex = /::\\d+$/;\n  var eventRegistry = {}; // Events storage\n\n  var uidEvent = 1;\n  var customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  var nativeEvents = ['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll'];\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && uid + \"::\" + uidEvent++ || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    var uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      var domElements = element.querySelectorAll(selector);\n\n      for (var target = event.target; target && target !== this; target = target.parentNode) {\n        for (var i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler, delegationSelector) {\n    if (delegationSelector === void 0) {\n      delegationSelector = null;\n    }\n\n    var uidEventList = Object.keys(events);\n\n    for (var i = 0, len = uidEventList.length; i < len; i++) {\n      var event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    var delegation = typeof handler === 'string';\n    var originalHandler = delegation ? delegationFn : handler; // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n\n    var typeEvent = originalTypeEvent.replace(stripNameRegex, '');\n    var custom = customEvents[typeEvent];\n\n    if (custom) {\n      typeEvent = custom;\n    }\n\n    var isNative = nativeEvents.indexOf(typeEvent) > -1;\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    }\n\n    var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),\n        delegation = _normalizeParams[0],\n        originalHandler = _normalizeParams[1],\n        typeEvent = _normalizeParams[2];\n\n    var events = getEvent(element);\n    var handlers = events[typeEvent] || (events[typeEvent] = {});\n    var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    var fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    var storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(function (handlerKey) {\n      if (handlerKey.indexOf(namespace) > -1) {\n        var event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  var EventHandler = {\n    on: function on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n    one: function one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n    off: function off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      var _normalizeParams2 = normalizeParams(originalTypeEvent, handler, delegationFn),\n          delegation = _normalizeParams2[0],\n          originalHandler = _normalizeParams2[1],\n          typeEvent = _normalizeParams2[2];\n\n      var inNamespace = typeEvent !== originalTypeEvent;\n      var events = getEvent(element);\n      var isNamespace = originalTypeEvent.charAt(0) === '.';\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(function (elementEvent) {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      var storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(function (keyHandlers) {\n        var handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.indexOf(handlerKey) > -1) {\n          var event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n    trigger: function trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      var typeEvent = event.replace(stripNameRegex, '');\n      var inNamespace = event !== typeEvent;\n      var isNative = nativeEvents.indexOf(typeEvent) > -1;\n      var jQueryEvent;\n      var bubbles = true;\n      var nativeDispatch = true;\n      var defaultPrevented = false;\n      var evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles: bubbles,\n          cancelable: true\n        });\n      } // merge custom informations in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(function (key) {\n          Object.defineProperty(evt, key, {\n            get: function get() {\n              return args[key];\n            }\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n\n        if (!defaultPreventedPreservedOnDispatch) {\n          Object.defineProperty(evt, 'defaultPrevented', {\n            get: function get() {\n              return true;\n            }\n          });\n        }\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'alert';\n  var VERSION = '5.0.0-alpha1';\n  var DATA_KEY = 'bs.alert';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var DATA_API_KEY = '.data-api';\n  var SELECTOR_DISMISS = '[data-dismiss=\"alert\"]';\n  var EVENT_CLOSE = \"close\" + EVENT_KEY;\n  var EVENT_CLOSED = \"closed\" + EVENT_KEY;\n  var EVENT_CLICK_DATA_API = \"click\" + EVENT_KEY + DATA_API_KEY;\n  var CLASSNAME_ALERT = 'alert';\n  var CLASSNAME_FADE = 'fade';\n  var CLASSNAME_SHOW = 'show';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Alert = /*#__PURE__*/function () {\n    function Alert(element) {\n      this._element = element;\n\n      if (this._element) {\n        Data.setData(element, DATA_KEY, this);\n      }\n    } // Getters\n\n\n    var _proto = Alert.prototype;\n\n    // Public\n    _proto.close = function close(element) {\n      var rootElement = this._element;\n\n      if (element) {\n        rootElement = this._getRootElement(element);\n      }\n\n      var customEvent = this._triggerCloseEvent(rootElement);\n\n      if (customEvent === null || customEvent.defaultPrevented) {\n        return;\n      }\n\n      this._removeElement(rootElement);\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._getRootElement = function _getRootElement(element) {\n      return getElementFromSelector(element) || element.closest(\".\" + CLASSNAME_ALERT);\n    };\n\n    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {\n      return EventHandler.trigger(element, EVENT_CLOSE);\n    };\n\n    _proto._removeElement = function _removeElement(element) {\n      var _this = this;\n\n      element.classList.remove(CLASSNAME_SHOW);\n\n      if (!element.classList.contains(CLASSNAME_FADE)) {\n        this._destroyElement(element);\n\n        return;\n      }\n\n      var transitionDuration = getTransitionDurationFromElement(element);\n      EventHandler.one(element, TRANSITION_END, function () {\n        return _this._destroyElement(element);\n      });\n      emulateTransitionEnd(element, transitionDuration);\n    };\n\n    _proto._destroyElement = function _destroyElement(element) {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n\n      EventHandler.trigger(element, EVENT_CLOSED);\n    } // Static\n    ;\n\n    Alert.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY);\n\n        if (!data) {\n          data = new Alert(this);\n        }\n\n        if (config === 'close') {\n          data[config](this);\n        }\n      });\n    };\n\n    Alert.handleDismiss = function handleDismiss(alertInstance) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        alertInstance.close(this);\n      };\n    };\n\n    Alert.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY);\n    };\n\n    _createClass(Alert, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }]);\n\n    return Alert;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert.handleDismiss(new Alert()));\n  var $$1 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .alert to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$1) {\n    var JQUERY_NO_CONFLICT = $$1.fn[NAME];\n    $$1.fn[NAME] = Alert.jQueryInterface;\n    $$1.fn[NAME].Constructor = Alert;\n\n    $$1.fn[NAME].noConflict = function () {\n      $$1.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Alert.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$1 = 'button';\n  var VERSION$1 = '5.0.0-alpha1';\n  var DATA_KEY$1 = 'bs.button';\n  var EVENT_KEY$1 = \".\" + DATA_KEY$1;\n  var DATA_API_KEY$1 = '.data-api';\n  var CLASS_NAME_ACTIVE = 'active';\n  var SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]';\n  var EVENT_CLICK_DATA_API$1 = \"click\" + EVENT_KEY$1 + DATA_API_KEY$1;\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Button = /*#__PURE__*/function () {\n    function Button(element) {\n      this._element = element;\n      Data.setData(element, DATA_KEY$1, this);\n    } // Getters\n\n\n    var _proto = Button.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE));\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$1);\n      this._element = null;\n    } // Static\n    ;\n\n    Button.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$1);\n\n        if (!data) {\n          data = new Button(this);\n        }\n\n        if (config === 'toggle') {\n          data[config]();\n        }\n      });\n    };\n\n    Button.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$1);\n    };\n\n    _createClass(Button, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$1;\n      }\n    }]);\n\n    return Button;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE, function (event) {\n    event.preventDefault();\n    var button = event.target.closest(SELECTOR_DATA_TOGGLE);\n    var data = Data.getData(button, DATA_KEY$1);\n\n    if (!data) {\n      data = new Button(button);\n    }\n\n    data.toggle();\n  });\n  var $$2 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .button to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$2) {\n    var JQUERY_NO_CONFLICT$1 = $$2.fn[NAME$1];\n    $$2.fn[NAME$1] = Button.jQueryInterface;\n    $$2.fn[NAME$1].Constructor = Button;\n\n    $$2.fn[NAME$1].noConflict = function () {\n      $$2.fn[NAME$1] = JQUERY_NO_CONFLICT$1;\n      return Button.jQueryInterface;\n    };\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, function (chr) {\n      return \"-\" + chr.toLowerCase();\n    });\n  }\n\n  var Manipulator = {\n    setDataAttribute: function setDataAttribute(element, key, value) {\n      element.setAttribute(\"data-\" + normalizeDataKey(key), value);\n    },\n    removeDataAttribute: function removeDataAttribute(element, key) {\n      element.removeAttribute(\"data-\" + normalizeDataKey(key));\n    },\n    getDataAttributes: function getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      var attributes = _objectSpread2({}, element.dataset);\n\n      Object.keys(attributes).forEach(function (key) {\n        attributes[key] = normalizeData(attributes[key]);\n      });\n      return attributes;\n    },\n    getDataAttribute: function getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(\"data-\" + normalizeDataKey(key)));\n    },\n    offset: function offset(element) {\n      var rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + document.body.scrollTop,\n        left: rect.left + document.body.scrollLeft\n      };\n    },\n    position: function position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    },\n    toggleClass: function toggleClass(element, className) {\n      if (!element) {\n        return;\n      }\n\n      if (element.classList.contains(className)) {\n        element.classList.remove(className);\n      } else {\n        element.classList.add(className);\n      }\n    }\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NODE_TEXT = 3;\n  var SelectorEngine = {\n    matches: function matches(element, selector) {\n      return element.matches(selector);\n    },\n    find: function find$1(selector, element) {\n      var _ref;\n\n      if (element === void 0) {\n        element = document.documentElement;\n      }\n\n      return (_ref = []).concat.apply(_ref, find.call(element, selector));\n    },\n    findOne: function findOne$1(selector, element) {\n      if (element === void 0) {\n        element = document.documentElement;\n      }\n\n      return findOne.call(element, selector);\n    },\n    children: function children(element, selector) {\n      var _ref2;\n\n      var children = (_ref2 = []).concat.apply(_ref2, element.children);\n\n      return children.filter(function (child) {\n        return child.matches(selector);\n      });\n    },\n    parents: function parents(element, selector) {\n      var parents = [];\n      var ancestor = element.parentNode;\n\n      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n        if (this.matches(ancestor, selector)) {\n          parents.push(ancestor);\n        }\n\n        ancestor = ancestor.parentNode;\n      }\n\n      return parents;\n    },\n    prev: function prev(element, selector) {\n      var previous = element.previousElementSibling;\n\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n\n        previous = previous.previousElementSibling;\n      }\n\n      return [];\n    },\n    next: function next(element, selector) {\n      var next = element.nextElementSibling;\n\n      while (next) {\n        if (this.matches(next, selector)) {\n          return [next];\n        }\n\n        next = next.nextElementSibling;\n      }\n\n      return [];\n    }\n  };\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$2 = 'carousel';\n  var VERSION$2 = '5.0.0-alpha1';\n  var DATA_KEY$2 = 'bs.carousel';\n  var EVENT_KEY$2 = \".\" + DATA_KEY$2;\n  var DATA_API_KEY$2 = '.data-api';\n  var ARROW_LEFT_KEY = 'ArrowLeft';\n  var ARROW_RIGHT_KEY = 'ArrowRight';\n  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  var SWIPE_THRESHOLD = 40;\n  var Default = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  var DefaultType = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  var DIRECTION_NEXT = 'next';\n  var DIRECTION_PREV = 'prev';\n  var DIRECTION_LEFT = 'left';\n  var DIRECTION_RIGHT = 'right';\n  var EVENT_SLIDE = \"slide\" + EVENT_KEY$2;\n  var EVENT_SLID = \"slid\" + EVENT_KEY$2;\n  var EVENT_KEYDOWN = \"keydown\" + EVENT_KEY$2;\n  var EVENT_MOUSEENTER = \"mouseenter\" + EVENT_KEY$2;\n  var EVENT_MOUSELEAVE = \"mouseleave\" + EVENT_KEY$2;\n  var EVENT_TOUCHSTART = \"touchstart\" + EVENT_KEY$2;\n  var EVENT_TOUCHMOVE = \"touchmove\" + EVENT_KEY$2;\n  var EVENT_TOUCHEND = \"touchend\" + EVENT_KEY$2;\n  var EVENT_POINTERDOWN = \"pointerdown\" + EVENT_KEY$2;\n  var EVENT_POINTERUP = \"pointerup\" + EVENT_KEY$2;\n  var EVENT_DRAG_START = \"dragstart\" + EVENT_KEY$2;\n  var EVENT_LOAD_DATA_API = \"load\" + EVENT_KEY$2 + DATA_API_KEY$2;\n  var EVENT_CLICK_DATA_API$2 = \"click\" + EVENT_KEY$2 + DATA_API_KEY$2;\n  var CLASS_NAME_CAROUSEL = 'carousel';\n  var CLASS_NAME_ACTIVE$1 = 'active';\n  var CLASS_NAME_SLIDE = 'slide';\n  var CLASS_NAME_RIGHT = 'carousel-item-right';\n  var CLASS_NAME_LEFT = 'carousel-item-left';\n  var CLASS_NAME_NEXT = 'carousel-item-next';\n  var CLASS_NAME_PREV = 'carousel-item-prev';\n  var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  var SELECTOR_ACTIVE = '.active';\n  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  var SELECTOR_ITEM = '.carousel-item';\n  var SELECTOR_ITEM_IMG = '.carousel-item img';\n  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  var SELECTOR_INDICATORS = '.carousel-indicators';\n  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';\n  var SELECTOR_DATA_RIDE = '[data-ride=\"carousel\"]';\n  var PointerType = {\n    TOUCH: 'touch',\n    PEN: 'pen'\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Carousel = /*#__PURE__*/function () {\n    function Carousel(element, config) {\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n      this._isPaused = false;\n      this._isSliding = false;\n      this.touchTimeout = null;\n      this.touchStartX = 0;\n      this.touchDeltaX = 0;\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      this._pointerEvent = Boolean(window.PointerEvent);\n\n      this._addEventListeners();\n\n      Data.setData(element, DATA_KEY$2, this);\n    } // Getters\n\n\n    var _proto = Carousel.prototype;\n\n    // Public\n    _proto.next = function next() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_NEXT);\n      }\n    };\n\n    _proto.nextWhenVisible = function nextWhenVisible() {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && isVisible(this._element)) {\n        this.next();\n      }\n    };\n\n    _proto.prev = function prev() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_PREV);\n      }\n    };\n\n    _proto.pause = function pause(event) {\n      if (!event) {\n        this._isPaused = true;\n      }\n\n      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n        triggerTransitionEnd(this._element);\n        this.cycle(true);\n      }\n\n      clearInterval(this._interval);\n      this._interval = null;\n    };\n\n    _proto.cycle = function cycle(event) {\n      if (!event) {\n        this._isPaused = false;\n      }\n\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n\n      if (this._config && this._config.interval && !this._isPaused) {\n        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n      }\n    };\n\n    _proto.to = function to(index) {\n      var _this = this;\n\n      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      var activeIndex = this._getItemIndex(this._activeElement);\n\n      if (index > this._items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this._isSliding) {\n        EventHandler.one(this._element, EVENT_SLID, function () {\n          return _this.to(index);\n        });\n        return;\n      }\n\n      if (activeIndex === index) {\n        this.pause();\n        this.cycle();\n        return;\n      }\n\n      var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;\n\n      this._slide(direction, this._items[index]);\n    };\n\n    _proto.dispose = function dispose() {\n      EventHandler.off(this._element, EVENT_KEY$2);\n      Data.removeData(this._element, DATA_KEY$2);\n      this._items = null;\n      this._config = null;\n      this._element = null;\n      this._interval = null;\n      this._isPaused = null;\n      this._isSliding = null;\n      this._activeElement = null;\n      this._indicatorsElement = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default), config);\n      typeCheckConfig(NAME$2, config, DefaultType);\n      return config;\n    };\n\n    _proto._handleSwipe = function _handleSwipe() {\n      var absDeltax = Math.abs(this.touchDeltaX);\n\n      if (absDeltax <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      var direction = absDeltax / this.touchDeltaX;\n      this.touchDeltaX = 0; // swipe left\n\n      if (direction > 0) {\n        this.prev();\n      } // swipe right\n\n\n      if (direction < 0) {\n        this.next();\n      }\n    };\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this2 = this;\n\n      if (this._config.keyboard) {\n        EventHandler.on(this._element, EVENT_KEYDOWN, function (event) {\n          return _this2._keydown(event);\n        });\n      }\n\n      if (this._config.pause === 'hover') {\n        EventHandler.on(this._element, EVENT_MOUSEENTER, function (event) {\n          return _this2.pause(event);\n        });\n        EventHandler.on(this._element, EVENT_MOUSELEAVE, function (event) {\n          return _this2.cycle(event);\n        });\n      }\n\n      if (this._config.touch && this._touchSupported) {\n        this._addTouchEventListeners();\n      }\n    };\n\n    _proto._addTouchEventListeners = function _addTouchEventListeners() {\n      var _this3 = this;\n\n      var start = function start(event) {\n        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {\n          _this3.touchStartX = event.clientX;\n        } else if (!_this3._pointerEvent) {\n          _this3.touchStartX = event.touches[0].clientX;\n        }\n      };\n\n      var move = function move(event) {\n        // ensure swiping with one touch and not pinching\n        if (event.touches && event.touches.length > 1) {\n          _this3.touchDeltaX = 0;\n        } else {\n          _this3.touchDeltaX = event.touches[0].clientX - _this3.touchStartX;\n        }\n      };\n\n      var end = function end(event) {\n        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {\n          _this3.touchDeltaX = event.clientX - _this3.touchStartX;\n        }\n\n        _this3._handleSwipe();\n\n        if (_this3._config.pause === 'hover') {\n          // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n          _this3.pause();\n\n          if (_this3.touchTimeout) {\n            clearTimeout(_this3.touchTimeout);\n          }\n\n          _this3.touchTimeout = setTimeout(function (event) {\n            return _this3.cycle(event);\n          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);\n        }\n      };\n\n      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {\n        EventHandler.on(itemImg, EVENT_DRAG_START, function (e) {\n          return e.preventDefault();\n        });\n      });\n\n      if (this._pointerEvent) {\n        EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {\n          return start(event);\n        });\n        EventHandler.on(this._element, EVENT_POINTERUP, function (event) {\n          return end(event);\n        });\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {\n          return start(event);\n        });\n        EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {\n          return move(event);\n        });\n        EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {\n          return end(event);\n        });\n      }\n    };\n\n    _proto._keydown = function _keydown(event) {\n      if (/input|textarea/i.test(event.target.tagName)) {\n        return;\n      }\n\n      switch (event.key) {\n        case ARROW_LEFT_KEY:\n          event.preventDefault();\n          this.prev();\n          break;\n\n        case ARROW_RIGHT_KEY:\n          event.preventDefault();\n          this.next();\n          break;\n      }\n    };\n\n    _proto._getItemIndex = function _getItemIndex(element) {\n      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n      return this._items.indexOf(element);\n    };\n\n    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {\n      var isNextDirection = direction === DIRECTION_NEXT;\n      var isPrevDirection = direction === DIRECTION_PREV;\n\n      var activeIndex = this._getItemIndex(activeElement);\n\n      var lastItemIndex = this._items.length - 1;\n      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n\n      if (isGoingToWrap && !this._config.wrap) {\n        return activeElement;\n      }\n\n      var delta = direction === DIRECTION_PREV ? -1 : 1;\n      var itemIndex = (activeIndex + delta) % this._items.length;\n      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n    };\n\n    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {\n      var targetIndex = this._getItemIndex(relatedTarget);\n\n      var fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n      return EventHandler.trigger(this._element, EVENT_SLIDE, {\n        relatedTarget: relatedTarget,\n        direction: eventDirectionName,\n        from: fromIndex,\n        to: targetIndex\n      });\n    };\n\n    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {\n      if (this._indicatorsElement) {\n        var indicators = SelectorEngine.find(SELECTOR_ACTIVE, this._indicatorsElement);\n\n        for (var i = 0; i < indicators.length; i++) {\n          indicators[i].classList.remove(CLASS_NAME_ACTIVE$1);\n        }\n\n        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n\n        if (nextIndicator) {\n          nextIndicator.classList.add(CLASS_NAME_ACTIVE$1);\n        }\n      }\n    };\n\n    _proto._slide = function _slide(direction, element) {\n      var _this4 = this;\n\n      var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      var activeElementIndex = this._getItemIndex(activeElement);\n\n      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n\n      var nextElementIndex = this._getItemIndex(nextElement);\n\n      var isCycling = Boolean(this._interval);\n      var directionalClassName;\n      var orderClassName;\n      var eventDirectionName;\n\n      if (direction === DIRECTION_NEXT) {\n        directionalClassName = CLASS_NAME_LEFT;\n        orderClassName = CLASS_NAME_NEXT;\n        eventDirectionName = DIRECTION_LEFT;\n      } else {\n        directionalClassName = CLASS_NAME_RIGHT;\n        orderClassName = CLASS_NAME_PREV;\n        eventDirectionName = DIRECTION_RIGHT;\n      }\n\n      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$1)) {\n        this._isSliding = false;\n        return;\n      }\n\n      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n      if (slideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (!activeElement || !nextElement) {\n        // Some weirdness is happening, so we bail\n        return;\n      }\n\n      this._isSliding = true;\n\n      if (isCycling) {\n        this.pause();\n      }\n\n      this._setActiveIndicatorElement(nextElement);\n\n      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n        nextElement.classList.add(orderClassName);\n        reflow(nextElement);\n        activeElement.classList.add(directionalClassName);\n        nextElement.classList.add(directionalClassName);\n        var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);\n\n        if (nextElementInterval) {\n          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n          this._config.interval = nextElementInterval;\n        } else {\n          this._config.interval = this._config.defaultInterval || this._config.interval;\n        }\n\n        var transitionDuration = getTransitionDurationFromElement(activeElement);\n        EventHandler.one(activeElement, TRANSITION_END, function () {\n          nextElement.classList.remove(directionalClassName, orderClassName);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$1);\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$1, orderClassName, directionalClassName);\n          _this4._isSliding = false;\n          setTimeout(function () {\n            EventHandler.trigger(_this4._element, EVENT_SLID, {\n              relatedTarget: nextElement,\n              direction: eventDirectionName,\n              from: activeElementIndex,\n              to: nextElementIndex\n            });\n          }, 0);\n        });\n        emulateTransitionEnd(activeElement, transitionDuration);\n      } else {\n        activeElement.classList.remove(CLASS_NAME_ACTIVE$1);\n        nextElement.classList.add(CLASS_NAME_ACTIVE$1);\n        this._isSliding = false;\n        EventHandler.trigger(this._element, EVENT_SLID, {\n          relatedTarget: nextElement,\n          direction: eventDirectionName,\n          from: activeElementIndex,\n          to: nextElementIndex\n        });\n      }\n\n      if (isCycling) {\n        this.cycle();\n      }\n    } // Static\n    ;\n\n    Carousel.carouselInterface = function carouselInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$2);\n\n      var _config = _objectSpread2(_objectSpread2({}, Default), Manipulator.getDataAttributes(element));\n\n      if (typeof config === 'object') {\n        _config = _objectSpread2(_objectSpread2({}, _config), config);\n      }\n\n      var action = typeof config === 'string' ? config : _config.slide;\n\n      if (!data) {\n        data = new Carousel(element, _config);\n      }\n\n      if (typeof config === 'number') {\n        data.to(config);\n      } else if (typeof action === 'string') {\n        if (typeof data[action] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + action + \"\\\"\");\n        }\n\n        data[action]();\n      } else if (_config.interval && _config.ride) {\n        data.pause();\n        data.cycle();\n      }\n    };\n\n    Carousel.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Carousel.carouselInterface(this, config);\n      });\n    };\n\n    Carousel.dataApiClickHandler = function dataApiClickHandler(event) {\n      var target = getElementFromSelector(this);\n\n      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n        return;\n      }\n\n      var config = _objectSpread2(_objectSpread2({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));\n\n      var slideIndex = this.getAttribute('data-slide-to');\n\n      if (slideIndex) {\n        config.interval = false;\n      }\n\n      Carousel.carouselInterface(target, config);\n\n      if (slideIndex) {\n        Data.getData(target, DATA_KEY$2).to(slideIndex);\n      }\n\n      event.preventDefault();\n    };\n\n    Carousel.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$2);\n    };\n\n    _createClass(Carousel, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$2;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Carousel;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\n  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {\n    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n    for (var i = 0, len = carousels.length; i < len; i++) {\n      Carousel.carouselInterface(carousels[i], Data.getData(carousels[i], DATA_KEY$2));\n    }\n  });\n  var $$3 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .carousel to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$3) {\n    var JQUERY_NO_CONFLICT$2 = $$3.fn[NAME$2];\n    $$3.fn[NAME$2] = Carousel.jQueryInterface;\n    $$3.fn[NAME$2].Constructor = Carousel;\n\n    $$3.fn[NAME$2].noConflict = function () {\n      $$3.fn[NAME$2] = JQUERY_NO_CONFLICT$2;\n      return Carousel.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$3 = 'collapse';\n  var VERSION$3 = '5.0.0-alpha1';\n  var DATA_KEY$3 = 'bs.collapse';\n  var EVENT_KEY$3 = \".\" + DATA_KEY$3;\n  var DATA_API_KEY$3 = '.data-api';\n  var Default$1 = {\n    toggle: true,\n    parent: ''\n  };\n  var DefaultType$1 = {\n    toggle: 'boolean',\n    parent: '(string|element)'\n  };\n  var EVENT_SHOW = \"show\" + EVENT_KEY$3;\n  var EVENT_SHOWN = \"shown\" + EVENT_KEY$3;\n  var EVENT_HIDE = \"hide\" + EVENT_KEY$3;\n  var EVENT_HIDDEN = \"hidden\" + EVENT_KEY$3;\n  var EVENT_CLICK_DATA_API$3 = \"click\" + EVENT_KEY$3 + DATA_API_KEY$3;\n  var CLASS_NAME_SHOW = 'show';\n  var CLASS_NAME_COLLAPSE = 'collapse';\n  var CLASS_NAME_COLLAPSING = 'collapsing';\n  var CLASS_NAME_COLLAPSED = 'collapsed';\n  var WIDTH = 'width';\n  var HEIGHT = 'height';\n  var SELECTOR_ACTIVES = '.show, .collapsing';\n  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle=\"collapse\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Collapse = /*#__PURE__*/function () {\n    function Collapse(element, config) {\n      this._isTransitioning = false;\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._triggerArray = SelectorEngine.find(SELECTOR_DATA_TOGGLE$1 + \"[href=\\\"#\" + element.id + \"\\\"],\" + (SELECTOR_DATA_TOGGLE$1 + \"[data-target=\\\"#\" + element.id + \"\\\"]\"));\n      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$1);\n\n      for (var i = 0, len = toggleList.length; i < len; i++) {\n        var elem = toggleList[i];\n        var selector = getSelectorFromElement(elem);\n        var filterElement = SelectorEngine.find(selector).filter(function (foundElem) {\n          return foundElem === element;\n        });\n\n        if (selector !== null && filterElement.length) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null;\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n\n      Data.setData(element, DATA_KEY$3, this);\n    } // Getters\n\n\n    var _proto = Collapse.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._isTransitioning || this._element.classList.contains(CLASS_NAME_SHOW)) {\n        return;\n      }\n\n      var actives;\n      var activesData;\n\n      if (this._parent) {\n        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._parent).filter(function (elem) {\n          if (typeof _this._config.parent === 'string') {\n            return elem.getAttribute('data-parent') === _this._config.parent;\n          }\n\n          return elem.classList.contains(CLASS_NAME_COLLAPSE);\n        });\n\n        if (actives.length === 0) {\n          actives = null;\n        }\n      }\n\n      var container = SelectorEngine.findOne(this._selector);\n\n      if (actives) {\n        var tempActiveData = actives.filter(function (elem) {\n          return container !== elem;\n        });\n        activesData = tempActiveData[0] ? Data.getData(tempActiveData[0], DATA_KEY$3) : null;\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      var startEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      if (actives) {\n        actives.forEach(function (elemActive) {\n          if (container !== elemActive) {\n            Collapse.collapseInterface(elemActive, 'hide');\n          }\n\n          if (!activesData) {\n            Data.setData(elemActive, DATA_KEY$3, null);\n          }\n        });\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.style[dimension] = 0;\n\n      if (this._triggerArray.length) {\n        this._triggerArray.forEach(function (element) {\n          element.classList.remove(CLASS_NAME_COLLAPSED);\n          element.setAttribute('aria-expanded', true);\n        });\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        _this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n        _this._element.style[dimension] = '';\n\n        _this.setTransitioning(false);\n\n        EventHandler.trigger(_this._element, EVENT_SHOWN);\n      };\n\n      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      var scrollSize = \"scroll\" + capitalizedDimension;\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n      this._element.style[dimension] = this._element[scrollSize] + \"px\";\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (this._isTransitioning || !this._element.classList.contains(CLASS_NAME_SHOW)) {\n        return;\n      }\n\n      var startEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + \"px\";\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n      var triggerArrayLength = this._triggerArray.length;\n\n      if (triggerArrayLength > 0) {\n        for (var i = 0; i < triggerArrayLength; i++) {\n          var trigger = this._triggerArray[i];\n          var elem = getElementFromSelector(trigger);\n\n          if (elem && !elem.classList.contains(CLASS_NAME_SHOW)) {\n            trigger.classList.add(CLASS_NAME_COLLAPSED);\n            trigger.setAttribute('aria-expanded', false);\n          }\n        }\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this2.setTransitioning(false);\n\n        _this2._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        _this2._element.classList.add(CLASS_NAME_COLLAPSE);\n\n        EventHandler.trigger(_this2._element, EVENT_HIDDEN);\n      };\n\n      this._element.style[dimension] = '';\n      var transitionDuration = getTransitionDurationFromElement(this._element);\n      EventHandler.one(this._element, TRANSITION_END, complete);\n      emulateTransitionEnd(this._element, transitionDuration);\n    };\n\n    _proto.setTransitioning = function setTransitioning(isTransitioning) {\n      this._isTransitioning = isTransitioning;\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$3);\n      this._config = null;\n      this._parent = null;\n      this._element = null;\n      this._triggerArray = null;\n      this._isTransitioning = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$1), config);\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      typeCheckConfig(NAME$3, config, DefaultType$1);\n      return config;\n    };\n\n    _proto._getDimension = function _getDimension() {\n      var hasWidth = this._element.classList.contains(WIDTH);\n\n      return hasWidth ? WIDTH : HEIGHT;\n    };\n\n    _proto._getParent = function _getParent() {\n      var _this3 = this;\n\n      var parent = this._config.parent;\n\n      if (isElement(parent)) {\n        // it's a jQuery object\n        if (typeof parent.jquery !== 'undefined' || typeof parent[0] !== 'undefined') {\n          parent = parent[0];\n        }\n      } else {\n        parent = SelectorEngine.findOne(parent);\n      }\n\n      var selector = SELECTOR_DATA_TOGGLE$1 + \"[data-parent=\\\"\" + parent + \"\\\"]\";\n      SelectorEngine.find(selector, parent).forEach(function (element) {\n        var selected = getElementFromSelector(element);\n\n        _this3._addAriaAndCollapsedClass(selected, [element]);\n      });\n      return parent;\n    };\n\n    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\n      if (element) {\n        var isOpen = element.classList.contains(CLASS_NAME_SHOW);\n\n        if (triggerArray.length) {\n          triggerArray.forEach(function (elem) {\n            if (isOpen) {\n              elem.classList.remove(CLASS_NAME_COLLAPSED);\n            } else {\n              elem.classList.add(CLASS_NAME_COLLAPSED);\n            }\n\n            elem.setAttribute('aria-expanded', isOpen);\n          });\n        }\n      }\n    } // Static\n    ;\n\n    Collapse.collapseInterface = function collapseInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$3);\n\n      var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$1), Manipulator.getDataAttributes(element)), typeof config === 'object' && config ? config : {});\n\n      if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      if (!data) {\n        data = new Collapse(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    Collapse.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Collapse.collapseInterface(this, config);\n      });\n    };\n\n    Collapse.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$3);\n    };\n\n    _createClass(Collapse, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$3;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$1;\n      }\n    }]);\n\n    return Collapse;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$1, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var triggerData = Manipulator.getDataAttributes(this);\n    var selector = getSelectorFromElement(this);\n    var selectorElements = SelectorEngine.find(selector);\n    selectorElements.forEach(function (element) {\n      var data = Data.getData(element, DATA_KEY$3);\n      var config;\n\n      if (data) {\n        // update parent attribute\n        if (data._parent === null && typeof triggerData.parent === 'string') {\n          data._config.parent = triggerData.parent;\n          data._parent = data._getParent();\n        }\n\n        config = 'toggle';\n      } else {\n        config = triggerData;\n      }\n\n      Collapse.collapseInterface(element, config);\n    });\n  });\n  var $$4 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .collapse to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$4) {\n    var JQUERY_NO_CONFLICT$3 = $$4.fn[NAME$3];\n    $$4.fn[NAME$3] = Collapse.jQueryInterface;\n    $$4.fn[NAME$3].Constructor = Collapse;\n\n    $$4.fn[NAME$3].noConflict = function () {\n      $$4.fn[NAME$3] = JQUERY_NO_CONFLICT$3;\n      return Collapse.jQueryInterface;\n    };\n  }\n\n  /**!\n   * @fileOverview Kickass library to create and place poppers near their reference elements.\n   * @version 1.16.0\n   * @license\n   * Copyright (c) 2016 Federico Zivolo and contributors\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in all\n   * copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   * SOFTWARE.\n   */\n  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\n  var timeoutDuration = function () {\n    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n      if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n        return 1;\n      }\n    }\n    return 0;\n  }();\n\n  function microtaskDebounce(fn) {\n    var called = false;\n    return function () {\n      if (called) {\n        return;\n      }\n      called = true;\n      window.Promise.resolve().then(function () {\n        called = false;\n        fn();\n      });\n    };\n  }\n\n  function taskDebounce(fn) {\n    var scheduled = false;\n    return function () {\n      if (!scheduled) {\n        scheduled = true;\n        setTimeout(function () {\n          scheduled = false;\n          fn();\n        }, timeoutDuration);\n      }\n    };\n  }\n\n  var supportsMicroTasks = isBrowser && window.Promise;\n\n  /**\n  * Create a debounced version of a method, that's asynchronously deferred\n  * but called in the minimum time possible.\n  *\n  * @method\n  * @memberof Popper.Utils\n  * @argument {Function} fn\n  * @returns {Function}\n  */\n  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n  /**\n   * Check if the given variable is a function\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Any} functionToCheck - variable to check\n   * @returns {Boolean} answer to: is a function?\n   */\n  function isFunction(functionToCheck) {\n    var getType = {};\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n  }\n\n  /**\n   * Get CSS computed property of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Eement} element\n   * @argument {String} property\n   */\n  function getStyleComputedProperty(element, property) {\n    if (element.nodeType !== 1) {\n      return [];\n    }\n    // NOTE: 1 DOM access here\n    var window = element.ownerDocument.defaultView;\n    var css = window.getComputedStyle(element, null);\n    return property ? css[property] : css;\n  }\n\n  /**\n   * Returns the parentNode or the host of the element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} parent\n   */\n  function getParentNode(element) {\n    if (element.nodeName === 'HTML') {\n      return element;\n    }\n    return element.parentNode || element.host;\n  }\n\n  /**\n   * Returns the scrolling parent of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} scroll parent\n   */\n  function getScrollParent(element) {\n    // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n    if (!element) {\n      return document.body;\n    }\n\n    switch (element.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return element.ownerDocument.body;\n      case '#document':\n        return element.body;\n    }\n\n    // Firefox want us to check `-x` and `-y` variations as well\n\n    var _getStyleComputedProp = getStyleComputedProperty(element),\n        overflow = _getStyleComputedProp.overflow,\n        overflowX = _getStyleComputedProp.overflowX,\n        overflowY = _getStyleComputedProp.overflowY;\n\n    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n      return element;\n    }\n\n    return getScrollParent(getParentNode(element));\n  }\n\n  /**\n   * Returns the reference node of the reference object, or the reference object itself.\n   * @method\n   * @memberof Popper.Utils\n   * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n   * @returns {Element} parent\n   */\n  function getReferenceNode(reference) {\n    return reference && reference.referenceNode ? reference.referenceNode : reference;\n  }\n\n  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\n  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n  /**\n   * Determines if the browser is Internet Explorer\n   * @method\n   * @memberof Popper.Utils\n   * @param {Number} version to check\n   * @returns {Boolean} isIE\n   */\n  function isIE(version) {\n    if (version === 11) {\n      return isIE11;\n    }\n    if (version === 10) {\n      return isIE10;\n    }\n    return isIE11 || isIE10;\n  }\n\n  /**\n   * Returns the offset parent of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} offset parent\n   */\n  function getOffsetParent(element) {\n    if (!element) {\n      return document.documentElement;\n    }\n\n    var noOffsetParent = isIE(10) ? document.body : null;\n\n    // NOTE: 1 DOM access here\n    var offsetParent = element.offsetParent || null;\n    // Skip hidden elements which don't have an offsetParent\n    while (offsetParent === noOffsetParent && element.nextElementSibling) {\n      offsetParent = (element = element.nextElementSibling).offsetParent;\n    }\n\n    var nodeName = offsetParent && offsetParent.nodeName;\n\n    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n      return element ? element.ownerDocument.documentElement : document.documentElement;\n    }\n\n    // .offsetParent will return the closest TH, TD or TABLE in case\n    // no offsetParent is present, I hate this job...\n    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n      return getOffsetParent(offsetParent);\n    }\n\n    return offsetParent;\n  }\n\n  function isOffsetContainer(element) {\n    var nodeName = element.nodeName;\n\n    if (nodeName === 'BODY') {\n      return false;\n    }\n    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n  }\n\n  /**\n   * Finds the root node (document, shadowDOM root) of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} node\n   * @returns {Element} root node\n   */\n  function getRoot(node) {\n    if (node.parentNode !== null) {\n      return getRoot(node.parentNode);\n    }\n\n    return node;\n  }\n\n  /**\n   * Finds the offset parent common to the two provided nodes\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element1\n   * @argument {Element} element2\n   * @returns {Element} common offset parent\n   */\n  function findCommonOffsetParent(element1, element2) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n      return document.documentElement;\n    }\n\n    // Here we make sure to give as \"start\" the element that comes first in the DOM\n    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n    var start = order ? element1 : element2;\n    var end = order ? element2 : element1;\n\n    // Get common ancestor container\n    var range = document.createRange();\n    range.setStart(start, 0);\n    range.setEnd(end, 0);\n    var commonAncestorContainer = range.commonAncestorContainer;\n\n    // Both nodes are inside #document\n\n    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n      if (isOffsetContainer(commonAncestorContainer)) {\n        return commonAncestorContainer;\n      }\n\n      return getOffsetParent(commonAncestorContainer);\n    }\n\n    // one of the nodes is inside shadowDOM, find which one\n    var element1root = getRoot(element1);\n    if (element1root.host) {\n      return findCommonOffsetParent(element1root.host, element2);\n    } else {\n      return findCommonOffsetParent(element1, getRoot(element2).host);\n    }\n  }\n\n  /**\n   * Gets the scroll value of the given element in the given side (top and left)\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @argument {String} side `top` or `left`\n   * @returns {number} amount of scrolled pixels\n   */\n  function getScroll(element) {\n    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n    var nodeName = element.nodeName;\n\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n      var html = element.ownerDocument.documentElement;\n      var scrollingElement = element.ownerDocument.scrollingElement || html;\n      return scrollingElement[upperSide];\n    }\n\n    return element[upperSide];\n  }\n\n  /*\n   * Sum or subtract the element scroll values (left and top) from a given rect object\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} rect - Rect object you want to change\n   * @param {HTMLElement} element - The element from the function reads the scroll values\n   * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n   * @return {Object} rect - The modifier rect object\n   */\n  function includeScroll(rect, element) {\n    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var scrollTop = getScroll(element, 'top');\n    var scrollLeft = getScroll(element, 'left');\n    var modifier = subtract ? -1 : 1;\n    rect.top += scrollTop * modifier;\n    rect.bottom += scrollTop * modifier;\n    rect.left += scrollLeft * modifier;\n    rect.right += scrollLeft * modifier;\n    return rect;\n  }\n\n  /*\n   * Helper to detect borders of a given element\n   * @method\n   * @memberof Popper.Utils\n   * @param {CSSStyleDeclaration} styles\n   * Result of `getStyleComputedProperty` on the given element\n   * @param {String} axis - `x` or `y`\n   * @return {number} borders - The borders size of the given axis\n   */\n\n  function getBordersSize(styles, axis) {\n    var sideA = axis === 'x' ? 'Left' : 'Top';\n    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n    return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n  }\n\n  function getSize(axis, body, html, computedStyle) {\n    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n  }\n\n  function getWindowSizes(document) {\n    var body = document.body;\n    var html = document.documentElement;\n    var computedStyle = isIE(10) && getComputedStyle(html);\n\n    return {\n      height: getSize('Height', body, html, computedStyle),\n      width: getSize('Width', body, html, computedStyle)\n    };\n  }\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n\n\n\n\n  var defineProperty = function (obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  };\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Given element offsets, generate an output similar to getBoundingClientRect\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Object} offsets\n   * @returns {Object} ClientRect like output\n   */\n  function getClientRect(offsets) {\n    return _extends({}, offsets, {\n      right: offsets.left + offsets.width,\n      bottom: offsets.top + offsets.height\n    });\n  }\n\n  /**\n   * Get bounding client rect of given element\n   * @method\n   * @memberof Popper.Utils\n   * @param {HTMLElement} element\n   * @return {Object} client rect\n   */\n  function getBoundingClientRect(element) {\n    var rect = {};\n\n    // IE10 10 FIX: Please, don't ask, the element isn't\n    // considered in DOM in some circumstances...\n    // This isn't reproducible in IE10 compatibility mode of IE11\n    try {\n      if (isIE(10)) {\n        rect = element.getBoundingClientRect();\n        var scrollTop = getScroll(element, 'top');\n        var scrollLeft = getScroll(element, 'left');\n        rect.top += scrollTop;\n        rect.left += scrollLeft;\n        rect.bottom += scrollTop;\n        rect.right += scrollLeft;\n      } else {\n        rect = element.getBoundingClientRect();\n      }\n    } catch (e) {}\n\n    var result = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n\n    // subtract scrollbar size from sizes\n    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n    var width = sizes.width || element.clientWidth || result.width;\n    var height = sizes.height || element.clientHeight || result.height;\n\n    var horizScrollbar = element.offsetWidth - width;\n    var vertScrollbar = element.offsetHeight - height;\n\n    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n    // we make this check conditional for performance reasons\n    if (horizScrollbar || vertScrollbar) {\n      var styles = getStyleComputedProperty(element);\n      horizScrollbar -= getBordersSize(styles, 'x');\n      vertScrollbar -= getBordersSize(styles, 'y');\n\n      result.width -= horizScrollbar;\n      result.height -= vertScrollbar;\n    }\n\n    return getClientRect(result);\n  }\n\n  function getOffsetRectRelativeToArbitraryNode(children, parent) {\n    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var isIE10 = isIE(10);\n    var isHTML = parent.nodeName === 'HTML';\n    var childrenRect = getBoundingClientRect(children);\n    var parentRect = getBoundingClientRect(parent);\n    var scrollParent = getScrollParent(children);\n\n    var styles = getStyleComputedProperty(parent);\n    var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n    var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n    // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n    if (fixedPosition && isHTML) {\n      parentRect.top = Math.max(parentRect.top, 0);\n      parentRect.left = Math.max(parentRect.left, 0);\n    }\n    var offsets = getClientRect({\n      top: childrenRect.top - parentRect.top - borderTopWidth,\n      left: childrenRect.left - parentRect.left - borderLeftWidth,\n      width: childrenRect.width,\n      height: childrenRect.height\n    });\n    offsets.marginTop = 0;\n    offsets.marginLeft = 0;\n\n    // Subtract margins of documentElement in case it's being used as parent\n    // we do this only on HTML because it's the only element that behaves\n    // differently when margins are applied to it. The margins are included in\n    // the box of the documentElement, in the other cases not.\n    if (!isIE10 && isHTML) {\n      var marginTop = parseFloat(styles.marginTop, 10);\n      var marginLeft = parseFloat(styles.marginLeft, 10);\n\n      offsets.top -= borderTopWidth - marginTop;\n      offsets.bottom -= borderTopWidth - marginTop;\n      offsets.left -= borderLeftWidth - marginLeft;\n      offsets.right -= borderLeftWidth - marginLeft;\n\n      // Attach marginTop and marginLeft because in some circumstances we may need them\n      offsets.marginTop = marginTop;\n      offsets.marginLeft = marginLeft;\n    }\n\n    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n      offsets = includeScroll(offsets, parent);\n    }\n\n    return offsets;\n  }\n\n  function getViewportOffsetRectRelativeToArtbitraryNode(element) {\n    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var html = element.ownerDocument.documentElement;\n    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n    var width = Math.max(html.clientWidth, window.innerWidth || 0);\n    var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n    var scrollTop = !excludeScroll ? getScroll(html) : 0;\n    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n    var offset = {\n      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n      width: width,\n      height: height\n    };\n\n    return getClientRect(offset);\n  }\n\n  /**\n   * Check if the given element is fixed or is inside a fixed parent\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @argument {Element} customContainer\n   * @returns {Boolean} answer to \"isFixed?\"\n   */\n  function isFixed(element) {\n    var nodeName = element.nodeName;\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n      return false;\n    }\n    if (getStyleComputedProperty(element, 'position') === 'fixed') {\n      return true;\n    }\n    var parentNode = getParentNode(element);\n    if (!parentNode) {\n      return false;\n    }\n    return isFixed(parentNode);\n  }\n\n  /**\n   * Finds the first parent of an element that has a transformed property defined\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} first transformed parent or documentElement\n   */\n\n  function getFixedPositionOffsetParent(element) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element || !element.parentElement || isIE()) {\n      return document.documentElement;\n    }\n    var el = element.parentElement;\n    while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n      el = el.parentElement;\n    }\n    return el || document.documentElement;\n  }\n\n  /**\n   * Computed the boundaries limits and return them\n   * @method\n   * @memberof Popper.Utils\n   * @param {HTMLElement} popper\n   * @param {HTMLElement} reference\n   * @param {number} padding\n   * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n   * @param {Boolean} fixedPosition - Is in fixed position mode\n   * @returns {Object} Coordinates of the boundaries\n   */\n  function getBoundaries(popper, reference, padding, boundariesElement) {\n    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    // NOTE: 1 DOM access here\n\n    var boundaries = { top: 0, left: 0 };\n    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n    // Handle viewport case\n    if (boundariesElement === 'viewport') {\n      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n    } else {\n      // Handle other cases based on DOM element used as boundaries\n      var boundariesNode = void 0;\n      if (boundariesElement === 'scrollParent') {\n        boundariesNode = getScrollParent(getParentNode(reference));\n        if (boundariesNode.nodeName === 'BODY') {\n          boundariesNode = popper.ownerDocument.documentElement;\n        }\n      } else if (boundariesElement === 'window') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      } else {\n        boundariesNode = boundariesElement;\n      }\n\n      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n      // In case of HTML, we need a different computation\n      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n        var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n            height = _getWindowSizes.height,\n            width = _getWindowSizes.width;\n\n        boundaries.top += offsets.top - offsets.marginTop;\n        boundaries.bottom = height + offsets.top;\n        boundaries.left += offsets.left - offsets.marginLeft;\n        boundaries.right = width + offsets.left;\n      } else {\n        // for all the other DOM elements, this one is good\n        boundaries = offsets;\n      }\n    }\n\n    // Add paddings\n    padding = padding || 0;\n    var isPaddingNumber = typeof padding === 'number';\n    boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n    boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n    return boundaries;\n  }\n\n  function getArea(_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n\n    return width * height;\n  }\n\n  /**\n   * Utility used to transform the `auto` placement to the placement with more\n   * available space.\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n    if (placement.indexOf('auto') === -1) {\n      return placement;\n    }\n\n    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n    var rects = {\n      top: {\n        width: boundaries.width,\n        height: refRect.top - boundaries.top\n      },\n      right: {\n        width: boundaries.right - refRect.right,\n        height: boundaries.height\n      },\n      bottom: {\n        width: boundaries.width,\n        height: boundaries.bottom - refRect.bottom\n      },\n      left: {\n        width: refRect.left - boundaries.left,\n        height: boundaries.height\n      }\n    };\n\n    var sortedAreas = Object.keys(rects).map(function (key) {\n      return _extends({\n        key: key\n      }, rects[key], {\n        area: getArea(rects[key])\n      });\n    }).sort(function (a, b) {\n      return b.area - a.area;\n    });\n\n    var filteredAreas = sortedAreas.filter(function (_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      return width >= popper.clientWidth && height >= popper.clientHeight;\n    });\n\n    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n    var variation = placement.split('-')[1];\n\n    return computedPlacement + (variation ? '-' + variation : '');\n  }\n\n  /**\n   * Get offsets to the reference element\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} state\n   * @param {Element} popper - the popper element\n   * @param {Element} reference - the reference element (the popper will be relative to this)\n   * @param {Element} fixedPosition - is in fixed position mode\n   * @returns {Object} An object containing the offsets which will be applied to the popper\n   */\n  function getReferenceOffsets(state, popper, reference) {\n    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n  }\n\n  /**\n   * Get the outer sizes of the given element (offset size + margins)\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Object} object containing width and height properties\n   */\n  function getOuterSizes(element) {\n    var window = element.ownerDocument.defaultView;\n    var styles = window.getComputedStyle(element);\n    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n    var result = {\n      width: element.offsetWidth + y,\n      height: element.offsetHeight + x\n    };\n    return result;\n  }\n\n  /**\n   * Get the opposite placement of the given one\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement\n   * @returns {String} flipped placement\n   */\n  function getOppositePlacement(placement) {\n    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash[matched];\n    });\n  }\n\n  /**\n   * Get offsets to the popper\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} position - CSS position the Popper will get applied\n   * @param {HTMLElement} popper - the popper element\n   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n   * @param {String} placement - one of the valid placement options\n   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n   */\n  function getPopperOffsets(popper, referenceOffsets, placement) {\n    placement = placement.split('-')[0];\n\n    // Get popper node sizes\n    var popperRect = getOuterSizes(popper);\n\n    // Add position, width and height to our offsets object\n    var popperOffsets = {\n      width: popperRect.width,\n      height: popperRect.height\n    };\n\n    // depending by the popper placement we have to compute its offsets slightly differently\n    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n    var mainSide = isHoriz ? 'top' : 'left';\n    var secondarySide = isHoriz ? 'left' : 'top';\n    var measurement = isHoriz ? 'height' : 'width';\n    var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n    if (placement === secondarySide) {\n      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n    } else {\n      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n    }\n\n    return popperOffsets;\n  }\n\n  /**\n   * Mimics the `find` method of Array\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Array} arr\n   * @argument prop\n   * @argument value\n   * @returns index or -1\n   */\n  function find$1(arr, check) {\n    // use native find if supported\n    if (Array.prototype.find) {\n      return arr.find(check);\n    }\n\n    // use `filter` to obtain the same behavior of `find`\n    return arr.filter(check)[0];\n  }\n\n  /**\n   * Return the index of the matching object\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Array} arr\n   * @argument prop\n   * @argument value\n   * @returns index or -1\n   */\n  function findIndex(arr, prop, value) {\n    // use native findIndex if supported\n    if (Array.prototype.findIndex) {\n      return arr.findIndex(function (cur) {\n        return cur[prop] === value;\n      });\n    }\n\n    // use `find` + `indexOf` if `findIndex` isn't supported\n    var match = find$1(arr, function (obj) {\n      return obj[prop] === value;\n    });\n    return arr.indexOf(match);\n  }\n\n  /**\n   * Loop trough the list of modifiers and run them in order,\n   * each of them will then edit the data object.\n   * @method\n   * @memberof Popper.Utils\n   * @param {dataObject} data\n   * @param {Array} modifiers\n   * @param {String} ends - Optional modifier name used as stopper\n   * @returns {dataObject}\n   */\n  function runModifiers(modifiers, data, ends) {\n    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n    modifiersToRun.forEach(function (modifier) {\n      if (modifier['function']) {\n        // eslint-disable-line dot-notation\n        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      }\n      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n      if (modifier.enabled && isFunction(fn)) {\n        // Add properties to offsets to make them a complete clientRect object\n        // we do this before each modifier to make sure the previous one doesn't\n        // mess with these values\n        data.offsets.popper = getClientRect(data.offsets.popper);\n        data.offsets.reference = getClientRect(data.offsets.reference);\n\n        data = fn(data, modifier);\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Updates the position of the popper, computing the new offsets and applying\n   * the new style.<br />\n   * Prefer `scheduleUpdate` over `update` because of performance reasons.\n   * @method\n   * @memberof Popper\n   */\n  function update() {\n    // if popper is destroyed, don't perform any further update\n    if (this.state.isDestroyed) {\n      return;\n    }\n\n    var data = {\n      instance: this,\n      styles: {},\n      arrowStyles: {},\n      attributes: {},\n      flipped: false,\n      offsets: {}\n    };\n\n    // compute reference element offsets\n    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n    // compute auto placement, store placement inside the data object,\n    // modifiers will be able to edit `placement` if needed\n    // and refer to originalPlacement to know the original value\n    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n    // store the computed placement inside `originalPlacement`\n    data.originalPlacement = data.placement;\n\n    data.positionFixed = this.options.positionFixed;\n\n    // compute the popper offsets\n    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n    // run the modifiers\n    data = runModifiers(this.modifiers, data);\n\n    // the first `update` will call `onCreate` callback\n    // the other ones will call `onUpdate` callback\n    if (!this.state.isCreated) {\n      this.state.isCreated = true;\n      this.options.onCreate(data);\n    } else {\n      this.options.onUpdate(data);\n    }\n  }\n\n  /**\n   * Helper used to know if the given modifier is enabled.\n   * @method\n   * @memberof Popper.Utils\n   * @returns {Boolean}\n   */\n  function isModifierEnabled(modifiers, modifierName) {\n    return modifiers.some(function (_ref) {\n      var name = _ref.name,\n          enabled = _ref.enabled;\n      return enabled && name === modifierName;\n    });\n  }\n\n  /**\n   * Get the prefixed supported property name\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} property (camelCase)\n   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n   */\n  function getSupportedPropertyName(property) {\n    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefix = prefixes[i];\n      var toCheck = prefix ? '' + prefix + upperProp : property;\n      if (typeof document.body.style[toCheck] !== 'undefined') {\n        return toCheck;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Destroys the popper.\n   * @method\n   * @memberof Popper\n   */\n  function destroy() {\n    this.state.isDestroyed = true;\n\n    // touch DOM only if `applyStyle` modifier is enabled\n    if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n      this.popper.removeAttribute('x-placement');\n      this.popper.style.position = '';\n      this.popper.style.top = '';\n      this.popper.style.left = '';\n      this.popper.style.right = '';\n      this.popper.style.bottom = '';\n      this.popper.style.willChange = '';\n      this.popper.style[getSupportedPropertyName('transform')] = '';\n    }\n\n    this.disableEventListeners();\n\n    // remove the popper if user explicitly asked for the deletion on destroy\n    // do not use `remove` because IE11 doesn't support it\n    if (this.options.removeOnDestroy) {\n      this.popper.parentNode.removeChild(this.popper);\n    }\n    return this;\n  }\n\n  /**\n   * Get the window associated with the element\n   * @argument {Element} element\n   * @returns {Window}\n   */\n  function getWindow(element) {\n    var ownerDocument = element.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView : window;\n  }\n\n  function attachToScrollParents(scrollParent, event, callback, scrollParents) {\n    var isBody = scrollParent.nodeName === 'BODY';\n    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n    target.addEventListener(event, callback, { passive: true });\n\n    if (!isBody) {\n      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n    }\n    scrollParents.push(target);\n  }\n\n  /**\n   * Setup needed event listeners used to update the popper position\n   * @method\n   * @memberof Popper.Utils\n   * @private\n   */\n  function setupEventListeners(reference, options, state, updateBound) {\n    // Resize event listener on window\n    state.updateBound = updateBound;\n    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n    // Scroll event listener on scroll parents\n    var scrollElement = getScrollParent(reference);\n    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n    state.scrollElement = scrollElement;\n    state.eventsEnabled = true;\n\n    return state;\n  }\n\n  /**\n   * It will add resize/scroll events and start recalculating\n   * position of the popper element when they are triggered.\n   * @method\n   * @memberof Popper\n   */\n  function enableEventListeners() {\n    if (!this.state.eventsEnabled) {\n      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n    }\n  }\n\n  /**\n   * Remove event listeners used to update the popper position\n   * @method\n   * @memberof Popper.Utils\n   * @private\n   */\n  function removeEventListeners(reference, state) {\n    // Remove resize event listener on window\n    getWindow(reference).removeEventListener('resize', state.updateBound);\n\n    // Remove scroll event listener on scroll parents\n    state.scrollParents.forEach(function (target) {\n      target.removeEventListener('scroll', state.updateBound);\n    });\n\n    // Reset state\n    state.updateBound = null;\n    state.scrollParents = [];\n    state.scrollElement = null;\n    state.eventsEnabled = false;\n    return state;\n  }\n\n  /**\n   * It will remove resize/scroll events and won't recalculate popper position\n   * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n   * unless you call `update` method manually.\n   * @method\n   * @memberof Popper\n   */\n  function disableEventListeners() {\n    if (this.state.eventsEnabled) {\n      cancelAnimationFrame(this.scheduleUpdate);\n      this.state = removeEventListeners(this.reference, this.state);\n    }\n  }\n\n  /**\n   * Tells if a given input is a number\n   * @method\n   * @memberof Popper.Utils\n   * @param {*} input to check\n   * @return {Boolean}\n   */\n  function isNumeric(n) {\n    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  /**\n   * Set the style to the given popper\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element - Element to apply the style to\n   * @argument {Object} styles\n   * Object with a list of properties and values which will be applied to the element\n   */\n  function setStyles(element, styles) {\n    Object.keys(styles).forEach(function (prop) {\n      var unit = '';\n      // add unit if the value is numeric and is one of the following\n      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n        unit = 'px';\n      }\n      element.style[prop] = styles[prop] + unit;\n    });\n  }\n\n  /**\n   * Set the attributes to the given popper\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element - Element to apply the attributes to\n   * @argument {Object} styles\n   * Object with a list of properties and values which will be applied to the element\n   */\n  function setAttributes(element, attributes) {\n    Object.keys(attributes).forEach(function (prop) {\n      var value = attributes[prop];\n      if (value !== false) {\n        element.setAttribute(prop, attributes[prop]);\n      } else {\n        element.removeAttribute(prop);\n      }\n    });\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} data.styles - List of style properties - values to apply to popper element\n   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The same data object\n   */\n  function applyStyle(data) {\n    // any property present in `data.styles` will be applied to the popper,\n    // in this way we can make the 3rd party modifiers add custom styles to it\n    // Be aware, modifiers could override the properties defined in the previous\n    // lines of this modifier!\n    setStyles(data.instance.popper, data.styles);\n\n    // any property present in `data.attributes` will be applied to the popper,\n    // they will be set as HTML attributes of the element\n    setAttributes(data.instance.popper, data.attributes);\n\n    // if arrowElement is defined and arrowStyles has some properties\n    if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n      setStyles(data.arrowElement, data.arrowStyles);\n    }\n\n    return data;\n  }\n\n  /**\n   * Set the x-placement attribute before everything else because it could be used\n   * to add margins to the popper margins needs to be calculated to get the\n   * correct popper offsets.\n   * @method\n   * @memberof Popper.modifiers\n   * @param {HTMLElement} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper\n   * @param {Object} options - Popper.js options\n   */\n  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n    // compute reference element offsets\n    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n    // compute auto placement, store placement inside the data object,\n    // modifiers will be able to edit `placement` if needed\n    // and refer to originalPlacement to know the original value\n    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n    popper.setAttribute('x-placement', placement);\n\n    // Apply `position` to popper before anything else because\n    // without the position applied we can't guarantee correct computations\n    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n    return options;\n  }\n\n  /**\n   * @function\n   * @memberof Popper.Utils\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n   * @returns {Object} The popper's position offsets rounded\n   *\n   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n   * good as it can be within reason.\n   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n   *\n   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n   * as well on High DPI screens).\n   *\n   * Firefox prefers no rounding for positioning and does not have blurriness on\n   * high DPI screens.\n   *\n   * Only horizontal placement and left/right values need to be considered.\n   */\n  function getRoundedOffsets(data, shouldRound) {\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n    var round = Math.round,\n        floor = Math.floor;\n\n    var noRound = function noRound(v) {\n      return v;\n    };\n\n    var referenceWidth = round(reference.width);\n    var popperWidth = round(popper.width);\n\n    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n    var isVariation = data.placement.indexOf('-') !== -1;\n    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n    var verticalToInteger = !shouldRound ? noRound : round;\n\n    return {\n      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n      top: verticalToInteger(popper.top),\n      bottom: verticalToInteger(popper.bottom),\n      right: horizontalToInteger(popper.right)\n    };\n  }\n\n  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function computeStyle(data, options) {\n    var x = options.x,\n        y = options.y;\n    var popper = data.offsets.popper;\n\n    // Remove this legacy support in Popper.js v2\n\n    var legacyGpuAccelerationOption = find$1(data.instance.modifiers, function (modifier) {\n      return modifier.name === 'applyStyle';\n    }).gpuAcceleration;\n    if (legacyGpuAccelerationOption !== undefined) {\n      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n    }\n    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n    var offsetParent = getOffsetParent(data.instance.popper);\n    var offsetParentRect = getBoundingClientRect(offsetParent);\n\n    // Styles\n    var styles = {\n      position: popper.position\n    };\n\n    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n    var sideA = x === 'bottom' ? 'top' : 'bottom';\n    var sideB = y === 'right' ? 'left' : 'right';\n\n    // if gpuAcceleration is set to `true` and transform is supported,\n    //  we use `translate3d` to apply the position to the popper we\n    // automatically use the supported prefixed version if needed\n    var prefixedProperty = getSupportedPropertyName('transform');\n\n    // now, let's make a step back and look at this code closely (wtf?)\n    // If the content of the popper grows once it's been positioned, it\n    // may happen that the popper gets misplaced because of the new content\n    // overflowing its reference element\n    // To avoid this problem, we provide two options (x and y), which allow\n    // the consumer to define the offset origin.\n    // If we position a popper on top of a reference element, we can set\n    // `x` to `top` to make the popper grow towards its top instead of\n    // its bottom.\n    var left = void 0,\n        top = void 0;\n    if (sideA === 'bottom') {\n      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n      // and not the bottom of the html element\n      if (offsetParent.nodeName === 'HTML') {\n        top = -offsetParent.clientHeight + offsets.bottom;\n      } else {\n        top = -offsetParentRect.height + offsets.bottom;\n      }\n    } else {\n      top = offsets.top;\n    }\n    if (sideB === 'right') {\n      if (offsetParent.nodeName === 'HTML') {\n        left = -offsetParent.clientWidth + offsets.right;\n      } else {\n        left = -offsetParentRect.width + offsets.right;\n      }\n    } else {\n      left = offsets.left;\n    }\n    if (gpuAcceleration && prefixedProperty) {\n      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n      styles[sideA] = 0;\n      styles[sideB] = 0;\n      styles.willChange = 'transform';\n    } else {\n      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n      var invertTop = sideA === 'bottom' ? -1 : 1;\n      var invertLeft = sideB === 'right' ? -1 : 1;\n      styles[sideA] = top * invertTop;\n      styles[sideB] = left * invertLeft;\n      styles.willChange = sideA + ', ' + sideB;\n    }\n\n    // Attributes\n    var attributes = {\n      'x-placement': data.placement\n    };\n\n    // Update `data` attributes, styles and arrowStyles\n    data.attributes = _extends({}, attributes, data.attributes);\n    data.styles = _extends({}, styles, data.styles);\n    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n    return data;\n  }\n\n  /**\n   * Helper used to know if the given modifier depends from another one.<br />\n   * It checks if the needed modifier is listed and enabled.\n   * @method\n   * @memberof Popper.Utils\n   * @param {Array} modifiers - list of modifiers\n   * @param {String} requestingName - name of requesting modifier\n   * @param {String} requestedName - name of requested modifier\n   * @returns {Boolean}\n   */\n  function isModifierRequired(modifiers, requestingName, requestedName) {\n    var requesting = find$1(modifiers, function (_ref) {\n      var name = _ref.name;\n      return name === requestingName;\n    });\n\n    var isRequired = !!requesting && modifiers.some(function (modifier) {\n      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n    });\n\n    if (!isRequired) {\n      var _requesting = '`' + requestingName + '`';\n      var requested = '`' + requestedName + '`';\n      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n    }\n    return isRequired;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function arrow(data, options) {\n    var _data$offsets$arrow;\n\n    // arrow depends on keepTogether in order to work\n    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n      return data;\n    }\n\n    var arrowElement = options.element;\n\n    // if arrowElement is a string, suppose it's a CSS selector\n    if (typeof arrowElement === 'string') {\n      arrowElement = data.instance.popper.querySelector(arrowElement);\n\n      // if arrowElement is not found, don't run the modifier\n      if (!arrowElement) {\n        return data;\n      }\n    } else {\n      // if the arrowElement isn't a query selector we must check that the\n      // provided DOM node is child of its popper node\n      if (!data.instance.popper.contains(arrowElement)) {\n        console.warn('WARNING: `arrow.element` must be child of its popper element!');\n        return data;\n      }\n    }\n\n    var placement = data.placement.split('-')[0];\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n    var len = isVertical ? 'height' : 'width';\n    var sideCapitalized = isVertical ? 'Top' : 'Left';\n    var side = sideCapitalized.toLowerCase();\n    var altSide = isVertical ? 'left' : 'top';\n    var opSide = isVertical ? 'bottom' : 'right';\n    var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n    //\n    // extends keepTogether behavior making sure the popper and its\n    // reference have enough pixels in conjunction\n    //\n\n    // top/left side\n    if (reference[opSide] - arrowElementSize < popper[side]) {\n      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n    }\n    // bottom/right side\n    if (reference[side] + arrowElementSize > popper[opSide]) {\n      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n    }\n    data.offsets.popper = getClientRect(data.offsets.popper);\n\n    // compute center of the popper\n    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n    // Compute the sideValue using the updated popper offsets\n    // take popper margin in account because we don't have this info available\n    var css = getStyleComputedProperty(data.instance.popper);\n    var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n    // prevent arrowElement from being placed not contiguously to its popper\n    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n    data.arrowElement = arrowElement;\n    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n    return data;\n  }\n\n  /**\n   * Get the opposite placement variation of the given one\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement variation\n   * @returns {String} flipped placement variation\n   */\n  function getOppositeVariation(variation) {\n    if (variation === 'end') {\n      return 'start';\n    } else if (variation === 'start') {\n      return 'end';\n    }\n    return variation;\n  }\n\n  /**\n   * List of accepted placements to use as values of the `placement` option.<br />\n   * Valid placements are:\n   * - `auto`\n   * - `top`\n   * - `right`\n   * - `bottom`\n   * - `left`\n   *\n   * Each placement can have a variation from this list:\n   * - `-start`\n   * - `-end`\n   *\n   * Variations are interpreted easily if you think of them as the left to right\n   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n   * is right.<br />\n   * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n   *\n   * Some valid examples are:\n   * - `top-end` (on top of reference, right aligned)\n   * - `right-start` (on right of reference, top aligned)\n   * - `bottom` (on bottom, centered)\n   * - `auto-end` (on the side with more space available, alignment depends by placement)\n   *\n   * @static\n   * @type {Array}\n   * @enum {String}\n   * @readonly\n   * @method placements\n   * @memberof Popper\n   */\n  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n  // Get rid of `auto` `auto-start` and `auto-end`\n  var validPlacements = placements.slice(3);\n\n  /**\n   * Given an initial placement, returns all the subsequent placements\n   * clockwise (or counter-clockwise).\n   *\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement - A valid placement (it accepts variations)\n   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n   * @returns {Array} placements including their variations\n   */\n  function clockwise(placement) {\n    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var index = validPlacements.indexOf(placement);\n    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n    return counter ? arr.reverse() : arr;\n  }\n\n  var BEHAVIORS = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  };\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function flip(data, options) {\n    // if `inner` modifier is enabled, we can't use the `flip` modifier\n    if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n      return data;\n    }\n\n    if (data.flipped && data.placement === data.originalPlacement) {\n      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n      return data;\n    }\n\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n    var placement = data.placement.split('-')[0];\n    var placementOpposite = getOppositePlacement(placement);\n    var variation = data.placement.split('-')[1] || '';\n\n    var flipOrder = [];\n\n    switch (options.behavior) {\n      case BEHAVIORS.FLIP:\n        flipOrder = [placement, placementOpposite];\n        break;\n      case BEHAVIORS.CLOCKWISE:\n        flipOrder = clockwise(placement);\n        break;\n      case BEHAVIORS.COUNTERCLOCKWISE:\n        flipOrder = clockwise(placement, true);\n        break;\n      default:\n        flipOrder = options.behavior;\n    }\n\n    flipOrder.forEach(function (step, index) {\n      if (placement !== step || flipOrder.length === index + 1) {\n        return data;\n      }\n\n      placement = data.placement.split('-')[0];\n      placementOpposite = getOppositePlacement(placement);\n\n      var popperOffsets = data.offsets.popper;\n      var refOffsets = data.offsets.reference;\n\n      // using floor because the reference offsets may contain decimals we are not going to consider here\n      var floor = Math.floor;\n      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n      // flip the variation if required\n      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n      // flips variation if reference element overflows boundaries\n      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n      // flips variation if popper content overflows boundaries\n      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n      var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n      if (overlapsRef || overflowsBoundaries || flippedVariation) {\n        // this boolean to detect any flip loop\n        data.flipped = true;\n\n        if (overlapsRef || overflowsBoundaries) {\n          placement = flipOrder[index + 1];\n        }\n\n        if (flippedVariation) {\n          variation = getOppositeVariation(variation);\n        }\n\n        data.placement = placement + (variation ? '-' + variation : '');\n\n        // this object contains `position`, we want to preserve it along with\n        // any additional property we may add in the future\n        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n        data = runModifiers(data.instance.modifiers, data, 'flip');\n      }\n    });\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function keepTogether(data) {\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var placement = data.placement.split('-')[0];\n    var floor = Math.floor;\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var side = isVertical ? 'right' : 'bottom';\n    var opSide = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    if (popper[side] < floor(reference[opSide])) {\n      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n    }\n    if (popper[opSide] > floor(reference[side])) {\n      data.offsets.popper[opSide] = floor(reference[side]);\n    }\n\n    return data;\n  }\n\n  /**\n   * Converts a string containing value + unit into a px value number\n   * @function\n   * @memberof {modifiers~offset}\n   * @private\n   * @argument {String} str - Value + unit string\n   * @argument {String} measurement - `height` or `width`\n   * @argument {Object} popperOffsets\n   * @argument {Object} referenceOffsets\n   * @returns {Number|String}\n   * Value in pixels, or original string if no values were extracted\n   */\n  function toValue(str, measurement, popperOffsets, referenceOffsets) {\n    // separate value from unit\n    var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n    var value = +split[1];\n    var unit = split[2];\n\n    // If it's not a number it's an operator, I guess\n    if (!value) {\n      return str;\n    }\n\n    if (unit.indexOf('%') === 0) {\n      var element = void 0;\n      switch (unit) {\n        case '%p':\n          element = popperOffsets;\n          break;\n        case '%':\n        case '%r':\n        default:\n          element = referenceOffsets;\n      }\n\n      var rect = getClientRect(element);\n      return rect[measurement] / 100 * value;\n    } else if (unit === 'vh' || unit === 'vw') {\n      // if is a vh or vw, we calculate the size based on the viewport\n      var size = void 0;\n      if (unit === 'vh') {\n        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n      } else {\n        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      }\n      return size / 100 * value;\n    } else {\n      // if is an explicit pixel unit, we get rid of the unit and keep the value\n      // if is an implicit unit, it's px, and we return just the value\n      return value;\n    }\n  }\n\n  /**\n   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n   * @function\n   * @memberof {modifiers~offset}\n   * @private\n   * @argument {String} offset\n   * @argument {Object} popperOffsets\n   * @argument {Object} referenceOffsets\n   * @argument {String} basePlacement\n   * @returns {Array} a two cells array with x and y offsets in numbers\n   */\n  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n    var offsets = [0, 0];\n\n    // Use height if placement is left or right and index is 0 otherwise use width\n    // in this way the first offset will use an axis and the second one\n    // will use the other one\n    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n    // Split the offset string to obtain a list of values and operands\n    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n    var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n      return frag.trim();\n    });\n\n    // Detect if the offset string contains a pair of values or a single one\n    // they could be separated by comma or space\n    var divider = fragments.indexOf(find$1(fragments, function (frag) {\n      return frag.search(/,|\\s/) !== -1;\n    }));\n\n    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    }\n\n    // If divider is found, we divide the list of values and operands to divide\n    // them by ofset X and Y.\n    var splitRegex = /\\s*,\\s*|\\s+/;\n    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n    // Convert the values with units to absolute pixels to allow our computations\n    ops = ops.map(function (op, index) {\n      // Most of the units rely on the orientation of the popper\n      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n      var mergeWithPrevious = false;\n      return op\n      // This aggregates any `+` or `-` sign that aren't considered operators\n      // e.g.: 10 + +5 => [10, +, +5]\n      .reduce(function (a, b) {\n        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n          a[a.length - 1] = b;\n          mergeWithPrevious = true;\n          return a;\n        } else if (mergeWithPrevious) {\n          a[a.length - 1] += b;\n          mergeWithPrevious = false;\n          return a;\n        } else {\n          return a.concat(b);\n        }\n      }, [])\n      // Here we convert the string values into number values (in px)\n      .map(function (str) {\n        return toValue(str, measurement, popperOffsets, referenceOffsets);\n      });\n    });\n\n    // Loop trough the offsets arrays and execute the operations\n    ops.forEach(function (op, index) {\n      op.forEach(function (frag, index2) {\n        if (isNumeric(frag)) {\n          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n        }\n      });\n    });\n    return offsets;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @argument {Number|String} options.offset=0\n   * The offset value as described in the modifier description\n   * @returns {Object} The data object, properly modified\n   */\n  function offset(data, _ref) {\n    var offset = _ref.offset;\n    var placement = data.placement,\n        _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var basePlacement = placement.split('-')[0];\n\n    var offsets = void 0;\n    if (isNumeric(+offset)) {\n      offsets = [+offset, 0];\n    } else {\n      offsets = parseOffset(offset, popper, reference, basePlacement);\n    }\n\n    if (basePlacement === 'left') {\n      popper.top += offsets[0];\n      popper.left -= offsets[1];\n    } else if (basePlacement === 'right') {\n      popper.top += offsets[0];\n      popper.left += offsets[1];\n    } else if (basePlacement === 'top') {\n      popper.left += offsets[0];\n      popper.top -= offsets[1];\n    } else if (basePlacement === 'bottom') {\n      popper.left += offsets[0];\n      popper.top += offsets[1];\n    }\n\n    data.popper = popper;\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function preventOverflow(data, options) {\n    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n    // If offsetParent is the reference element, we really want to\n    // go one step up and use the next offsetParent as reference to\n    // avoid to make this modifier completely useless and look like broken\n    if (data.instance.reference === boundariesElement) {\n      boundariesElement = getOffsetParent(boundariesElement);\n    }\n\n    // NOTE: DOM access here\n    // resets the popper's position so that the document size can be calculated excluding\n    // the size of the popper element itself\n    var transformProp = getSupportedPropertyName('transform');\n    var popperStyles = data.instance.popper.style; // assignment to help minification\n    var top = popperStyles.top,\n        left = popperStyles.left,\n        transform = popperStyles[transformProp];\n\n    popperStyles.top = '';\n    popperStyles.left = '';\n    popperStyles[transformProp] = '';\n\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n    // NOTE: DOM access here\n    // restores the original style properties after the offsets have been computed\n    popperStyles.top = top;\n    popperStyles.left = left;\n    popperStyles[transformProp] = transform;\n\n    options.boundaries = boundaries;\n\n    var order = options.priority;\n    var popper = data.offsets.popper;\n\n    var check = {\n      primary: function primary(placement) {\n        var value = popper[placement];\n        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n          value = Math.max(popper[placement], boundaries[placement]);\n        }\n        return defineProperty({}, placement, value);\n      },\n      secondary: function secondary(placement) {\n        var mainSide = placement === 'right' ? 'left' : 'top';\n        var value = popper[mainSide];\n        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n        }\n        return defineProperty({}, mainSide, value);\n      }\n    };\n\n    order.forEach(function (placement) {\n      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n      popper = _extends({}, popper, check[side](placement));\n    });\n\n    data.offsets.popper = popper;\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function shift(data) {\n    var placement = data.placement;\n    var basePlacement = placement.split('-')[0];\n    var shiftvariation = placement.split('-')[1];\n\n    // if shift shiftvariation is specified, run the modifier\n    if (shiftvariation) {\n      var _data$offsets = data.offsets,\n          reference = _data$offsets.reference,\n          popper = _data$offsets.popper;\n\n      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n      var side = isVertical ? 'left' : 'top';\n      var measurement = isVertical ? 'width' : 'height';\n\n      var shiftOffsets = {\n        start: defineProperty({}, side, reference[side]),\n        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n      };\n\n      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n    }\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function hide(data) {\n    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n      return data;\n    }\n\n    var refRect = data.offsets.reference;\n    var bound = find$1(data.instance.modifiers, function (modifier) {\n      return modifier.name === 'preventOverflow';\n    }).boundaries;\n\n    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n      // Avoid unnecessary DOM access if visibility hasn't changed\n      if (data.hide === true) {\n        return data;\n      }\n\n      data.hide = true;\n      data.attributes['x-out-of-boundaries'] = '';\n    } else {\n      // Avoid unnecessary DOM access if visibility hasn't changed\n      if (data.hide === false) {\n        return data;\n      }\n\n      data.hide = false;\n      data.attributes['x-out-of-boundaries'] = false;\n    }\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function inner(data) {\n    var placement = data.placement;\n    var basePlacement = placement.split('-')[0];\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n    data.placement = getOppositePlacement(placement);\n    data.offsets.popper = getClientRect(popper);\n\n    return data;\n  }\n\n  /**\n   * Modifier function, each modifier can have a function of this type assigned\n   * to its `fn` property.<br />\n   * These functions will be called on each update, this means that you must\n   * make sure they are performant enough to avoid performance bottlenecks.\n   *\n   * @function ModifierFn\n   * @argument {dataObject} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {dataObject} The data object, properly modified\n   */\n\n  /**\n   * Modifiers are plugins used to alter the behavior of your poppers.<br />\n   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n   * needed by the library.\n   *\n   * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n   * All the other properties are configurations that could be tweaked.\n   * @namespace modifiers\n   */\n  var modifiers = {\n    /**\n     * Modifier used to shift the popper on the start or end of its reference\n     * element.<br />\n     * It will read the variation of the `placement` property.<br />\n     * It can be one either `-end` or `-start`.\n     * @memberof modifiers\n     * @inner\n     */\n    shift: {\n      /** @prop {number} order=100 - Index used to define the order of execution */\n      order: 100,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: shift\n    },\n\n    /**\n     * The `offset` modifier can shift your popper on both its axis.\n     *\n     * It accepts the following units:\n     * - `px` or unit-less, interpreted as pixels\n     * - `%` or `%r`, percentage relative to the length of the reference element\n     * - `%p`, percentage relative to the length of the popper element\n     * - `vw`, CSS viewport width unit\n     * - `vh`, CSS viewport height unit\n     *\n     * For length is intended the main axis relative to the placement of the popper.<br />\n     * This means that if the placement is `top` or `bottom`, the length will be the\n     * `width`. In case of `left` or `right`, it will be the `height`.\n     *\n     * You can provide a single value (as `Number` or `String`), or a pair of values\n     * as `String` divided by a comma or one (or more) white spaces.<br />\n     * The latter is a deprecated method because it leads to confusion and will be\n     * removed in v2.<br />\n     * Additionally, it accepts additions and subtractions between different units.\n     * Note that multiplications and divisions aren't supported.\n     *\n     * Valid examples are:\n     * ```\n     * 10\n     * '10%'\n     * '10, 10'\n     * '10%, 10'\n     * '10 + 10%'\n     * '10 - 5vh + 3%'\n     * '-10px + 5vh, 5px - 6%'\n     * ```\n     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    offset: {\n      /** @prop {number} order=200 - Index used to define the order of execution */\n      order: 200,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: offset,\n      /** @prop {Number|String} offset=0\n       * The offset value as described in the modifier description\n       */\n      offset: 0\n    },\n\n    /**\n     * Modifier used to prevent the popper from being positioned outside the boundary.\n     *\n     * A scenario exists where the reference itself is not within the boundaries.<br />\n     * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n     * In this case we need to decide whether the popper should either:\n     *\n     * - detach from the reference and remain \"trapped\" in the boundaries, or\n     * - if it should ignore the boundary and \"escape with its reference\"\n     *\n     * When `escapeWithReference` is set to`true` and reference is completely\n     * outside its boundaries, the popper will overflow (or completely leave)\n     * the boundaries in order to remain attached to the edge of the reference.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    preventOverflow: {\n      /** @prop {number} order=300 - Index used to define the order of execution */\n      order: 300,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: preventOverflow,\n      /**\n       * @prop {Array} [priority=['left','right','top','bottom']]\n       * Popper will try to prevent overflow following these priorities by default,\n       * then, it could overflow on the left and on top of the `boundariesElement`\n       */\n      priority: ['left', 'right', 'top', 'bottom'],\n      /**\n       * @prop {number} padding=5\n       * Amount of pixel used to define a minimum distance between the boundaries\n       * and the popper. This makes sure the popper always has a little padding\n       * between the edges of its container\n       */\n      padding: 5,\n      /**\n       * @prop {String|HTMLElement} boundariesElement='scrollParent'\n       * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n       * `viewport` or any DOM element.\n       */\n      boundariesElement: 'scrollParent'\n    },\n\n    /**\n     * Modifier used to make sure the reference and its popper stay near each other\n     * without leaving any gap between the two. Especially useful when the arrow is\n     * enabled and you want to ensure that it points to its reference element.\n     * It cares only about the first axis. You can still have poppers with margin\n     * between the popper and its reference element.\n     * @memberof modifiers\n     * @inner\n     */\n    keepTogether: {\n      /** @prop {number} order=400 - Index used to define the order of execution */\n      order: 400,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: keepTogether\n    },\n\n    /**\n     * This modifier is used to move the `arrowElement` of the popper to make\n     * sure it is positioned between the reference element and its popper element.\n     * It will read the outer size of the `arrowElement` node to detect how many\n     * pixels of conjunction are needed.\n     *\n     * It has no effect if no `arrowElement` is provided.\n     * @memberof modifiers\n     * @inner\n     */\n    arrow: {\n      /** @prop {number} order=500 - Index used to define the order of execution */\n      order: 500,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: arrow,\n      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n      element: '[x-arrow]'\n    },\n\n    /**\n     * Modifier used to flip the popper's placement when it starts to overlap its\n     * reference element.\n     *\n     * Requires the `preventOverflow` modifier before it in order to work.\n     *\n     * **NOTE:** this modifier will interrupt the current update cycle and will\n     * restart it if it detects the need to flip the placement.\n     * @memberof modifiers\n     * @inner\n     */\n    flip: {\n      /** @prop {number} order=600 - Index used to define the order of execution */\n      order: 600,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: flip,\n      /**\n       * @prop {String|Array} behavior='flip'\n       * The behavior used to change the popper's placement. It can be one of\n       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n       * placements (with optional variations)\n       */\n      behavior: 'flip',\n      /**\n       * @prop {number} padding=5\n       * The popper will flip if it hits the edges of the `boundariesElement`\n       */\n      padding: 5,\n      /**\n       * @prop {String|HTMLElement} boundariesElement='viewport'\n       * The element which will define the boundaries of the popper position.\n       * The popper will never be placed outside of the defined boundaries\n       * (except if `keepTogether` is enabled)\n       */\n      boundariesElement: 'viewport',\n      /**\n       * @prop {Boolean} flipVariations=false\n       * The popper will switch placement variation between `-start` and `-end` when\n       * the reference element overlaps its boundaries.\n       *\n       * The original placement should have a set variation.\n       */\n      flipVariations: false,\n      /**\n       * @prop {Boolean} flipVariationsByContent=false\n       * The popper will switch placement variation between `-start` and `-end` when\n       * the popper element overlaps its reference boundaries.\n       *\n       * The original placement should have a set variation.\n       */\n      flipVariationsByContent: false\n    },\n\n    /**\n     * Modifier used to make the popper flow toward the inner of the reference element.\n     * By default, when this modifier is disabled, the popper will be placed outside\n     * the reference element.\n     * @memberof modifiers\n     * @inner\n     */\n    inner: {\n      /** @prop {number} order=700 - Index used to define the order of execution */\n      order: 700,\n      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n      enabled: false,\n      /** @prop {ModifierFn} */\n      fn: inner\n    },\n\n    /**\n     * Modifier used to hide the popper when its reference element is outside of the\n     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n     * be used to hide with a CSS selector the popper when its reference is\n     * out of boundaries.\n     *\n     * Requires the `preventOverflow` modifier before it in order to work.\n     * @memberof modifiers\n     * @inner\n     */\n    hide: {\n      /** @prop {number} order=800 - Index used to define the order of execution */\n      order: 800,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: hide\n    },\n\n    /**\n     * Computes the style that will be applied to the popper element to gets\n     * properly positioned.\n     *\n     * Note that this modifier will not touch the DOM, it just prepares the styles\n     * so that `applyStyle` modifier can apply it. This separation is useful\n     * in case you need to replace `applyStyle` with a custom implementation.\n     *\n     * This modifier has `850` as `order` value to maintain backward compatibility\n     * with previous versions of Popper.js. Expect the modifiers ordering method\n     * to change in future major versions of the library.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    computeStyle: {\n      /** @prop {number} order=850 - Index used to define the order of execution */\n      order: 850,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: computeStyle,\n      /**\n       * @prop {Boolean} gpuAcceleration=true\n       * If true, it uses the CSS 3D transformation to position the popper.\n       * Otherwise, it will use the `top` and `left` properties\n       */\n      gpuAcceleration: true,\n      /**\n       * @prop {string} [x='bottom']\n       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n       * Change this if your popper should grow in a direction different from `bottom`\n       */\n      x: 'bottom',\n      /**\n       * @prop {string} [x='left']\n       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n       * Change this if your popper should grow in a direction different from `right`\n       */\n      y: 'right'\n    },\n\n    /**\n     * Applies the computed styles to the popper element.\n     *\n     * All the DOM manipulations are limited to this modifier. This is useful in case\n     * you want to integrate Popper.js inside a framework or view library and you\n     * want to delegate all the DOM manipulations to it.\n     *\n     * Note that if you disable this modifier, you must make sure the popper element\n     * has its position set to `absolute` before Popper.js can do its work!\n     *\n     * Just disable this modifier and define your own to achieve the desired effect.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    applyStyle: {\n      /** @prop {number} order=900 - Index used to define the order of execution */\n      order: 900,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: applyStyle,\n      /** @prop {Function} */\n      onLoad: applyStyleOnLoad,\n      /**\n       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n       * @prop {Boolean} gpuAcceleration=true\n       * If true, it uses the CSS 3D transformation to position the popper.\n       * Otherwise, it will use the `top` and `left` properties\n       */\n      gpuAcceleration: undefined\n    }\n  };\n\n  /**\n   * The `dataObject` is an object containing all the information used by Popper.js.\n   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n   * @name dataObject\n   * @property {Object} data.instance The Popper.js instance\n   * @property {String} data.placement Placement applied to popper\n   * @property {String} data.originalPlacement Placement originally defined on init\n   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n   * @property {Object} data.boundaries Offsets of the popper boundaries\n   * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n   */\n\n  /**\n   * Default options provided to Popper.js constructor.<br />\n   * These can be overridden using the `options` argument of Popper.js.<br />\n   * To override an option, simply pass an object with the same\n   * structure of the `options` object, as the 3rd argument. For example:\n   * ```\n   * new Popper(ref, pop, {\n   *   modifiers: {\n   *     preventOverflow: { enabled: false }\n   *   }\n   * })\n   * ```\n   * @type {Object}\n   * @static\n   * @memberof Popper\n   */\n  var Defaults = {\n    /**\n     * Popper's placement.\n     * @prop {Popper.placements} placement='bottom'\n     */\n    placement: 'bottom',\n\n    /**\n     * Set this to true if you want popper to position it self in 'fixed' mode\n     * @prop {Boolean} positionFixed=false\n     */\n    positionFixed: false,\n\n    /**\n     * Whether events (resize, scroll) are initially enabled.\n     * @prop {Boolean} eventsEnabled=true\n     */\n    eventsEnabled: true,\n\n    /**\n     * Set to true if you want to automatically remove the popper when\n     * you call the `destroy` method.\n     * @prop {Boolean} removeOnDestroy=false\n     */\n    removeOnDestroy: false,\n\n    /**\n     * Callback called when the popper is created.<br />\n     * By default, it is set to no-op.<br />\n     * Access Popper.js instance with `data.instance`.\n     * @prop {onCreate}\n     */\n    onCreate: function onCreate() {},\n\n    /**\n     * Callback called when the popper is updated. This callback is not called\n     * on the initialization/creation of the popper, but only on subsequent\n     * updates.<br />\n     * By default, it is set to no-op.<br />\n     * Access Popper.js instance with `data.instance`.\n     * @prop {onUpdate}\n     */\n    onUpdate: function onUpdate() {},\n\n    /**\n     * List of modifiers used to modify the offsets before they are applied to the popper.\n     * They provide most of the functionalities of Popper.js.\n     * @prop {modifiers}\n     */\n    modifiers: modifiers\n  };\n\n  /**\n   * @callback onCreate\n   * @param {dataObject} data\n   */\n\n  /**\n   * @callback onUpdate\n   * @param {dataObject} data\n   */\n\n  // Utils\n  // Methods\n  var Popper = function () {\n    /**\n     * Creates a new Popper.js instance.\n     * @class Popper\n     * @param {Element|referenceObject} reference - The reference element used to position the popper\n     * @param {Element} popper - The HTML / XML element used as the popper\n     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n     * @return {Object} instance - The generated Popper.js instance\n     */\n    function Popper(reference, popper) {\n      var _this = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      classCallCheck(this, Popper);\n\n      this.scheduleUpdate = function () {\n        return requestAnimationFrame(_this.update);\n      };\n\n      // make update() debounced, so that it only runs at most once-per-tick\n      this.update = debounce(this.update.bind(this));\n\n      // with {} we create a new object with the options inside it\n      this.options = _extends({}, Popper.Defaults, options);\n\n      // init state\n      this.state = {\n        isDestroyed: false,\n        isCreated: false,\n        scrollParents: []\n      };\n\n      // get reference and popper elements (allow jQuery wrappers)\n      this.reference = reference && reference.jquery ? reference[0] : reference;\n      this.popper = popper && popper.jquery ? popper[0] : popper;\n\n      // Deep merge modifiers options\n      this.options.modifiers = {};\n      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n      });\n\n      // Refactoring modifiers' list (Object => Array)\n      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n        return _extends({\n          name: name\n        }, _this.options.modifiers[name]);\n      })\n      // sort the modifiers by order\n      .sort(function (a, b) {\n        return a.order - b.order;\n      });\n\n      // modifiers have the ability to execute arbitrary code when Popper.js get inited\n      // such code is executed in the same order of its modifier\n      // they could add new properties to their options configuration\n      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n      this.modifiers.forEach(function (modifierOptions) {\n        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n        }\n      });\n\n      // fire the first update to position the popper in the right place\n      this.update();\n\n      var eventsEnabled = this.options.eventsEnabled;\n      if (eventsEnabled) {\n        // setup event listeners, they will take care of update the position in specific situations\n        this.enableEventListeners();\n      }\n\n      this.state.eventsEnabled = eventsEnabled;\n    }\n\n    // We can't use class properties because they don't get listed in the\n    // class prototype and break stuff like Sinon stubs\n\n\n    createClass(Popper, [{\n      key: 'update',\n      value: function update$$1() {\n        return update.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy$$1() {\n        return destroy.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function enableEventListeners$$1() {\n        return enableEventListeners.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function disableEventListeners$$1() {\n        return disableEventListeners.call(this);\n      }\n\n      /**\n       * Schedules an update. It will run on the next UI update available.\n       * @method scheduleUpdate\n       * @memberof Popper\n       */\n\n\n      /**\n       * Collection of utilities useful when writing custom modifiers.\n       * Starting from version 1.7, this method is available only if you\n       * include `popper-utils.js` before `popper.js`.\n       *\n       * **DEPRECATION**: This way to access PopperUtils is deprecated\n       * and will be removed in v2! Use the PopperUtils module directly instead.\n       * Due to the high instability of the methods contained in Utils, we can't\n       * guarantee them to follow semver. Use them at your own risk!\n       * @static\n       * @private\n       * @type {Object}\n       * @deprecated since version 1.8\n       * @member Utils\n       * @memberof Popper\n       */\n\n    }]);\n    return Popper;\n  }();\n\n  /**\n   * The `referenceObject` is an object that provides an interface compatible with Popper.js\n   * and lets you use it as replacement of a real DOM node.<br />\n   * You can use this method to position a popper relatively to a set of coordinates\n   * in case you don't have a DOM node to use as reference.\n   *\n   * ```\n   * new Popper(referenceObject, popperNode);\n   * ```\n   *\n   * NB: This feature isn't supported in Internet Explorer 10.\n   * @name referenceObject\n   * @property {Function} data.getBoundingClientRect\n   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n   * @property {number} data.clientWidth\n   * An ES6 getter that will return the width of the virtual reference element.\n   * @property {number} data.clientHeight\n   * An ES6 getter that will return the height of the virtual reference element.\n   */\n\n\n  Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n  Popper.placements = placements;\n  Popper.Defaults = Defaults;\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$4 = 'dropdown';\n  var VERSION$4 = '5.0.0-alpha1';\n  var DATA_KEY$4 = 'bs.dropdown';\n  var EVENT_KEY$4 = \".\" + DATA_KEY$4;\n  var DATA_API_KEY$4 = '.data-api';\n  var ESCAPE_KEY = 'Escape';\n  var SPACE_KEY = 'Space';\n  var TAB_KEY = 'Tab';\n  var ARROW_UP_KEY = 'ArrowUp';\n  var ARROW_DOWN_KEY = 'ArrowDown';\n  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEY + \"|\" + ARROW_DOWN_KEY + \"|\" + ESCAPE_KEY);\n  var EVENT_HIDE$1 = \"hide\" + EVENT_KEY$4;\n  var EVENT_HIDDEN$1 = \"hidden\" + EVENT_KEY$4;\n  var EVENT_SHOW$1 = \"show\" + EVENT_KEY$4;\n  var EVENT_SHOWN$1 = \"shown\" + EVENT_KEY$4;\n  var EVENT_CLICK = \"click\" + EVENT_KEY$4;\n  var EVENT_CLICK_DATA_API$4 = \"click\" + EVENT_KEY$4 + DATA_API_KEY$4;\n  var EVENT_KEYDOWN_DATA_API = \"keydown\" + EVENT_KEY$4 + DATA_API_KEY$4;\n  var EVENT_KEYUP_DATA_API = \"keyup\" + EVENT_KEY$4 + DATA_API_KEY$4;\n  var CLASS_NAME_DISABLED = 'disabled';\n  var CLASS_NAME_SHOW$1 = 'show';\n  var CLASS_NAME_DROPUP = 'dropup';\n  var CLASS_NAME_DROPRIGHT = 'dropright';\n  var CLASS_NAME_DROPLEFT = 'dropleft';\n  var CLASS_NAME_MENURIGHT = 'dropdown-menu-right';\n  var CLASS_NAME_NAVBAR = 'navbar';\n  var CLASS_NAME_POSITION_STATIC = 'position-static';\n  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle=\"dropdown\"]';\n  var SELECTOR_FORM_CHILD = '.dropdown form';\n  var SELECTOR_MENU = '.dropdown-menu';\n  var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  var PLACEMENT_TOP = 'top-start';\n  var PLACEMENT_TOPEND = 'top-end';\n  var PLACEMENT_BOTTOM = 'bottom-start';\n  var PLACEMENT_BOTTOMEND = 'bottom-end';\n  var PLACEMENT_RIGHT = 'right-start';\n  var PLACEMENT_LEFT = 'left-start';\n  var Default$2 = {\n    offset: 0,\n    flip: true,\n    boundary: 'scrollParent',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null\n  };\n  var DefaultType$2 = {\n    offset: '(number|string|function)',\n    flip: 'boolean',\n    boundary: '(string|element)',\n    reference: '(string|element)',\n    display: 'string',\n    popperConfig: '(null|object)'\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Dropdown = /*#__PURE__*/function () {\n    function Dropdown(element, config) {\n      this._element = element;\n      this._popper = null;\n      this._config = this._getConfig(config);\n      this._menu = this._getMenuElement();\n      this._inNavbar = this._detectNavbar();\n\n      this._addEventListeners();\n\n      Data.setData(element, DATA_KEY$4, this);\n    } // Getters\n\n\n    var _proto = Dropdown.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED)) {\n        return;\n      }\n\n      var isActive = this._element.classList.contains(CLASS_NAME_SHOW$1);\n\n      Dropdown.clearMenus();\n\n      if (isActive) {\n        return;\n      }\n\n      this.show();\n    };\n\n    _proto.show = function show() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED) || this._menu.classList.contains(CLASS_NAME_SHOW$1)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this._element);\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, relatedTarget);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      } // Disable totally Popper.js for Dropdown in Navbar\n\n\n      if (!this._inNavbar) {\n        if (typeof Popper === 'undefined') {\n          throw new TypeError('Bootstrap\\'s dropdowns require Popper.js (https://popper.js.org)');\n        }\n\n        var referenceElement = this._element;\n\n        if (this._config.reference === 'parent') {\n          referenceElement = parent;\n        } else if (isElement(this._config.reference)) {\n          referenceElement = this._config.reference; // Check if it's jQuery element\n\n          if (typeof this._config.reference.jquery !== 'undefined') {\n            referenceElement = this._config.reference[0];\n          }\n        } // If boundary is not `scrollParent`, then set position to `static`\n        // to allow the menu to \"escape\" the scroll parent's boundaries\n        // https://github.com/twbs/bootstrap/issues/24251\n\n\n        if (this._config.boundary !== 'scrollParent') {\n          parent.classList.add(CLASS_NAME_POSITION_STATIC);\n        }\n\n        this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n        var _ref;\n\n        (_ref = []).concat.apply(_ref, document.body.children).forEach(function (elem) {\n          return EventHandler.on(elem, 'mouseover', null, noop());\n        });\n      }\n\n      this._element.focus();\n\n      this._element.setAttribute('aria-expanded', true);\n\n      Manipulator.toggleClass(this._menu, CLASS_NAME_SHOW$1);\n      Manipulator.toggleClass(this._element, CLASS_NAME_SHOW$1);\n      EventHandler.trigger(parent, EVENT_SHOWN$1, relatedTarget);\n    };\n\n    _proto.hide = function hide() {\n      if (this._element.disabled || this._element.classList.contains(CLASS_NAME_DISABLED) || !this._menu.classList.contains(CLASS_NAME_SHOW$1)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this._element);\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var hideEvent = EventHandler.trigger(parent, EVENT_HIDE$1, relatedTarget);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      Manipulator.toggleClass(this._menu, CLASS_NAME_SHOW$1);\n      Manipulator.toggleClass(this._element, CLASS_NAME_SHOW$1);\n      EventHandler.trigger(parent, EVENT_HIDDEN$1, relatedTarget);\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$4);\n      EventHandler.off(this._element, EVENT_KEY$4);\n      this._element = null;\n      this._menu = null;\n\n      if (this._popper) {\n        this._popper.destroy();\n\n        this._popper = null;\n      }\n    };\n\n    _proto.update = function update() {\n      this._inNavbar = this._detectNavbar();\n\n      if (this._popper) {\n        this._popper.scheduleUpdate();\n      }\n    } // Private\n    ;\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this = this;\n\n      EventHandler.on(this._element, EVENT_CLICK, function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _this.toggle();\n      });\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);\n      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._getMenuElement = function _getMenuElement() {\n      return SelectorEngine.next(this._element, SELECTOR_MENU)[0];\n    };\n\n    _proto._getPlacement = function _getPlacement() {\n      var parentDropdown = this._element.parentNode;\n      var placement = PLACEMENT_BOTTOM; // Handle dropup\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n        placement = PLACEMENT_TOP;\n\n        if (this._menu.classList.contains(CLASS_NAME_MENURIGHT)) {\n          placement = PLACEMENT_TOPEND;\n        }\n      } else if (parentDropdown.classList.contains(CLASS_NAME_DROPRIGHT)) {\n        placement = PLACEMENT_RIGHT;\n      } else if (parentDropdown.classList.contains(CLASS_NAME_DROPLEFT)) {\n        placement = PLACEMENT_LEFT;\n      } else if (this._menu.classList.contains(CLASS_NAME_MENURIGHT)) {\n        placement = PLACEMENT_BOTTOMEND;\n      }\n\n      return placement;\n    };\n\n    _proto._detectNavbar = function _detectNavbar() {\n      return Boolean(this._element.closest(\".\" + CLASS_NAME_NAVBAR));\n    };\n\n    _proto._getOffset = function _getOffset() {\n      var _this2 = this;\n\n      var offset = {};\n\n      if (typeof this._config.offset === 'function') {\n        offset.fn = function (data) {\n          data.offsets = _objectSpread2(_objectSpread2({}, data.offsets), _this2._config.offset(data.offsets, _this2._element) || {});\n          return data;\n        };\n      } else {\n        offset.offset = this._config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getPopperConfig = function _getPopperConfig() {\n      var popperConfig = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      }; // Disable Popper.js if we have a static display\n\n      if (this._config.display === 'static') {\n        popperConfig.modifiers.applyStyle = {\n          enabled: false\n        };\n      }\n\n      return _objectSpread2(_objectSpread2({}, popperConfig), this._config.popperConfig);\n    } // Static\n    ;\n\n    Dropdown.dropdownInterface = function dropdownInterface(element, config) {\n      var data = Data.getData(element, DATA_KEY$4);\n\n      var _config = typeof config === 'object' ? config : null;\n\n      if (!data) {\n        data = new Dropdown(element, _config);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n        }\n\n        data[config]();\n      }\n    };\n\n    Dropdown.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        Dropdown.dropdownInterface(this, config);\n      });\n    };\n\n    Dropdown.clearMenus = function clearMenus(event) {\n      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY)) {\n        return;\n      }\n\n      var toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$2);\n\n      for (var i = 0, len = toggles.length; i < len; i++) {\n        var parent = Dropdown.getParentFromElement(toggles[i]);\n        var context = Data.getData(toggles[i], DATA_KEY$4);\n        var relatedTarget = {\n          relatedTarget: toggles[i]\n        };\n\n        if (event && event.type === 'click') {\n          relatedTarget.clickEvent = event;\n        }\n\n        if (!context) {\n          continue;\n        }\n\n        var dropdownMenu = context._menu;\n\n        if (!toggles[i].classList.contains(CLASS_NAME_SHOW$1)) {\n          continue;\n        }\n\n        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.key === TAB_KEY) && dropdownMenu.contains(event.target)) {\n          continue;\n        }\n\n        var hideEvent = EventHandler.trigger(parent, EVENT_HIDE$1, relatedTarget);\n\n        if (hideEvent.defaultPrevented) {\n          continue;\n        } // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref2;\n\n          (_ref2 = []).concat.apply(_ref2, document.body.children).forEach(function (elem) {\n            return EventHandler.off(elem, 'mouseover', null, noop());\n          });\n        }\n\n        toggles[i].setAttribute('aria-expanded', 'false');\n\n        if (context._popper) {\n          context._popper.destroy();\n        }\n\n        dropdownMenu.classList.remove(CLASS_NAME_SHOW$1);\n        toggles[i].classList.remove(CLASS_NAME_SHOW$1);\n        EventHandler.trigger(parent, EVENT_HIDDEN$1, relatedTarget);\n      }\n    };\n\n    Dropdown.getParentFromElement = function getParentFromElement(element) {\n      return getElementFromSelector(element) || element.parentNode;\n    };\n\n    Dropdown.dataApiKeydownHandler = function dataApiKeydownHandler(event) {\n      // If not input/textarea:\n      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n      // If input/textarea:\n      //  - If space key => not a dropdown command\n      //  - If key is other than escape\n      //    - If key is not up or down => not a dropdown command\n      //    - If trigger inside the menu => not a dropdown command\n      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (this.disabled || this.classList.contains(CLASS_NAME_DISABLED)) {\n        return;\n      }\n\n      var parent = Dropdown.getParentFromElement(this);\n      var isActive = this.classList.contains(CLASS_NAME_SHOW$1);\n\n      if (event.key === ESCAPE_KEY) {\n        var button = this.matches(SELECTOR_DATA_TOGGLE$2) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$2)[0];\n        button.focus();\n        Dropdown.clearMenus();\n        return;\n      }\n\n      if (!isActive || event.key === SPACE_KEY) {\n        Dropdown.clearMenus();\n        return;\n      }\n\n      var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, parent).filter(isVisible);\n\n      if (!items.length) {\n        return;\n      }\n\n      var index = items.indexOf(event.target);\n\n      if (event.key === ARROW_UP_KEY && index > 0) {\n        // Up\n        index--;\n      }\n\n      if (event.key === ARROW_DOWN_KEY && index < items.length - 1) {\n        // Down\n        index++;\n      } // index is -1 if the first keydown is an ArrowUp\n\n\n      index = index === -1 ? 0 : index;\n      items[index].focus();\n    };\n\n    Dropdown.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$4);\n    };\n\n    _createClass(Dropdown, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$4;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$2;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$2;\n      }\n    }]);\n\n    return Dropdown;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    Dropdown.dropdownInterface(this, 'toggle');\n  });\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_FORM_CHILD, function (e) {\n    return e.stopPropagation();\n  });\n  var $$5 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .dropdown to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$5) {\n    var JQUERY_NO_CONFLICT$4 = $$5.fn[NAME$4];\n    $$5.fn[NAME$4] = Dropdown.jQueryInterface;\n    $$5.fn[NAME$4].Constructor = Dropdown;\n\n    $$5.fn[NAME$4].noConflict = function () {\n      $$5.fn[NAME$4] = JQUERY_NO_CONFLICT$4;\n      return Dropdown.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$5 = 'modal';\n  var VERSION$5 = '5.0.0-alpha1';\n  var DATA_KEY$5 = 'bs.modal';\n  var EVENT_KEY$5 = \".\" + DATA_KEY$5;\n  var DATA_API_KEY$5 = '.data-api';\n  var ESCAPE_KEY$1 = 'Escape';\n  var Default$3 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: true\n  };\n  var DefaultType$3 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean',\n    show: 'boolean'\n  };\n  var EVENT_HIDE$2 = \"hide\" + EVENT_KEY$5;\n  var EVENT_HIDE_PREVENTED = \"hidePrevented\" + EVENT_KEY$5;\n  var EVENT_HIDDEN$2 = \"hidden\" + EVENT_KEY$5;\n  var EVENT_SHOW$2 = \"show\" + EVENT_KEY$5;\n  var EVENT_SHOWN$2 = \"shown\" + EVENT_KEY$5;\n  var EVENT_FOCUSIN = \"focusin\" + EVENT_KEY$5;\n  var EVENT_RESIZE = \"resize\" + EVENT_KEY$5;\n  var EVENT_CLICK_DISMISS = \"click.dismiss\" + EVENT_KEY$5;\n  var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\" + EVENT_KEY$5;\n  var EVENT_MOUSEUP_DISMISS = \"mouseup.dismiss\" + EVENT_KEY$5;\n  var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\" + EVENT_KEY$5;\n  var EVENT_CLICK_DATA_API$5 = \"click\" + EVENT_KEY$5 + DATA_API_KEY$5;\n  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';\n  var CLASS_NAME_BACKDROP = 'modal-backdrop';\n  var CLASS_NAME_OPEN = 'modal-open';\n  var CLASS_NAME_FADE = 'fade';\n  var CLASS_NAME_SHOW$2 = 'show';\n  var CLASS_NAME_STATIC = 'modal-static';\n  var SELECTOR_DIALOG = '.modal-dialog';\n  var SELECTOR_MODAL_BODY = '.modal-body';\n  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle=\"modal\"]';\n  var SELECTOR_DATA_DISMISS = '[data-dismiss=\"modal\"]';\n  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  var SELECTOR_STICKY_CONTENT = '.sticky-top';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(element, config) {\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, element);\n      this._backdrop = null;\n      this._isShown = false;\n      this._isBodyOverflowing = false;\n      this._ignoreBackdropClick = false;\n      this._isTransitioning = false;\n      this._scrollbarWidth = 0;\n      Data.setData(element, DATA_KEY$5, this);\n    } // Getters\n\n\n    var _proto = Modal.prototype;\n\n    // Public\n    _proto.toggle = function toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    };\n\n    _proto.show = function show(relatedTarget) {\n      var _this = this;\n\n      if (this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      if (this._element.classList.contains(CLASS_NAME_FADE)) {\n        this._isTransitioning = true;\n      }\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n        relatedTarget: relatedTarget\n      });\n\n      if (this._isShown || showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n\n      this._checkScrollbar();\n\n      this._setScrollbar();\n\n      this._adjustDialog();\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {\n        return _this.hide(event);\n      });\n      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {\n        EventHandler.one(_this._element, EVENT_MOUSEUP_DISMISS, function (event) {\n          if (event.target === _this._element) {\n            _this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(function () {\n        return _this._showElement(relatedTarget);\n      });\n    };\n\n    _proto.hide = function hide(event) {\n      var _this2 = this;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = false;\n\n      var transition = this._element.classList.contains(CLASS_NAME_FADE);\n\n      if (transition) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.off(document, EVENT_FOCUSIN);\n\n      this._element.classList.remove(CLASS_NAME_SHOW$2);\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n      if (transition) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, function (event) {\n          return _this2._hideModal(event);\n        });\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        this._hideModal();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      [window, this._element, this._dialog].forEach(function (htmlElement) {\n        return EventHandler.off(htmlElement, EVENT_KEY$5);\n      });\n      /**\n       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`\n       * Do not move `document` in `htmlElements` array\n       * It will remove `EVENT_CLICK_DATA_API` event that should remain\n       */\n\n      EventHandler.off(document, EVENT_FOCUSIN);\n      Data.removeData(this._element, DATA_KEY$5);\n      this._config = null;\n      this._element = null;\n      this._dialog = null;\n      this._backdrop = null;\n      this._isShown = null;\n      this._isBodyOverflowing = null;\n      this._ignoreBackdropClick = null;\n      this._isTransitioning = null;\n      this._scrollbarWidth = null;\n    };\n\n    _proto.handleUpdate = function handleUpdate() {\n      this._adjustDialog();\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$3), config);\n      typeCheckConfig(NAME$5, config, DefaultType$3);\n      return config;\n    };\n\n    _proto._showElement = function _showElement(relatedTarget) {\n      var _this3 = this;\n\n      var transition = this._element.classList.contains(CLASS_NAME_FADE);\n\n      var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.appendChild(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.scrollTop = 0;\n\n      if (modalBody) {\n        modalBody.scrollTop = 0;\n      }\n\n      if (transition) {\n        reflow(this._element);\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW$2);\n\n      if (this._config.focus) {\n        this._enforceFocus();\n      }\n\n      var transitionComplete = function transitionComplete() {\n        if (_this3._config.focus) {\n          _this3._element.focus();\n        }\n\n        _this3._isTransitioning = false;\n        EventHandler.trigger(_this3._element, EVENT_SHOWN$2, {\n          relatedTarget: relatedTarget\n        });\n      };\n\n      if (transition) {\n        var transitionDuration = getTransitionDurationFromElement(this._dialog);\n        EventHandler.one(this._dialog, TRANSITION_END, transitionComplete);\n        emulateTransitionEnd(this._dialog, transitionDuration);\n      } else {\n        transitionComplete();\n      }\n    };\n\n    _proto._enforceFocus = function _enforceFocus() {\n      var _this4 = this;\n\n      EventHandler.off(document, EVENT_FOCUSIN); // guard against infinite focus loop\n\n      EventHandler.on(document, EVENT_FOCUSIN, function (event) {\n        if (document !== event.target && _this4._element !== event.target && !_this4._element.contains(event.target)) {\n          _this4._element.focus();\n        }\n      });\n    };\n\n    _proto._setEscapeEvent = function _setEscapeEvent() {\n      var _this5 = this;\n\n      if (this._isShown) {\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {\n          if (_this5._config.keyboard && event.key === ESCAPE_KEY$1) {\n            event.preventDefault();\n\n            _this5.hide();\n          } else if (!_this5._config.keyboard && event.key === ESCAPE_KEY$1) {\n            _this5._triggerBackdropTransition();\n          }\n        });\n      } else {\n        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS);\n      }\n    };\n\n    _proto._setResizeEvent = function _setResizeEvent() {\n      var _this6 = this;\n\n      if (this._isShown) {\n        EventHandler.on(window, EVENT_RESIZE, function () {\n          return _this6._adjustDialog();\n        });\n      } else {\n        EventHandler.off(window, EVENT_RESIZE);\n      }\n    };\n\n    _proto._hideModal = function _hideModal() {\n      var _this7 = this;\n\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._isTransitioning = false;\n\n      this._showBackdrop(function () {\n        document.body.classList.remove(CLASS_NAME_OPEN);\n\n        _this7._resetAdjustments();\n\n        _this7._resetScrollbar();\n\n        EventHandler.trigger(_this7._element, EVENT_HIDDEN$2);\n      });\n    };\n\n    _proto._removeBackdrop = function _removeBackdrop() {\n      this._backdrop.parentNode.removeChild(this._backdrop);\n\n      this._backdrop = null;\n    };\n\n    _proto._showBackdrop = function _showBackdrop(callback) {\n      var _this8 = this;\n\n      var animate = this._element.classList.contains(CLASS_NAME_FADE) ? CLASS_NAME_FADE : '';\n\n      if (this._isShown && this._config.backdrop) {\n        this._backdrop = document.createElement('div');\n        this._backdrop.className = CLASS_NAME_BACKDROP;\n\n        if (animate) {\n          this._backdrop.classList.add(animate);\n        }\n\n        document.body.appendChild(this._backdrop);\n        EventHandler.on(this._element, EVENT_CLICK_DISMISS, function (event) {\n          if (_this8._ignoreBackdropClick) {\n            _this8._ignoreBackdropClick = false;\n            return;\n          }\n\n          if (event.target !== event.currentTarget) {\n            return;\n          }\n\n          _this8._triggerBackdropTransition();\n        });\n\n        if (animate) {\n          reflow(this._backdrop);\n        }\n\n        this._backdrop.classList.add(CLASS_NAME_SHOW$2);\n\n        if (!animate) {\n          callback();\n          return;\n        }\n\n        var backdropTransitionDuration = getTransitionDurationFromElement(this._backdrop);\n        EventHandler.one(this._backdrop, TRANSITION_END, callback);\n        emulateTransitionEnd(this._backdrop, backdropTransitionDuration);\n      } else if (!this._isShown && this._backdrop) {\n        this._backdrop.classList.remove(CLASS_NAME_SHOW$2);\n\n        var callbackRemove = function callbackRemove() {\n          _this8._removeBackdrop();\n\n          callback();\n        };\n\n        if (this._element.classList.contains(CLASS_NAME_FADE)) {\n          var _backdropTransitionDuration = getTransitionDurationFromElement(this._backdrop);\n\n          EventHandler.one(this._backdrop, TRANSITION_END, callbackRemove);\n          emulateTransitionEnd(this._backdrop, _backdropTransitionDuration);\n        } else {\n          callbackRemove();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {\n      var _this9 = this;\n\n      if (this._config.backdrop === 'static') {\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        this._element.classList.add(CLASS_NAME_STATIC);\n\n        var modalTransitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, function () {\n          _this9._element.classList.remove(CLASS_NAME_STATIC);\n        });\n        emulateTransitionEnd(this._element, modalTransitionDuration);\n\n        this._element.focus();\n      } else {\n        this.hide();\n      }\n    } // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n    ;\n\n    _proto._adjustDialog = function _adjustDialog() {\n      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      if (!this._isBodyOverflowing && isModalOverflowing) {\n        this._element.style.paddingLeft = this._scrollbarWidth + \"px\";\n      }\n\n      if (this._isBodyOverflowing && !isModalOverflowing) {\n        this._element.style.paddingRight = this._scrollbarWidth + \"px\";\n      }\n    };\n\n    _proto._resetAdjustments = function _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    };\n\n    _proto._checkScrollbar = function _checkScrollbar() {\n      var rect = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;\n      this._scrollbarWidth = this._getScrollbarWidth();\n    };\n\n    _proto._setScrollbar = function _setScrollbar() {\n      var _this10 = this;\n\n      if (this._isBodyOverflowing) {\n        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n        // Adjust fixed content padding\n        SelectorEngine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {\n          var actualPadding = element.style.paddingRight;\n          var calculatedPadding = window.getComputedStyle(element)['padding-right'];\n          Manipulator.setDataAttribute(element, 'padding-right', actualPadding);\n          element.style.paddingRight = parseFloat(calculatedPadding) + _this10._scrollbarWidth + \"px\";\n        }); // Adjust sticky content margin\n\n        SelectorEngine.find(SELECTOR_STICKY_CONTENT).forEach(function (element) {\n          var actualMargin = element.style.marginRight;\n          var calculatedMargin = window.getComputedStyle(element)['margin-right'];\n          Manipulator.setDataAttribute(element, 'margin-right', actualMargin);\n          element.style.marginRight = parseFloat(calculatedMargin) - _this10._scrollbarWidth + \"px\";\n        }); // Adjust body padding\n\n        var actualPadding = document.body.style.paddingRight;\n        var calculatedPadding = window.getComputedStyle(document.body)['padding-right'];\n        Manipulator.setDataAttribute(document.body, 'padding-right', actualPadding);\n        document.body.style.paddingRight = parseFloat(calculatedPadding) + this._scrollbarWidth + \"px\";\n      }\n\n      document.body.classList.add(CLASS_NAME_OPEN);\n    };\n\n    _proto._resetScrollbar = function _resetScrollbar() {\n      // Restore fixed content padding\n      SelectorEngine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {\n        var padding = Manipulator.getDataAttribute(element, 'padding-right');\n\n        if (typeof padding !== 'undefined') {\n          Manipulator.removeDataAttribute(element, 'padding-right');\n          element.style.paddingRight = padding;\n        }\n      }); // Restore sticky content and navbar-toggler margin\n\n      SelectorEngine.find(\"\" + SELECTOR_STICKY_CONTENT).forEach(function (element) {\n        var margin = Manipulator.getDataAttribute(element, 'margin-right');\n\n        if (typeof margin !== 'undefined') {\n          Manipulator.removeDataAttribute(element, 'margin-right');\n          element.style.marginRight = margin;\n        }\n      }); // Restore body padding\n\n      var padding = Manipulator.getDataAttribute(document.body, 'padding-right');\n\n      if (typeof padding === 'undefined') {\n        document.body.style.paddingRight = '';\n      } else {\n        Manipulator.removeDataAttribute(document.body, 'padding-right');\n        document.body.style.paddingRight = padding;\n      }\n    };\n\n    _proto._getScrollbarWidth = function _getScrollbarWidth() {\n      // thx d.walsh\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;\n      document.body.appendChild(scrollDiv);\n      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return scrollbarWidth;\n    } // Static\n    ;\n\n    Modal.jQueryInterface = function jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$5);\n\n        var _config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$3), Manipulator.getDataAttributes(this)), typeof config === 'object' && config ? config : {});\n\n        if (!data) {\n          data = new Modal(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](relatedTarget);\n        } else if (_config.show) {\n          data.show(relatedTarget);\n        }\n      });\n    };\n\n    Modal.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$5);\n    };\n\n    _createClass(Modal, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$5;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$3;\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$3, function (event) {\n    var _this11 = this;\n\n    var target = getElementFromSelector(this);\n\n    if (this.tagName === 'A' || this.tagName === 'AREA') {\n      event.preventDefault();\n    }\n\n    EventHandler.one(target, EVENT_SHOW$2, function (showEvent) {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      EventHandler.one(target, EVENT_HIDDEN$2, function () {\n        if (isVisible(_this11)) {\n          _this11.focus();\n        }\n      });\n    });\n    var data = Data.getData(target, DATA_KEY$5);\n\n    if (!data) {\n      var config = _objectSpread2(_objectSpread2({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));\n\n      data = new Modal(target, config);\n    }\n\n    data.show(this);\n  });\n  var $$6 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .modal to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$6) {\n    var JQUERY_NO_CONFLICT$5 = $$6.fn[NAME$5];\n    $$6.fn[NAME$5] = Modal.jQueryInterface;\n    $$6.fn[NAME$5].Constructor = Modal;\n\n    $$6.fn[NAME$5].noConflict = function () {\n      $$6.fn[NAME$5] = JQUERY_NO_CONFLICT$5;\n      return Modal.jQueryInterface;\n    };\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  var allowedAttribute = function allowedAttribute(attr, allowedAttributeList) {\n    var attrName = attr.nodeName.toLowerCase();\n\n    if (allowedAttributeList.indexOf(attrName) !== -1) {\n      if (uriAttrs.indexOf(attrName) !== -1) {\n        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));\n      }\n\n      return true;\n    }\n\n    var regExp = allowedAttributeList.filter(function (attrRegex) {\n      return attrRegex instanceof RegExp;\n    }); // Check if a regular expression validates the attribute.\n\n    for (var i = 0, len = regExp.length; i < len; i++) {\n      if (attrName.match(regExp[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var DefaultWhitelist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {\n    var _ref;\n\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    var domParser = new window.DOMParser();\n    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    var whitelistKeys = Object.keys(whiteList);\n\n    var elements = (_ref = []).concat.apply(_ref, createdDocument.body.querySelectorAll('*'));\n\n    var _loop = function _loop(i, len) {\n      var _ref2;\n\n      var el = elements[i];\n      var elName = el.nodeName.toLowerCase();\n\n      if (whitelistKeys.indexOf(elName) === -1) {\n        el.parentNode.removeChild(el);\n        return \"continue\";\n      }\n\n      var attributeList = (_ref2 = []).concat.apply(_ref2, el.attributes);\n\n      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);\n      attributeList.forEach(function (attr) {\n        if (!allowedAttribute(attr, whitelistedAttributes)) {\n          el.removeAttribute(attr.nodeName);\n        }\n      });\n    };\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$6 = 'tooltip';\n  var VERSION$6 = '5.0.0-alpha1';\n  var DATA_KEY$6 = 'bs.tooltip';\n  var EVENT_KEY$6 = \".\" + DATA_KEY$6;\n  var CLASS_PREFIX = 'bs-tooltip';\n  var BSCLS_PREFIX_REGEX = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX + \"\\\\S+\", 'g');\n  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];\n  var DefaultType$4 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(number|string|function)',\n    container: '(string|element|boolean)',\n    fallbackPlacement: '(string|array)',\n    boundary: '(string|element)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    whiteList: 'object',\n    popperConfig: '(null|object)'\n  };\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left'\n  };\n  var Default$4 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: 0,\n    container: false,\n    fallbackPlacement: 'flip',\n    boundary: 'scrollParent',\n    sanitize: true,\n    sanitizeFn: null,\n    whiteList: DefaultWhitelist,\n    popperConfig: null\n  };\n  var Event$1 = {\n    HIDE: \"hide\" + EVENT_KEY$6,\n    HIDDEN: \"hidden\" + EVENT_KEY$6,\n    SHOW: \"show\" + EVENT_KEY$6,\n    SHOWN: \"shown\" + EVENT_KEY$6,\n    INSERTED: \"inserted\" + EVENT_KEY$6,\n    CLICK: \"click\" + EVENT_KEY$6,\n    FOCUSIN: \"focusin\" + EVENT_KEY$6,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$6,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$6,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$6\n  };\n  var CLASS_NAME_FADE$1 = 'fade';\n  var CLASS_NAME_MODAL = 'modal';\n  var CLASS_NAME_SHOW$3 = 'show';\n  var HOVER_STATE_SHOW = 'show';\n  var HOVER_STATE_OUT = 'out';\n  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  var TRIGGER_HOVER = 'hover';\n  var TRIGGER_FOCUS = 'focus';\n  var TRIGGER_CLICK = 'click';\n  var TRIGGER_MANUAL = 'manual';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tooltip = /*#__PURE__*/function () {\n    function Tooltip(element, config) {\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper.js (https://popper.js.org)');\n      } // private\n\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this.element = element;\n      this.config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n\n      Data.setData(element, this.constructor.DATA_KEY, this);\n    } // Getters\n\n\n    var _proto = Tooltip.prototype;\n\n    // Public\n    _proto.enable = function enable() {\n      this._isEnabled = true;\n    };\n\n    _proto.disable = function disable() {\n      this._isEnabled = false;\n    };\n\n    _proto.toggleEnabled = function toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    };\n\n    _proto.toggle = function toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        var dataKey = this.constructor.DATA_KEY;\n        var context = Data.getData(event.target, dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.target, this._getDelegateConfig());\n          Data.setData(event.target, dataKey, context);\n        }\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$3)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      clearTimeout(this._timeout);\n      Data.removeData(this.element, this.constructor.DATA_KEY);\n      EventHandler.off(this.element, this.constructor.EVENT_KEY);\n      EventHandler.off(this.element.closest(\".\" + CLASS_NAME_MODAL), 'hide.bs.modal', this._hideModalHandler);\n\n      if (this.tip) {\n        this.tip.parentNode.removeChild(this.tip);\n      }\n\n      this._isEnabled = null;\n      this._timeout = null;\n      this._hoverState = null;\n      this._activeTrigger = null;\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n      this.element = null;\n      this.config = null;\n      this.tip = null;\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this.element.style.display === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      if (this.isWithContent() && this._isEnabled) {\n        var showEvent = EventHandler.trigger(this.element, this.constructor.Event.SHOW);\n        var shadowRoot = findShadowRoot(this.element);\n        var isInTheDom = shadowRoot === null ? this.element.ownerDocument.documentElement.contains(this.element) : shadowRoot.contains(this.element);\n\n        if (showEvent.defaultPrevented || !isInTheDom) {\n          return;\n        }\n\n        var tip = this.getTipElement();\n        var tipId = getUID(this.constructor.NAME);\n        tip.setAttribute('id', tipId);\n        this.element.setAttribute('aria-describedby', tipId);\n        this.setContent();\n\n        if (this.config.animation) {\n          tip.classList.add(CLASS_NAME_FADE$1);\n        }\n\n        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n\n        var attachment = this._getAttachment(placement);\n\n        this._addAttachmentClass(attachment);\n\n        var container = this._getContainer();\n\n        Data.setData(tip, this.constructor.DATA_KEY, this);\n\n        if (!this.element.ownerDocument.documentElement.contains(this.tip)) {\n          container.appendChild(tip);\n        }\n\n        EventHandler.trigger(this.element, this.constructor.Event.INSERTED);\n        this._popper = new Popper(this.element, tip, this._getPopperConfig(attachment));\n        tip.classList.add(CLASS_NAME_SHOW$3); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref;\n\n          (_ref = []).concat.apply(_ref, document.body.children).forEach(function (element) {\n            EventHandler.on(element, 'mouseover', noop());\n          });\n        }\n\n        var complete = function complete() {\n          if (_this.config.animation) {\n            _this._fixTransition();\n          }\n\n          var prevHoverState = _this._hoverState;\n          _this._hoverState = null;\n          EventHandler.trigger(_this.element, _this.constructor.Event.SHOWN);\n\n          if (prevHoverState === HOVER_STATE_OUT) {\n            _this._leave(null, _this);\n          }\n        };\n\n        if (this.tip.classList.contains(CLASS_NAME_FADE$1)) {\n          var transitionDuration = getTransitionDurationFromElement(this.tip);\n          EventHandler.one(this.tip, TRANSITION_END, complete);\n          emulateTransitionEnd(this.tip, transitionDuration);\n        } else {\n          complete();\n        }\n      }\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      var tip = this.getTipElement();\n\n      var complete = function complete() {\n        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {\n          tip.parentNode.removeChild(tip);\n        }\n\n        _this2._cleanTipClass();\n\n        _this2.element.removeAttribute('aria-describedby');\n\n        EventHandler.trigger(_this2.element, _this2.constructor.Event.HIDDEN);\n\n        _this2._popper.destroy();\n      };\n\n      var hideEvent = EventHandler.trigger(this.element, this.constructor.Event.HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_SHOW$3); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        var _ref2;\n\n        (_ref2 = []).concat.apply(_ref2, document.body.children).forEach(function (element) {\n          return EventHandler.off(element, 'mouseover', noop);\n        });\n      }\n\n      this._activeTrigger[TRIGGER_CLICK] = false;\n      this._activeTrigger[TRIGGER_FOCUS] = false;\n      this._activeTrigger[TRIGGER_HOVER] = false;\n\n      if (this.tip.classList.contains(CLASS_NAME_FADE$1)) {\n        var transitionDuration = getTransitionDurationFromElement(tip);\n        EventHandler.one(tip, TRANSITION_END, complete);\n        emulateTransitionEnd(tip, transitionDuration);\n      } else {\n        complete();\n      }\n\n      this._hoverState = '';\n    };\n\n    _proto.update = function update() {\n      if (this._popper !== null) {\n        this._popper.scheduleUpdate();\n      }\n    } // Protected\n    ;\n\n    _proto.isWithContent = function isWithContent() {\n      return Boolean(this.getTitle());\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      if (this.tip) {\n        return this.tip;\n      }\n\n      var element = document.createElement('div');\n      element.innerHTML = this.config.template;\n      this.tip = element.children[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var tip = this.getTipElement();\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_TOOLTIP_INNER, tip), this.getTitle());\n      tip.classList.remove(CLASS_NAME_FADE$1, CLASS_NAME_SHOW$3);\n    };\n\n    _proto.setElementContent = function setElementContent(element, content) {\n      if (element === null) {\n        return;\n      }\n\n      if (typeof content === 'object' && isElement(content)) {\n        if (content.jquery) {\n          content = content[0];\n        } // content is a DOM node or a jQuery\n\n\n        if (this.config.html) {\n          if (content.parentNode !== element) {\n            element.innerHTML = '';\n            element.appendChild(content);\n          }\n        } else {\n          element.textContent = content.textContent;\n        }\n\n        return;\n      }\n\n      if (this.config.html) {\n        if (this.config.sanitize) {\n          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);\n        }\n\n        element.innerHTML = content;\n      } else {\n        element.textContent = content;\n      }\n    };\n\n    _proto.getTitle = function getTitle() {\n      var title = this.element.getAttribute('data-original-title');\n\n      if (!title) {\n        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n      }\n\n      return title;\n    } // Private\n    ;\n\n    _proto._getPopperConfig = function _getPopperConfig(attachment) {\n      var _this3 = this;\n\n      var defaultBsConfig = {\n        placement: attachment,\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            behavior: this.config.fallbackPlacement\n          },\n          arrow: {\n            element: \".\" + this.constructor.NAME + \"-arrow\"\n          },\n          preventOverflow: {\n            boundariesElement: this.config.boundary\n          }\n        },\n        onCreate: function onCreate(data) {\n          if (data.originalPlacement !== data.placement) {\n            _this3._handlePopperPlacementChange(data);\n          }\n        },\n        onUpdate: function onUpdate(data) {\n          return _this3._handlePopperPlacementChange(data);\n        }\n      };\n      return _objectSpread2(_objectSpread2({}, defaultBsConfig), this.config.popperConfig);\n    };\n\n    _proto._addAttachmentClass = function _addAttachmentClass(attachment) {\n      this.getTipElement().classList.add(CLASS_PREFIX + \"-\" + attachment);\n    };\n\n    _proto._getOffset = function _getOffset() {\n      var _this4 = this;\n\n      var offset = {};\n\n      if (typeof this.config.offset === 'function') {\n        offset.fn = function (data) {\n          data.offsets = _objectSpread2(_objectSpread2({}, data.offsets), _this4.config.offset(data.offsets, _this4.element) || {});\n          return data;\n        };\n      } else {\n        offset.offset = this.config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getContainer = function _getContainer() {\n      if (this.config.container === false) {\n        return document.body;\n      }\n\n      if (isElement(this.config.container)) {\n        return this.config.container;\n      }\n\n      return SelectorEngine.findOne(this.config.container);\n    };\n\n    _proto._getAttachment = function _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this5 = this;\n\n      var triggers = this.config.trigger.split(' ');\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          EventHandler.on(_this5.element, _this5.constructor.Event.CLICK, _this5.config.selector, function (event) {\n            return _this5.toggle(event);\n          });\n        } else if (trigger !== TRIGGER_MANUAL) {\n          var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;\n          var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;\n          EventHandler.on(_this5.element, eventIn, _this5.config.selector, function (event) {\n            return _this5._enter(event);\n          });\n          EventHandler.on(_this5.element, eventOut, _this5.config.selector, function (event) {\n            return _this5._leave(event);\n          });\n        }\n      });\n\n      this._hideModalHandler = function () {\n        if (_this5.element) {\n          _this5.hide();\n        }\n      };\n\n      EventHandler.on(this.element.closest(\".\" + CLASS_NAME_MODAL), 'hide.bs.modal', this._hideModalHandler);\n\n      if (this.config.selector) {\n        this.config = _objectSpread2(_objectSpread2({}, this.config), {}, {\n          trigger: 'manual',\n          selector: ''\n        });\n      } else {\n        this._fixTitle();\n      }\n    };\n\n    _proto._fixTitle = function _fixTitle() {\n      var titleType = typeof this.element.getAttribute('data-original-title');\n\n      if (this.element.getAttribute('title') || titleType !== 'string') {\n        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n        this.element.setAttribute('title', '');\n      }\n    };\n\n    _proto._enter = function _enter(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || Data.getData(event.target, dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.target, this._getDelegateConfig());\n        Data.setData(event.target, dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n      }\n\n      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$3) || context._hoverState === HOVER_STATE_SHOW) {\n        context._hoverState = HOVER_STATE_SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_SHOW;\n\n      if (!context.config.delay || !context.config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_SHOW) {\n          context.show();\n        }\n      }, context.config.delay.show);\n    };\n\n    _proto._leave = function _leave(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || Data.getData(event.target, dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.target, this._getDelegateConfig());\n        Data.setData(event.target, dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_OUT;\n\n      if (!context.config.delay || !context.config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_OUT) {\n          context.hide();\n        }\n      }, context.config.delay.hide);\n    };\n\n    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {\n      for (var trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      var dataAttributes = Manipulator.getDataAttributes(this.element);\n      Object.keys(dataAttributes).forEach(function (dataAttr) {\n        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {\n          delete dataAttributes[dataAttr];\n        }\n      });\n\n      if (config && typeof config.container === 'object' && config.container.jquery) {\n        config.container = config.container[0];\n      }\n\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, this.constructor.Default), dataAttributes), typeof config === 'object' && config ? config : {});\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      typeCheckConfig(NAME$6, config, this.constructor.DefaultType);\n\n      if (config.sanitize) {\n        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);\n      }\n\n      return config;\n    };\n\n    _proto._getDelegateConfig = function _getDelegateConfig() {\n      var config = {};\n\n      if (this.config) {\n        for (var key in this.config) {\n          if (this.constructor.Default[key] !== this.config[key]) {\n            config[key] = this.config[key];\n          }\n        }\n      }\n\n      return config;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.getAttribute('class').match(BSCLS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(function (token) {\n          return token.trim();\n        }).forEach(function (tClass) {\n          return tip.classList.remove(tClass);\n        });\n      }\n    };\n\n    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {\n      var popperInstance = popperData.instance;\n      this.tip = popperInstance.popper;\n\n      this._cleanTipClass();\n\n      this._addAttachmentClass(this._getAttachment(popperData.placement));\n    };\n\n    _proto._fixTransition = function _fixTransition() {\n      var tip = this.getTipElement();\n      var initConfigAnimation = this.config.animation;\n\n      if (tip.getAttribute('x-placement') !== null) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_FADE$1);\n      this.config.animation = false;\n      this.hide();\n      this.show();\n      this.config.animation = initConfigAnimation;\n    } // Static\n    ;\n\n    Tooltip.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$6);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Tooltip(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Tooltip.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$6);\n    };\n\n    _createClass(Tooltip, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$6;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$4;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$6;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$6;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$1;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$6;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$4;\n      }\n    }]);\n\n    return Tooltip;\n  }();\n\n  var $$7 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .tooltip to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$7) {\n    var JQUERY_NO_CONFLICT$6 = $$7.fn[NAME$6];\n    $$7.fn[NAME$6] = Tooltip.jQueryInterface;\n    $$7.fn[NAME$6].Constructor = Tooltip;\n\n    $$7.fn[NAME$6].noConflict = function () {\n      $$7.fn[NAME$6] = JQUERY_NO_CONFLICT$6;\n      return Tooltip.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$7 = 'popover';\n  var VERSION$7 = '5.0.0-alpha1';\n  var DATA_KEY$7 = 'bs.popover';\n  var EVENT_KEY$7 = \".\" + DATA_KEY$7;\n  var CLASS_PREFIX$1 = 'bs-popover';\n  var BSCLS_PREFIX_REGEX$1 = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX$1 + \"\\\\S+\", 'g');\n\n  var Default$5 = _objectSpread2(_objectSpread2({}, Tooltip.Default), {}, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n  });\n\n  var DefaultType$5 = _objectSpread2(_objectSpread2({}, Tooltip.DefaultType), {}, {\n    content: '(string|element|function)'\n  });\n\n  var Event$2 = {\n    HIDE: \"hide\" + EVENT_KEY$7,\n    HIDDEN: \"hidden\" + EVENT_KEY$7,\n    SHOW: \"show\" + EVENT_KEY$7,\n    SHOWN: \"shown\" + EVENT_KEY$7,\n    INSERTED: \"inserted\" + EVENT_KEY$7,\n    CLICK: \"click\" + EVENT_KEY$7,\n    FOCUSIN: \"focusin\" + EVENT_KEY$7,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$7,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$7,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$7\n  };\n  var CLASS_NAME_FADE$2 = 'fade';\n  var CLASS_NAME_SHOW$4 = 'show';\n  var SELECTOR_TITLE = '.popover-header';\n  var SELECTOR_CONTENT = '.popover-body';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inheritsLoose(Popover, _Tooltip);\n\n    function Popover() {\n      return _Tooltip.apply(this, arguments) || this;\n    }\n\n    var _proto = Popover.prototype;\n\n    // Overrides\n    _proto.isWithContent = function isWithContent() {\n      return this.getTitle() || this._getContent();\n    };\n\n    _proto.setContent = function setContent() {\n      var tip = this.getTipElement(); // we use append for html objects to maintain js events\n\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_TITLE, tip), this.getTitle());\n\n      var content = this._getContent();\n\n      if (typeof content === 'function') {\n        content = content.call(this.element);\n      }\n\n      this.setElementContent(SelectorEngine.findOne(SELECTOR_CONTENT, tip), content);\n      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$4);\n    };\n\n    _proto._addAttachmentClass = function _addAttachmentClass(attachment) {\n      this.getTipElement().classList.add(CLASS_PREFIX$1 + \"-\" + attachment);\n    } // Private\n    ;\n\n    _proto._getContent = function _getContent() {\n      return this.element.getAttribute('data-content') || this.config.content;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.getAttribute('class').match(BSCLS_PREFIX_REGEX$1);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(function (token) {\n          return token.trim();\n        }).forEach(function (tClass) {\n          return tip.classList.remove(tClass);\n        });\n      }\n    } // Static\n    ;\n\n    Popover.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$7);\n\n        var _config = typeof config === 'object' ? config : null;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Popover(this, _config);\n          Data.setData(this, DATA_KEY$7, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Popover.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$7);\n    };\n\n    _createClass(Popover, null, [{\n      key: \"VERSION\",\n      // Getters\n      get: function get() {\n        return VERSION$7;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$5;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$7;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$7;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$2;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$7;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$5;\n      }\n    }]);\n\n    return Popover;\n  }(Tooltip);\n\n  var $$8 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  /* istanbul ignore if */\n\n  if ($$8) {\n    var JQUERY_NO_CONFLICT$7 = $$8.fn[NAME$7];\n    $$8.fn[NAME$7] = Popover.jQueryInterface;\n    $$8.fn[NAME$7].Constructor = Popover;\n\n    $$8.fn[NAME$7].noConflict = function () {\n      $$8.fn[NAME$7] = JQUERY_NO_CONFLICT$7;\n      return Popover.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$8 = 'scrollspy';\n  var VERSION$8 = '5.0.0-alpha1';\n  var DATA_KEY$8 = 'bs.scrollspy';\n  var EVENT_KEY$8 = \".\" + DATA_KEY$8;\n  var DATA_API_KEY$6 = '.data-api';\n  var Default$6 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  var DefaultType$6 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  var EVENT_ACTIVATE = \"activate\" + EVENT_KEY$8;\n  var EVENT_SCROLL = \"scroll\" + EVENT_KEY$8;\n  var EVENT_LOAD_DATA_API$1 = \"load\" + EVENT_KEY$8 + DATA_API_KEY$6;\n  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  var CLASS_NAME_ACTIVE$2 = 'active';\n  var SELECTOR_DATA_SPY = '[data-spy=\"scroll\"]';\n  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  var SELECTOR_NAV_LINKS = '.nav-link';\n  var SELECTOR_NAV_ITEMS = '.nav-item';\n  var SELECTOR_LIST_ITEMS = '.list-group-item';\n  var SELECTOR_DROPDOWN = '.dropdown';\n  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  var METHOD_OFFSET = 'offset';\n  var METHOD_POSITION = 'position';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var ScrollSpy = /*#__PURE__*/function () {\n    function ScrollSpy(element, config) {\n      var _this = this;\n\n      this._element = element;\n      this._scrollElement = element.tagName === 'BODY' ? window : element;\n      this._config = this._getConfig(config);\n      this._selector = this._config.target + \" \" + SELECTOR_NAV_LINKS + \",\" + (this._config.target + \" \" + SELECTOR_LIST_ITEMS + \",\") + (this._config.target + \" .\" + CLASS_NAME_DROPDOWN_ITEM);\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n      EventHandler.on(this._scrollElement, EVENT_SCROLL, function (event) {\n        return _this._process(event);\n      });\n      this.refresh();\n\n      this._process();\n\n      Data.setData(element, DATA_KEY$8, this);\n    } // Getters\n\n\n    var _proto = ScrollSpy.prototype;\n\n    // Public\n    _proto.refresh = function refresh() {\n      var _this2 = this;\n\n      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n      this._offsets = [];\n      this._targets = [];\n      this._scrollHeight = this._getScrollHeight();\n      var targets = SelectorEngine.find(this._selector);\n      targets.map(function (element) {\n        var target;\n        var targetSelector = getSelectorFromElement(element);\n\n        if (targetSelector) {\n          target = SelectorEngine.findOne(targetSelector);\n        }\n\n        if (target) {\n          var targetBCR = target.getBoundingClientRect();\n\n          if (targetBCR.width || targetBCR.height) {\n            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n          }\n        }\n\n        return null;\n      }).filter(function (item) {\n        return item;\n      }).sort(function (a, b) {\n        return a[0] - b[0];\n      }).forEach(function (item) {\n        _this2._offsets.push(item[0]);\n\n        _this2._targets.push(item[1]);\n      });\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$8);\n      EventHandler.off(this._scrollElement, EVENT_KEY$8);\n      this._element = null;\n      this._scrollElement = null;\n      this._config = null;\n      this._selector = null;\n      this._offsets = null;\n      this._targets = null;\n      this._activeTarget = null;\n      this._scrollHeight = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2({}, Default$6), typeof config === 'object' && config ? config : {});\n\n      if (typeof config.target !== 'string' && isElement(config.target)) {\n        var id = config.target.id;\n\n        if (!id) {\n          id = getUID(NAME$8);\n          config.target.id = id;\n        }\n\n        config.target = \"#\" + id;\n      }\n\n      typeCheckConfig(NAME$8, config, DefaultType$6);\n      return config;\n    };\n\n    _proto._getScrollTop = function _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    };\n\n    _proto._getScrollHeight = function _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    };\n\n    _proto._getOffsetHeight = function _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    };\n\n    _proto._process = function _process() {\n      var scrollTop = this._getScrollTop() + this._config.offset;\n\n      var scrollHeight = this._getScrollHeight();\n\n      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n      if (this._scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this._targets[this._targets.length - 1];\n\n        if (this._activeTarget !== target) {\n          this._activate(target);\n        }\n\n        return;\n      }\n\n      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n        this._activeTarget = null;\n\n        this._clear();\n\n        return;\n      }\n\n      for (var i = this._offsets.length; i--;) {\n        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this._activate(this._targets[i]);\n        }\n      }\n    };\n\n    _proto._activate = function _activate(target) {\n      this._activeTarget = target;\n\n      this._clear();\n\n      var queries = this._selector.split(',').map(function (selector) {\n        return selector + \"[data-target=\\\"\" + target + \"\\\"],\" + selector + \"[href=\\\"\" + target + \"\\\"]\";\n      });\n\n      var link = SelectorEngine.findOne(queries.join(','));\n\n      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE, link.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$2);\n        link.classList.add(CLASS_NAME_ACTIVE$2);\n      } else {\n        // Set triggered link as active\n        link.classList.add(CLASS_NAME_ACTIVE$2);\n        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP).forEach(function (listGroup) {\n          // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_LINKS + \", \" + SELECTOR_LIST_ITEMS).forEach(function (item) {\n            return item.classList.add(CLASS_NAME_ACTIVE$2);\n          }); // Handle special case when .nav-link is inside .nav-item\n\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(function (navItem) {\n            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(function (item) {\n              return item.classList.add(CLASS_NAME_ACTIVE$2);\n            });\n          });\n        });\n      }\n\n      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n        relatedTarget: target\n      });\n    };\n\n    _proto._clear = function _clear() {\n      SelectorEngine.find(this._selector).filter(function (node) {\n        return node.classList.contains(CLASS_NAME_ACTIVE$2);\n      }).forEach(function (node) {\n        return node.classList.remove(CLASS_NAME_ACTIVE$2);\n      });\n    } // Static\n    ;\n\n    ScrollSpy.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$8);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data) {\n          data = new ScrollSpy(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    ScrollSpy.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$8);\n    };\n\n    _createClass(ScrollSpy, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$8;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$6;\n      }\n    }]);\n\n    return ScrollSpy;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {\n    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(function (spy) {\n      return new ScrollSpy(spy, Manipulator.getDataAttributes(spy));\n    });\n  });\n  var $$9 = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  /* istanbul ignore if */\n\n  if ($$9) {\n    var JQUERY_NO_CONFLICT$8 = $$9.fn[NAME$8];\n    $$9.fn[NAME$8] = ScrollSpy.jQueryInterface;\n    $$9.fn[NAME$8].Constructor = ScrollSpy;\n\n    $$9.fn[NAME$8].noConflict = function () {\n      $$9.fn[NAME$8] = JQUERY_NO_CONFLICT$8;\n      return ScrollSpy.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$9 = 'tab';\n  var VERSION$9 = '5.0.0-alpha1';\n  var DATA_KEY$9 = 'bs.tab';\n  var EVENT_KEY$9 = \".\" + DATA_KEY$9;\n  var DATA_API_KEY$7 = '.data-api';\n  var EVENT_HIDE$3 = \"hide\" + EVENT_KEY$9;\n  var EVENT_HIDDEN$3 = \"hidden\" + EVENT_KEY$9;\n  var EVENT_SHOW$3 = \"show\" + EVENT_KEY$9;\n  var EVENT_SHOWN$3 = \"shown\" + EVENT_KEY$9;\n  var EVENT_CLICK_DATA_API$6 = \"click\" + EVENT_KEY$9 + DATA_API_KEY$7;\n  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  var CLASS_NAME_ACTIVE$3 = 'active';\n  var CLASS_NAME_DISABLED$1 = 'disabled';\n  var CLASS_NAME_FADE$3 = 'fade';\n  var CLASS_NAME_SHOW$5 = 'show';\n  var SELECTOR_DROPDOWN$1 = '.dropdown';\n  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  var SELECTOR_ACTIVE$1 = '.active';\n  var SELECTOR_ACTIVE_UL = ':scope > li > .active';\n  var SELECTOR_DATA_TOGGLE$4 = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]';\n  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  var SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tab = /*#__PURE__*/function () {\n    function Tab(element) {\n      this._element = element;\n      Data.setData(this._element, DATA_KEY$9, this);\n    } // Getters\n\n\n    var _proto = Tab.prototype;\n\n    // Public\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE$3) || this._element.classList.contains(CLASS_NAME_DISABLED$1)) {\n        return;\n      }\n\n      var previous;\n      var target = getElementFromSelector(this._element);\n\n      var listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP$1);\n\n      if (listElement) {\n        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$1;\n        previous = SelectorEngine.find(itemSelector, listElement);\n        previous = previous[previous.length - 1];\n      }\n\n      var hideEvent = null;\n\n      if (previous) {\n        hideEvent = EventHandler.trigger(previous, EVENT_HIDE$3, {\n          relatedTarget: this._element\n        });\n      }\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n        relatedTarget: previous\n      });\n\n      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._activate(this._element, listElement);\n\n      var complete = function complete() {\n        EventHandler.trigger(previous, EVENT_HIDDEN$3, {\n          relatedTarget: _this._element\n        });\n        EventHandler.trigger(_this._element, EVENT_SHOWN$3, {\n          relatedTarget: previous\n        });\n      };\n\n      if (target) {\n        this._activate(target, target.parentNode, complete);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      Data.removeData(this._element, DATA_KEY$9);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._activate = function _activate(element, container, callback) {\n      var _this2 = this;\n\n      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE$1);\n      var active = activeElements[0];\n      var isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$3);\n\n      var complete = function complete() {\n        return _this2._transitionComplete(element, active, callback);\n      };\n\n      if (active && isTransitioning) {\n        var transitionDuration = getTransitionDurationFromElement(active);\n        active.classList.remove(CLASS_NAME_SHOW$5);\n        EventHandler.one(active, TRANSITION_END, complete);\n        emulateTransitionEnd(active, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto._transitionComplete = function _transitionComplete(element, active, callback) {\n      if (active) {\n        active.classList.remove(CLASS_NAME_ACTIVE$3);\n        var dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n        if (dropdownChild) {\n          dropdownChild.classList.remove(CLASS_NAME_ACTIVE$3);\n        }\n\n        if (active.getAttribute('role') === 'tab') {\n          active.setAttribute('aria-selected', false);\n        }\n      }\n\n      element.classList.add(CLASS_NAME_ACTIVE$3);\n\n      if (element.getAttribute('role') === 'tab') {\n        element.setAttribute('aria-selected', true);\n      }\n\n      reflow(element);\n\n      if (element.classList.contains(CLASS_NAME_FADE$3)) {\n        element.classList.add(CLASS_NAME_SHOW$5);\n      }\n\n      if (element.parentNode && element.parentNode.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n        var dropdownElement = element.closest(SELECTOR_DROPDOWN$1);\n\n        if (dropdownElement) {\n          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE$1).forEach(function (dropdown) {\n            return dropdown.classList.add(CLASS_NAME_ACTIVE$3);\n          });\n        }\n\n        element.setAttribute('aria-expanded', true);\n      }\n\n      if (callback) {\n        callback();\n      }\n    } // Static\n    ;\n\n    Tab.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$9) || new Tab(this);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Tab.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$9);\n    };\n\n    _createClass(Tab, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$9;\n      }\n    }]);\n\n    return Tab;\n  }();\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$4, function (event) {\n    event.preventDefault();\n    var data = Data.getData(this, DATA_KEY$9) || new Tab(this);\n    data.show();\n  });\n  var $$a = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .tab to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$a) {\n    var JQUERY_NO_CONFLICT$9 = $$a.fn[NAME$9];\n    $$a.fn[NAME$9] = Tab.jQueryInterface;\n    $$a.fn[NAME$9].Constructor = Tab;\n\n    $$a.fn[NAME$9].noConflict = function () {\n      $$a.fn[NAME$9] = JQUERY_NO_CONFLICT$9;\n      return Tab.jQueryInterface;\n    };\n  }\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$a = 'toast';\n  var VERSION$a = '5.0.0-alpha1';\n  var DATA_KEY$a = 'bs.toast';\n  var EVENT_KEY$a = \".\" + DATA_KEY$a;\n  var EVENT_CLICK_DISMISS$1 = \"click.dismiss\" + EVENT_KEY$a;\n  var EVENT_HIDE$4 = \"hide\" + EVENT_KEY$a;\n  var EVENT_HIDDEN$4 = \"hidden\" + EVENT_KEY$a;\n  var EVENT_SHOW$4 = \"show\" + EVENT_KEY$a;\n  var EVENT_SHOWN$4 = \"shown\" + EVENT_KEY$a;\n  var CLASS_NAME_FADE$4 = 'fade';\n  var CLASS_NAME_HIDE = 'hide';\n  var CLASS_NAME_SHOW$6 = 'show';\n  var CLASS_NAME_SHOWING = 'showing';\n  var DefaultType$7 = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  var Default$7 = {\n    animation: true,\n    autohide: true,\n    delay: 500\n  };\n  var SELECTOR_DATA_DISMISS$1 = '[data-dismiss=\"toast\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Toast = /*#__PURE__*/function () {\n    function Toast(element, config) {\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._timeout = null;\n\n      this._setListeners();\n\n      Data.setData(element, DATA_KEY$a, this);\n    } // Getters\n\n\n    var _proto = Toast.prototype;\n\n    // Public\n    _proto.show = function show() {\n      var _this = this;\n\n      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      if (this._config.animation) {\n        this._element.classList.add(CLASS_NAME_FADE$4);\n      }\n\n      var complete = function complete() {\n        _this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        _this._element.classList.add(CLASS_NAME_SHOW$6);\n\n        EventHandler.trigger(_this._element, EVENT_SHOWN$4);\n\n        if (_this._config.autohide) {\n          _this._timeout = setTimeout(function () {\n            _this.hide();\n          }, _this._config.delay);\n        }\n      };\n\n      this._element.classList.remove(CLASS_NAME_HIDE);\n\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      if (this._config.animation) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, complete);\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (!this._element.classList.contains(CLASS_NAME_SHOW$6)) {\n        return;\n      }\n\n      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      var complete = function complete() {\n        _this2._element.classList.add(CLASS_NAME_HIDE);\n\n        EventHandler.trigger(_this2._element, EVENT_HIDDEN$4);\n      };\n\n      this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n      if (this._config.animation) {\n        var transitionDuration = getTransitionDurationFromElement(this._element);\n        EventHandler.one(this._element, TRANSITION_END, complete);\n        emulateTransitionEnd(this._element, transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n\n      if (this._element.classList.contains(CLASS_NAME_SHOW$6)) {\n        this._element.classList.remove(CLASS_NAME_SHOW$6);\n      }\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS$1);\n      Data.removeData(this._element, DATA_KEY$a);\n      this._element = null;\n      this._config = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _objectSpread2(_objectSpread2(_objectSpread2({}, Default$7), Manipulator.getDataAttributes(this._element)), typeof config === 'object' && config ? config : {});\n      typeCheckConfig(NAME$a, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this3 = this;\n\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function () {\n        return _this3.hide();\n      });\n    } // Static\n    ;\n\n    Toast.jQueryInterface = function jQueryInterface(config) {\n      return this.each(function () {\n        var data = Data.getData(this, DATA_KEY$a);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data) {\n          data = new Toast(this, _config);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](this);\n        }\n      });\n    };\n\n    Toast.getInstance = function getInstance(element) {\n      return Data.getData(element, DATA_KEY$a);\n    };\n\n    _createClass(Toast, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$a;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$7;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$7;\n      }\n    }]);\n\n    return Toast;\n  }();\n\n  var $$b = getjQuery();\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   *  add .toast to jQuery only if jQuery is present\n   */\n\n  /* istanbul ignore if */\n\n  if ($$b) {\n    var JQUERY_NO_CONFLICT$a = $$b.fn[NAME$a];\n    $$b.fn[NAME$a] = Toast.jQueryInterface;\n    $$b.fn[NAME$a].Constructor = Toast;\n\n    $$b.fn[NAME$a].noConflict = function () {\n      $$b.fn[NAME$a] = JQUERY_NO_CONFLICT$a;\n      return Toast.jQueryInterface;\n    };\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.0-alpha1): index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var index_umd = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip\n  };\n\n  return index_umd;\n\n})));\n//# sourceMappingURL=bootstrap.bundle.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetDialog.ts":
/*!***********************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetDialog.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AddWidgetDialog = void 0;\r\nconst BaseDialog_1 = __webpack_require__(/*! ../../../core/BaseDialog */ \"./wwwroot/src/core/BaseDialog.ts\");\r\nconst common_1 = __webpack_require__(/*! ../../../core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst AddWidgetService_1 = __webpack_require__(/*! ./AddWidgetService */ \"./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetService.ts\");\r\nconst bootstrap_bundle_1 = __webpack_require__(/*! ../../../../lib/bootstrap/dist/js/bootstrap.bundle */ \"./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js\");\r\nconst TuxboardService_1 = __webpack_require__(/*! ../../../Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nclass AddWidgetDialog extends BaseDialog_1.BaseDialog {\r\n    constructor(tuxboard, dialogSelector = null) {\r\n        super(dialogSelector);\r\n        this.tuxboard = tuxboard;\r\n        this.service = new AddWidgetService_1.AddWidgetService();\r\n        this.tuxboardService = new TuxboardService_1.TuxboardService();\r\n        this.addWidgetDialogSelector = \"#widget-dialog\";\r\n        this.widgetTabGroupSelector = \".widget-tabs\";\r\n        this.widgetListItemSelector = \"a.widget-item\";\r\n        this.addWidgetButtonSelector = \".add-widget\";\r\n        this.widgetSelectionSelector = \".selected\";\r\n        this.selector = dialogSelector || this.addWidgetDialogSelector;\r\n    }\r\n    getDataId(elem) { return elem.getAttribute(common_1.dataId); }\r\n    getWidgetDialog() { return document.querySelector(this.addWidgetDialogSelector); }\r\n    getWidgetList() { return this.getWidgetDialog().querySelectorAll(this.widgetListItemSelector); }\r\n    getAddWidgetButton() { return this.getWidgetDialog().querySelector(this.addWidgetButtonSelector); }\r\n    getWidgetTabGroups() { return this.getWidgetDialog().querySelectorAll(this.widgetTabGroupSelector); }\r\n    getSelectedWidget() { return this.getWidgetDialog().querySelector(this.widgetListItemSelector + this.widgetSelectionSelector); }\r\n    getSelectedSelector() { return common_1.noPeriod(this.widgetSelectionSelector); }\r\n    setWidgetDialog(body) {\r\n        const modalBody = this.getWidgetDialog().querySelector(this.dialogBodySelector);\r\n        if (modalBody)\r\n            modalBody.innerHTML = body;\r\n    }\r\n    hide() {\r\n        const modal = bootstrap_bundle_1.Modal.getInstance(this.getWidgetDialog()); // Returns a Bootstrap modal instance\r\n        if (modal) {\r\n            modal.hide();\r\n        }\r\n    }\r\n    updateAddWidget() {\r\n        const addWidgetButton = this.getAddWidgetButton(), selected = this.getSelectedWidget();\r\n        if (selected) {\r\n            common_1.enableElement(addWidgetButton);\r\n        }\r\n        else {\r\n            common_1.disableElement(addWidgetButton);\r\n        }\r\n    }\r\n    resetSelectedWidgets() {\r\n        const widgets = this.getWidgetList();\r\n        [].forEach.call(widgets, (item) => {\r\n            item.classList.remove(this.getSelectedSelector());\r\n        });\r\n    }\r\n    selectWidget(ev) {\r\n        var target = ev.currentTarget;\r\n        const isSelected = target.classList.contains(this.getSelectedSelector());\r\n        this.resetSelectedWidgets();\r\n        if (!isSelected) {\r\n            target.classList.add(this.getSelectedSelector());\r\n        }\r\n        this.updateAddWidget();\r\n    }\r\n    addWidgetClick(ev) {\r\n        const widget = this.getSelectedWidget();\r\n        const widgetId = widget.getAttribute(common_1.dataId), tab = this.tuxboard.getTab();\r\n        const layout = tab.getLayout();\r\n        const layoutRow = layout.getFirstLayoutRow();\r\n        const columns = layoutRow.getColumns();\r\n        const column = columns && columns.length > 0 ? columns[0] : null;\r\n        this.service.addWidgetService(tab.getCurrentTabId(), widgetId)\r\n            .then((data) => {\r\n            if (!data) {\r\n                return;\r\n            }\r\n            const response = JSON.parse(data);\r\n            if (!response.success)\r\n                return;\r\n            this.hide();\r\n            const columnDom = column.getDom();\r\n            columnDom.insertAdjacentHTML(\"beforeend\", response.template);\r\n            const placements = tab.getLayout()\r\n                .getWidgetPlacements()\r\n                .filter((item, index) => item.getPlacementId() ===\r\n                response.placementId);\r\n            this.tuxboard.updateWidgets(placements);\r\n        });\r\n    }\r\n    setupWidgetClicks() {\r\n        const widgetAddButton = this.getAddWidgetButton();\r\n        widgetAddButton.addEventListener(\"click\", (ev) => this.addWidgetClick(ev), { once: true });\r\n        [].forEach.call(this.getWidgetList(), (item) => {\r\n            item.addEventListener(\"click\", (ev) => this.selectWidget(ev), { once: true });\r\n        });\r\n    }\r\n    setupWidgetTabs() {\r\n        const tabTriggers = this.getWidgetTabGroups();\r\n        tabTriggers.forEach(triggerEl => {\r\n            var tabTrigger = new bootstrap_bundle_1.Tab(triggerEl);\r\n            triggerEl.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                tabTrigger.show();\r\n            }, false);\r\n        });\r\n    }\r\n    initialize(modalBody) {\r\n        this.setWidgetDialog(modalBody);\r\n        this.setupWidgetTabs();\r\n        this.setupWidgetClicks();\r\n    }\r\n}\r\nexports.AddWidgetDialog = AddWidgetDialog;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetDialog.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetService.ts":
/*!************************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetService.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AddWidgetService = void 0;\r\nconst BaseService_1 = __webpack_require__(/*! ../../../core/BaseService */ \"./wwwroot/src/core/BaseService.ts\");\r\nclass AddWidgetService extends BaseService_1.BaseService {\r\n    constructor(debug = false) {\r\n        super(debug);\r\n        this.tuxWidgetDialogUrl = \"/widgetdialog/\";\r\n        this.tuxWidgetAddWidgetUrl = \"/widgetdialog/addwidget/\";\r\n    }\r\n    ///* Service: Add Widget */\r\n    //addWidgetToDashboard(data) {\r\n    //    if (data.success) {\r\n    //        if (widgetDialogInstance) {\r\n    //            widgetDialogInstance.hide();\r\n    //        }\r\n    //        refreshTuxboardService();\r\n    //    }\r\n    //}\r\n    addWidgetService(tabId, widgetId) {\r\n        const request = new Request(this.tuxWidgetAddWidgetUrl, {\r\n            method: \"post\",\r\n            body: JSON.stringify({\r\n                TabId: tabId,\r\n                WidgetId: widgetId\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n        //return this.fetchJson(new Request(this.tuxWidgetAddWidgetUrl,\r\n        //    {\r\n        //        method: \"post\",\r\n        //        body: JSON.stringify({\r\n        //            TabId: tabId,\r\n        //            WidgetId: widgetId\r\n        //        })\r\n        //    }\r\n        //));\r\n    }\r\n    /* Service: Widgets Dialog Box */\r\n    //displayWidgetDialog(data) {\r\n    //    const widgetDialog = document.getElementById(tuxWidgetDialog),\r\n    //        overlay = widgetDialog.querySelector(tuxOverlay);\r\n    //    setWidgetDialog(data);\r\n    //    setWidgetEvents();\r\n    //    overlay.setAttribute(\"style\", \"display:none\");\r\n    //}\r\n    getWidgetDialogService() {\r\n        const request = new Request(this.tuxWidgetDialogUrl);\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n}\r\nexports.AddWidgetService = AddWidgetService;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetService.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutDialog.ts":
/*!*****************************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutDialog.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ChangeLayoutDialog = void 0;\r\nconst BaseDialog_1 = __webpack_require__(/*! ../../../core/BaseDialog */ \"./wwwroot/src/core/BaseDialog.ts\");\r\nconst LayoutItem_1 = __webpack_require__(/*! ./LayoutItem */ \"./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutItem.ts\");\r\nconst common_1 = __webpack_require__(/*! ../../../core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst LayoutModel_1 = __webpack_require__(/*! ./LayoutModel */ \"./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutModel.ts\");\r\nconst ChangeLayoutService_1 = __webpack_require__(/*! ./ChangeLayoutService */ \"./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutService.ts\");\r\nconst bootstrap_bundle_1 = __webpack_require__(/*! ../../../../lib/bootstrap/dist/js/bootstrap.bundle */ \"./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js\");\r\nclass ChangeLayoutDialog extends BaseDialog_1.BaseDialog {\r\n    constructor(tuxboard, dialogSelector = null) {\r\n        super(dialogSelector);\r\n        this.tuxboard = tuxboard;\r\n        this.layoutService = new ChangeLayoutService_1.ChangeLayoutService();\r\n        // selectors\r\n        this.layoutDialogSelector = \"#layout-dialog\";\r\n        this.saveLayoutButtonSelector = \".save-layout\";\r\n        this.deleteLayoutButtonSelector = \".layout-delete-button\";\r\n        this.layoutListSelector = \".layout-list\";\r\n        this.layoutItemSelector = \".layout-item\";\r\n        this.dropdownToggleSelector = \".dropdown-toggle\";\r\n        this.layoutTypesSelector = \".layout-types a\";\r\n        this.layoutListHandleSelector = \".handle\";\r\n        this.layoutMessageSelector = \"#layout-message\";\r\n        this.canRefresh = false;\r\n        this.selector = dialogSelector || this.layoutDialogSelector;\r\n        this.currentTab = this.tuxboard.getTab();\r\n    }\r\n    /* Common: Utility */\r\n    getLayoutOverlay() { return this.getLayoutDialog().querySelector(this.generalOverlaySelector); }\r\n    getLayoutDialog() { return document.querySelector(this.layoutDialogSelector); }\r\n    getLayoutList() { return this.getLayoutDialog().querySelector(this.layoutListSelector); }\r\n    getDropdown() { return this.getLayoutDialog().querySelector(this.dropdownToggleSelector); }\r\n    getLayoutListItems() { return this.getLayoutList().children; }\r\n    getLayoutItemSelector(id) { return `${this.layoutItemSelector}[${common_1.dataId}=\"${id}\"]`; } // .layout-item[data-id=\"id\"]\r\n    getSaveLayoutButton() {\r\n        const layoutDialog = this.getLayoutDialog();\r\n        return layoutDialog.querySelector(this.saveLayoutButtonSelector);\r\n    }\r\n    setLayoutDialog(body) {\r\n        const modalBody = this.getLayoutDialog().querySelector(this.dialogBodySelector);\r\n        if (modalBody) {\r\n            modalBody.innerHTML = body;\r\n        }\r\n    }\r\n    initialize(layoutBody) {\r\n        this.setLayoutDialog(layoutBody);\r\n        // Bootstrap\r\n        let dropdown = new bootstrap_bundle_1.Dropdown(this.getDropdown());\r\n        this.initLayoutDragAndDrop();\r\n        this.attachLayoutEvents();\r\n        this.updateLayoutRowEvents();\r\n        this.resetColumnStatus();\r\n    }\r\n    hide() {\r\n        const modal = bootstrap_bundle_1.Modal.getInstance(this.getLayoutDialog()); // Returns a Bootstrap modal instance\r\n        if (modal) {\r\n            modal.hide();\r\n        }\r\n    }\r\n    displayLayoutErrors(data) {\r\n        const layoutDialog = this.getLayoutDialog();\r\n        [].forEach.call(data.LayoutErrors, (item) => {\r\n            const trow = layoutDialog.querySelector(`[data-id='${item.layoutRowId}']`);\r\n            if (trow) {\r\n                trow.setAttribute(\"style\", \"outline: 1px solid #F00\");\r\n            }\r\n            else {\r\n                trow.setAttribute(\"style\", \"\");\r\n            }\r\n        });\r\n    }\r\n    saveCurrentLayout(ev) {\r\n        const layoutData = new Array();\r\n        [].forEach.call(this.getLayoutListItems(), (liItem, index) => {\r\n            const rowTypeId = liItem.getAttribute(\"data-row-type\");\r\n            let id = liItem.getAttribute(common_1.dataId);\r\n            if (!id) {\r\n                id = \"0\";\r\n            }\r\n            layoutData.push(new LayoutItem_1.LayoutItem(index, id, rowTypeId));\r\n        });\r\n        const postData = new LayoutModel_1.LayoutModel(layoutData, this.currentTab.getCurrentTabId());\r\n        this.layoutService.saveLayoutService(postData)\r\n            .then(() => {\r\n            this.hide();\r\n            this.tuxboard.refresh();\r\n        });\r\n    }\r\n    attachLayoutEvents() {\r\n        const layoutDialog = this.getLayoutDialog();\r\n        // Save Layout\r\n        const saveLayoutButton = this.getSaveLayoutButton();\r\n        saveLayoutButton.addEventListener(\"click\", (ev) => this.saveCurrentLayout(ev), { once: true });\r\n        // Layout Types in dropdown\r\n        const links = layoutDialog.querySelectorAll(this.layoutTypesSelector);\r\n        [].forEach.call(links, (item) => {\r\n            item.addEventListener(\"click\", (ev) => this.addLayoutRow(ev), { once: true });\r\n        });\r\n    }\r\n    updateLayoutRowEvents() {\r\n        const layoutDialog = this.getLayoutDialog();\r\n        // Delete Layout Button\r\n        const deleteButtons = layoutDialog.querySelectorAll(this.deleteLayoutButtonSelector);\r\n        [].forEach.call(deleteButtons, (el) => {\r\n            el.addEventListener(\"click\", (ev) => this.layoutDeleteButtonClick(ev), { once: true });\r\n        });\r\n    }\r\n    addLayoutRow(ev) {\r\n        const evTarget = ev.target;\r\n        const layoutTypeId = evTarget.attributes[common_1.dataId].value;\r\n        this.layoutService.addLayoutRow(layoutTypeId)\r\n            .then((data) => {\r\n            this.updateLayoutData(data);\r\n        });\r\n    }\r\n    getRowByEvent(ev) {\r\n        const evTarget = ev.target;\r\n        const id = evTarget.attributes[common_1.dataId].value;\r\n        return this.getLayoutDialog().querySelector(this.getLayoutItemSelector(id));\r\n    }\r\n    updateLayoutData(html) {\r\n        this.resetColumnStatus();\r\n        const columnElement = this.getLayoutList();\r\n        columnElement.insertAdjacentHTML(\"beforeend\", html);\r\n        this.initLayoutDragAndDrop();\r\n        this.updateLayoutRowEvents();\r\n    }\r\n    resetColumnStatus() {\r\n        const dialog = this.getLayoutDialog();\r\n        const liList = this.getLayoutListItems();\r\n        [].forEach.call(liList, liItem => {\r\n            liItem.style = \"\";\r\n        });\r\n        const span = dialog.querySelector(this.layoutMessageSelector);\r\n        if (span) {\r\n            span.innerHTML = \"\";\r\n        }\r\n    }\r\n    setColumnStatus(id, data) {\r\n        const dialog = this.getLayoutDialog();\r\n        const idSelector = `li[${common_1.dataId}='${id}']`;\r\n        const item = dialog.querySelector(idSelector);\r\n        const span = dialog.querySelector(this.layoutMessageSelector);\r\n        span.innerHTML = data.text;\r\n        item.setAttribute(\"style\", \"outline: 1px solid #F00\");\r\n    }\r\n    layoutDeleteButtonClick(ev) {\r\n        const row = this.getRowByEvent(ev);\r\n        if (!row)\r\n            return;\r\n        const id = common_1.getDataId(row);\r\n        this.layoutService.deleteRowFromLayoutDialogService(row)\r\n            .then((data) => {\r\n            if (data.success) {\r\n                this.resetColumnStatus();\r\n                row.remove();\r\n            }\r\n            else {\r\n                this.setColumnStatus(id, data);\r\n            }\r\n        });\r\n    }\r\n    initLayoutDragAndDrop() {\r\n        const layoutList = this.getLayoutList();\r\n        const liList = this.getLayoutListItems();\r\n        [].forEach.call(liList, (liItem) => {\r\n            const handle = liItem.querySelector(this.layoutListHandleSelector);\r\n            handle.addEventListener(\"mousedown\", handleMouseDown, false);\r\n            handle.addEventListener(\"mouseup\", handleMouseUp, false);\r\n            const listItem = handle.parentNode.parentNode;\r\n            listItem.addEventListener('dragstart', layoutDragStart, false);\r\n        });\r\n        layoutList.addEventListener(\"dragover\", (ev) => {\r\n            layoutDragOver(ev, this);\r\n        }, false);\r\n        layoutList.addEventListener(\"dragenter\", layoutDragEnter, false);\r\n        layoutList.addEventListener(\"dragleave\", layoutDragLeave, false);\r\n        layoutList.addEventListener(\"drop\", layoutDrop, false);\r\n        layoutList.addEventListener(\"dragend\", layoutDragEnd, false);\r\n        function handleMouseDown(ev) {\r\n            const target = ev.target;\r\n            target.parentElement.parentElement.setAttribute(\"draggable\", \"true\");\r\n        }\r\n        function handleMouseUp(ev) {\r\n            const target = ev.target;\r\n            target.parentElement.parentElement.setAttribute(\"draggable\", \"false\");\r\n        }\r\n        function layoutDragStart(ev) {\r\n            ev.dataTransfer.effectAllowed = 'move';\r\n            let target = ev.target;\r\n            if (target instanceof HTMLLIElement) {\r\n                ev.dataTransfer.setData('text', target.getAttribute(common_1.dataId));\r\n            }\r\n        }\r\n        function layoutDragEnter(ev) {\r\n            if (ev.preventDefault)\r\n                ev.preventDefault();\r\n            if (ev.target instanceof HTMLUListElement) {\r\n                return true;\r\n            }\r\n            else if (ev.target instanceof HTMLLIElement) {\r\n                ev.target.attributes[\"style\"] = \"border-bottom: 1px dashed #F00\";\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        function layoutDragLeave(ev) {\r\n            if (ev.preventDefault)\r\n                ev.preventDefault();\r\n            if (ev.target instanceof HTMLUListElement) {\r\n                return true;\r\n            }\r\n            else if (ev.target instanceof HTMLLIElement) {\r\n                ev.target.attributes[\"style\"] = \"\";\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        function layoutDragOver(ev, dialog) {\r\n            if (ev.preventDefault)\r\n                ev.preventDefault();\r\n            ev.dataTransfer.dropEffect = 'move';\r\n            const target = ev.target;\r\n            const id = ev.dataTransfer.getData('text');\r\n            // TODO: fix \"layout-item\"\r\n            let elem = document.querySelector(\".layout-item[data-id='\" + id + \"']\");\r\n            if (elem && common_1.isLayoutListItem(target)) {\r\n                if (common_1.isBefore(elem, target)) {\r\n                    elem.insertBefore(elem, target);\r\n                }\r\n                else {\r\n                    elem.insertBefore(elem, target.nextSibling);\r\n                }\r\n                target.classList.remove(\"over\");\r\n            }\r\n            return false;\r\n        }\r\n        function layoutDrop(ev) {\r\n            if (ev.preventDefault)\r\n                ev.preventDefault();\r\n            const id = ev.dataTransfer.getData('text');\r\n            let elem = document.querySelector(\".layout-item[data-id='\" + id + \"']\");\r\n            let target = ev.target;\r\n            while (!common_1.isLayoutListItem(target)) {\r\n                target = target.parentNode;\r\n            }\r\n            if (elem && common_1.isLayoutListItem(target)) {\r\n                const targetListItem = target.parentNode;\r\n                if (common_1.isBefore(elem, target)) {\r\n                    targetListItem.insertBefore(elem, target);\r\n                }\r\n                else {\r\n                    targetListItem.insertBefore(elem, target.nextSibling);\r\n                }\r\n                target.classList.remove(\"over\");\r\n            }\r\n        }\r\n        function layoutDragEnd(ev) {\r\n            const target = ev.target;\r\n            if (target) {\r\n                target.setAttribute(\"draggable\", \"false\");\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ChangeLayoutDialog = ChangeLayoutDialog;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutDialog.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutService.ts":
/*!******************************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutService.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ChangeLayoutService = void 0;\r\nconst BaseService_1 = __webpack_require__(/*! ../../../core/BaseService */ \"./wwwroot/src/core/BaseService.ts\");\r\nconst common_1 = __webpack_require__(/*! ../../../core/common */ \"./wwwroot/src/core/common.ts\");\r\nclass ChangeLayoutService extends BaseService_1.BaseService {\r\n    constructor(debug = false) {\r\n        super(debug);\r\n        this.tuxLayoutDialogUrl = \"/layoutdialog/\";\r\n        this.tuxLayoutAddRowUrl = \"/layoutdialog/addlayoutrow/\";\r\n        this.tuxSaveLayoutUrl = \"/layoutdialog/saveLayout/\";\r\n        this.tuxDeleteLayoutRowUrl = \"/layoutdialog/DeleteLayoutRow/\";\r\n    }\r\n    /* Service: Load Layout Dialog */\r\n    getLayoutDialog(tabId) {\r\n        const request = new Request(this.tuxLayoutDialogUrl + tabId, { method: \"post\" });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Add Layout Row */\r\n    addLayoutRow(typeId) {\r\n        const request = new Request(this.tuxLayoutAddRowUrl + typeId, { method: \"post\" });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Delete Row */\r\n    deleteRowFromLayoutDialogService(row) {\r\n        const id = row.getAttribute(common_1.dataId);\r\n        if (id === \"0\") { // new, we can remove it.\r\n            row.remove();\r\n        }\r\n        else {\r\n            const request = new Request(this.tuxDeleteLayoutRowUrl + id, { method: 'delete' });\r\n            return fetch(request)\r\n                .then(this.validateResponse)\r\n                .then(this.readResponseAsJson)\r\n                .catch(this.logError);\r\n        }\r\n    }\r\n    /* Service: Save Layout */\r\n    saveLayoutService(bodyData) {\r\n        const request = new Request(this.tuxSaveLayoutUrl, {\r\n            method: 'post',\r\n            body: JSON.stringify(bodyData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            // .then(this.readResponseAsJson)\r\n            .catch(this.logError);\r\n    }\r\n}\r\nexports.ChangeLayoutService = ChangeLayoutService;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutService.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutItem.ts":
/*!*********************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutItem.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LayoutItem = void 0;\r\nclass LayoutItem {\r\n    constructor(Index, LayoutRowId, TypeId) {\r\n        this.Index = Index;\r\n        this.LayoutRowId = LayoutRowId;\r\n        this.TypeId = TypeId;\r\n    }\r\n}\r\nexports.LayoutItem = LayoutItem;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutItem.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutModel.ts":
/*!**********************************************************************!*\
  !*** ./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutModel.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LayoutModel = void 0;\r\nclass LayoutModel {\r\n    constructor(LayoutList, TabId) {\r\n        this.LayoutList = LayoutList;\r\n        this.TabId = TabId;\r\n    }\r\n}\r\nexports.LayoutModel = LayoutModel;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/LayoutModel.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/AddWidgetButton.ts":
/*!******************************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/AddWidgetButton.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AddWidgetButton = void 0;\r\nconst TuxbarButton_1 = __webpack_require__(/*! ./TuxbarButton */ \"./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts\");\r\nconst AddWidgetDialog_1 = __webpack_require__(/*! ../Dialogs/AddWidgetDialog/AddWidgetDialog */ \"./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetDialog.ts\");\r\nconst bootstrap_bundle_1 = __webpack_require__(/*! ../../../lib/bootstrap/dist/js/bootstrap.bundle */ \"./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js\");\r\nconst AddWidgetService_1 = __webpack_require__(/*! ../../Extras/Dialogs/AddWidgetDialog/AddWidgetService */ \"./wwwroot/src/Extras/Dialogs/AddWidgetDialog/AddWidgetService.ts\");\r\nclass AddWidgetButton extends TuxbarButton_1.TuxbarButton {\r\n    constructor(tuxBar, addWidgetButtonSelector = null) {\r\n        super(tuxBar, addWidgetButtonSelector);\r\n        this.tuxbarAddWidgetSelector = \"#widget-button\";\r\n        this.service = new AddWidgetService_1.AddWidgetService();\r\n        this.selector = addWidgetButtonSelector || this.tuxbarAddWidgetSelector;\r\n        const element = this.tuxBar.getDom().querySelector(this.selector);\r\n        if (element) {\r\n            element.addEventListener(\"click\", (ev) => { this.displayDialogEvent(ev, tuxBar); }, false);\r\n        }\r\n    }\r\n    getDom() {\r\n        return this.tuxBar.getDom().querySelector(this.selector);\r\n    }\r\n    displayDialogEvent(ev, tuxbar) {\r\n        const button = ev.currentTarget;\r\n        if (!button)\r\n            return;\r\n        const dialog = new AddWidgetDialog_1.AddWidgetDialog(tuxbar.getTuxboard());\r\n        dialog.getWidgetDialog().addEventListener('show.bs.modal', e => {\r\n            this.service.getWidgetDialogService()\r\n                .then((result) => {\r\n                dialog.initialize(result);\r\n                dialog.hideOverlay();\r\n            });\r\n        }, { once: true });\r\n        const bsDialog = new bootstrap_bundle_1.Modal(dialog.getWidgetDialog());\r\n        bsDialog.show();\r\n    }\r\n}\r\nexports.AddWidgetButton = AddWidgetButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/AddWidgetButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/ChangeLayoutButton.ts":
/*!*********************************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/ChangeLayoutButton.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ChangeLayoutButton = void 0;\r\nconst TuxbarButton_1 = __webpack_require__(/*! ./TuxbarButton */ \"./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts\");\r\nconst ChangeLayoutDialog_1 = __webpack_require__(/*! ../Dialogs/ChangeLayoutDialog/ChangeLayoutDialog */ \"./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutDialog.ts\");\r\nconst bootstrap_bundle_1 = __webpack_require__(/*! ../../../lib/bootstrap/dist/js/bootstrap.bundle */ \"./wwwroot/lib/bootstrap/dist/js/bootstrap.bundle.js\");\r\nconst ChangeLayoutService_1 = __webpack_require__(/*! ../Dialogs/ChangeLayoutDialog/ChangeLayoutService */ \"./wwwroot/src/Extras/Dialogs/ChangeLayoutDialog/ChangeLayoutService.ts\");\r\nclass ChangeLayoutButton extends TuxbarButton_1.TuxbarButton {\r\n    constructor(tuxBar, changeLayoutSelector = null) {\r\n        super(tuxBar, changeLayoutSelector);\r\n        this.tuxbarChangeLayoutButtonSelector = \"#layout-button\";\r\n        this.service = new ChangeLayoutService_1.ChangeLayoutService();\r\n        this.selector = changeLayoutSelector || this.tuxbarChangeLayoutButtonSelector;\r\n        const element = this.getDom();\r\n        if (element) {\r\n            element.addEventListener(\"click\", (ev) => { this.changeLayoutClick(ev, tuxBar); }, false);\r\n        }\r\n    }\r\n    getDom() {\r\n        return this.tuxBar.getDom().querySelector(this.selector);\r\n    }\r\n    changeLayoutClick(ev, tuxbar) {\r\n        const button = ev.currentTarget;\r\n        if (!button)\r\n            return;\r\n        const dashboard = tuxbar.getTuxboard();\r\n        const tab = dashboard.getTab();\r\n        const dialog = new ChangeLayoutDialog_1.ChangeLayoutDialog(dashboard);\r\n        dialog.getDom().addEventListener('show.bs.modal', (e) => __awaiter(this, void 0, void 0, function* () {\r\n            yield this.service.getLayoutDialog(tab.getCurrentTabId())\r\n                .then((result) => {\r\n                dialog.initialize(result);\r\n                dialog.hideOverlay();\r\n            });\r\n        }), { once: true });\r\n        const bsDialog = new bootstrap_bundle_1.Modal(dialog.getLayoutDialog());\r\n        bsDialog.show();\r\n    }\r\n}\r\nexports.ChangeLayoutButton = ChangeLayoutButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/ChangeLayoutButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/RefreshButton.ts":
/*!****************************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/RefreshButton.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RefreshButton = void 0;\r\nconst TuxbarButton_1 = __webpack_require__(/*! ./TuxbarButton */ \"./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts\");\r\nclass RefreshButton extends TuxbarButton_1.TuxbarButton {\r\n    constructor(tuxBar, changeLayoutSelector = null) {\r\n        super(tuxBar, changeLayoutSelector);\r\n        this.tuxbarRefreshButtonSelector = \"#refresh-button\";\r\n        this.selector = changeLayoutSelector || this.tuxbarRefreshButtonSelector;\r\n        const element = this.getDom();\r\n        if (element) {\r\n            element.addEventListener(\"click\", (ev) => {\r\n                this.tuxBar.getTuxboard().refresh();\r\n            }, false);\r\n        }\r\n    }\r\n    getDom() {\r\n        return this.tuxBar.getDom().querySelector(this.selector);\r\n    }\r\n}\r\nexports.RefreshButton = RefreshButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/RefreshButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/Tuxbar.ts":
/*!*********************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/Tuxbar.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tuxbar = void 0;\r\nconst TuxbarMessage_1 = __webpack_require__(/*! ./TuxbarMessage */ \"./wwwroot/src/Extras/Tuxbar/TuxbarMessage.ts\");\r\nconst AddWidgetButton_1 = __webpack_require__(/*! ./AddWidgetButton */ \"./wwwroot/src/Extras/Tuxbar/AddWidgetButton.ts\");\r\nconst ChangeLayoutButton_1 = __webpack_require__(/*! ./ChangeLayoutButton */ \"./wwwroot/src/Extras/Tuxbar/ChangeLayoutButton.ts\");\r\nconst RefreshButton_1 = __webpack_require__(/*! ./RefreshButton */ \"./wwwroot/src/Extras/Tuxbar/RefreshButton.ts\");\r\nclass Tuxbar {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.tuxbarSelector = \".tuxbar\";\r\n        this.controls = [];\r\n        this.tuxbarSelector = selector || this.tuxbarSelector;\r\n        this.initialize();\r\n    }\r\n    getDom() {\r\n        return document.querySelector(this.tuxbarSelector);\r\n    }\r\n    getTuxboard() {\r\n        return this.parent;\r\n    }\r\n    initialize() {\r\n        this.controls.push(new AddWidgetButton_1.AddWidgetButton(this));\r\n        this.controls.push(new ChangeLayoutButton_1.ChangeLayoutButton(this));\r\n        this.controls.push(new RefreshButton_1.RefreshButton(this));\r\n        this.controls.push(new TuxbarMessage_1.TuxbarMessage(this));\r\n    }\r\n}\r\nexports.Tuxbar = Tuxbar;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/Tuxbar.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts":
/*!***************************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TuxbarButton = void 0;\r\nclass TuxbarButton {\r\n    constructor(tuxBar, selector) {\r\n        this.tuxBar = tuxBar;\r\n        this.selector = selector;\r\n    }\r\n}\r\nexports.TuxbarButton = TuxbarButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/TuxbarButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Extras/Tuxbar/TuxbarMessage.ts":
/*!****************************************************!*\
  !*** ./wwwroot/src/Extras/Tuxbar/TuxbarMessage.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TuxbarMessage = void 0;\r\nclass TuxbarMessage {\r\n    constructor(tuxBar, selector = null) {\r\n        this.tuxBar = tuxBar;\r\n        this.selector = selector;\r\n        this.tuxbarMessageSelector = \"#tuxbar-status\";\r\n        this.tuxbarMessageSelector = selector || this.tuxbarMessageSelector;\r\n    }\r\n    getDom() {\r\n        return this.tuxBar.getDom().querySelector(this.tuxbarMessageSelector);\r\n    }\r\n    setMessage(message, fade) {\r\n        const control = this.getDom();\r\n        if (control)\r\n            control.innerHTML = message;\r\n    }\r\n}\r\nexports.TuxbarMessage = TuxbarMessage;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Extras/Tuxbar/TuxbarMessage.ts?");

/***/ }),

/***/ "./wwwroot/src/Models/DragWidgetInfo.ts":
/*!**********************************************!*\
  !*** ./wwwroot/src/Models/DragWidgetInfo.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DragWidgetInfo = void 0;\r\nclass DragWidgetInfo {\r\n    constructor(placementId, currentColumnIndex, currentLayoutRowId, previousColumnIndex, previousLayoutRowId) {\r\n        this.placementId = placementId;\r\n        this.currentColumnIndex = currentColumnIndex;\r\n        this.currentLayoutRowId = currentLayoutRowId;\r\n        this.previousColumnIndex = previousColumnIndex;\r\n        this.previousLayoutRowId = previousLayoutRowId;\r\n    }\r\n}\r\nexports.DragWidgetInfo = DragWidgetInfo;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Models/DragWidgetInfo.ts?");

/***/ }),

/***/ "./wwwroot/src/Models/PlacementItem.ts":
/*!*********************************************!*\
  !*** ./wwwroot/src/Models/PlacementItem.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PlacementItem = void 0;\r\nclass PlacementItem {\r\n    constructor(PlacementId, Index, LayoutRowId, ColumnIndex, Static = false) {\r\n        this.PlacementId = PlacementId;\r\n        this.Index = Index;\r\n        this.LayoutRowId = LayoutRowId;\r\n        this.ColumnIndex = ColumnIndex;\r\n        this.Static = Static;\r\n    }\r\n}\r\nexports.PlacementItem = PlacementItem;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Models/PlacementItem.ts?");

/***/ }),

/***/ "./wwwroot/src/Models/SettingValue.ts":
/*!********************************************!*\
  !*** ./wwwroot/src/Models/SettingValue.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingValue = void 0;\r\nclass SettingValue {\r\n    constructor(WidgetSettingId, Value) {\r\n        this.WidgetSettingId = WidgetSettingId;\r\n        this.Value = Value;\r\n    }\r\n}\r\nexports.SettingValue = SettingValue;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Models/SettingValue.ts?");

/***/ }),

/***/ "./wwwroot/src/Models/WidgetProperties.ts":
/*!************************************************!*\
  !*** ./wwwroot/src/Models/WidgetProperties.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetProperties = void 0;\r\nclass WidgetProperties {\r\n    constructor(PlacementId, ColumnIndex, Index, LayoutRowId) {\r\n        this.PlacementId = PlacementId;\r\n        this.ColumnIndex = ColumnIndex;\r\n        this.Index = Index;\r\n        this.LayoutRowId = LayoutRowId;\r\n    }\r\n}\r\nexports.WidgetProperties = WidgetProperties;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Models/WidgetProperties.ts?");

/***/ }),

/***/ "./wwwroot/src/Services/TuxboardService.ts":
/*!*************************************************!*\
  !*** ./wwwroot/src/Services/TuxboardService.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TuxboardService = void 0;\r\nconst BaseService_1 = __webpack_require__(/*! ../core/BaseService */ \"./wwwroot/src/core/BaseService.ts\");\r\nclass TuxboardService extends BaseService_1.BaseService {\r\n    constructor(debugParam = false) {\r\n        super(debugParam);\r\n        this.tuxWidgetDialogUrl = \"/widgetdialog/\";\r\n        this.tuxWidgetSettingsUrl = \"/widgetsettings/\";\r\n        this.tuxWidgetAddWidgetUrl = \"/widgetdialog/addwidget/\";\r\n        this.tuxWidgetTemplateUrl = \"/WidgetTemplate/\";\r\n        this.tuxRefreshTuxboardUrl = \"/Tuxboard/Get/\";\r\n        this.tuxToolCollapseUrl = \"/Tuxboard/CollapseWidget/\";\r\n        this.tuxWidgetPlacementUrl = \"/Tuxboard/Put/\";\r\n        this.tuxWidgetRemoveWidgetUrl = \"/Tuxboard/removewidget/\";\r\n        this.tuxWidgetContentUrl = \"/Widget/\";\r\n        this.tuxWidgetSaveSettingsUrl = \"/WidgetSettings/Save/\";\r\n    }\r\n    /* Services */\r\n    /* Service: Save Widget Placement */\r\n    updateWidgetPlacementStatus( /* use data */) { }\r\n    saveWidgetPlacementService(ev, dragInfo) {\r\n        const postData = {\r\n            Column: dragInfo.currentColumnIndex,\r\n            LayoutRowId: dragInfo.currentLayoutRowId,\r\n            PreviousColumn: dragInfo.previousColumnIndex,\r\n            PreviousLayout: dragInfo.previousLayoutRowId,\r\n            PlacementId: dragInfo.placementId,\r\n            PlacementList: dragInfo.placementList\r\n        };\r\n        const request = new Request(this.tuxWidgetPlacementUrl, {\r\n            method: \"put\",\r\n            body: JSON.stringify(postData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Remove Widget */\r\n    removeWidgetService(placementId) {\r\n        const postData = {\r\n            TabId: \"\",\r\n            PlacementId: placementId\r\n        };\r\n        const request = new Request(this.tuxWidgetRemoveWidgetUrl, {\r\n            method: 'delete',\r\n            body: JSON.stringify(postData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsJson)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Update Collapsed Widget */\r\n    updateCollapsedWidgetService(widgetId, collapsed) {\r\n        const postData = {\r\n            Id: widgetId,\r\n            Collapsed: collapsed\r\n        };\r\n        const request = new Request(this.tuxToolCollapseUrl, {\r\n            method: 'post',\r\n            body: JSON.stringify(postData)\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsJson)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Get Widget Template */\r\n    getWidgetTemplate(placementId) {\r\n        const request = new Request(this.tuxWidgetTemplateUrl + placementId, { method: \"get\" });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Get Widget */\r\n    getWidgetService(placementId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const request = new Request(this.tuxWidgetContentUrl + placementId, { method: \"get\" });\r\n            return yield fetch(request)\r\n                .then(this.validateResponse)\r\n                .then(this.readResponseAsText)\r\n                .catch(this.logError);\r\n        });\r\n    }\r\n    /* Service: Refresh Tuxboard */\r\n    refreshService() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const request = new Request(this.tuxRefreshTuxboardUrl, { method: \"get\" });\r\n            return yield fetch(request)\r\n                .then(this.validateResponse)\r\n                .then(this.readResponseAsText)\r\n                .catch(this.logError);\r\n        });\r\n    }\r\n    /* Service: Widget Settings */\r\n    //displayWidgetSettings(widget, data) {\r\n    //    const settings = getWidgetSettings(widget);\r\n    //    if (settings) {\r\n    //        settings.innerHTML = data;\r\n    //        hideWidgetBody(widget);\r\n    //        showWidgetSettings(widget);\r\n    //        attachSettingEvents(widget);\r\n    //    } else {\r\n    //        showWidgetBody(widget);\r\n    //        hideWidgetSettings(widget);\r\n    //    }\r\n    //    hideOverlay(widget);\r\n    //    // initialize();\r\n    //}\r\n    getWidgetSettings(placementId) {\r\n        const request = new Request(this.tuxWidgetSettingsUrl + placementId, { method: \"get\" });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsText)\r\n            .catch(this.logError);\r\n    }\r\n    /* Service: Save Widget Settings */\r\n    saveSettings(values) {\r\n        let postData = {\r\n            Settings: Array.from(values).map((item) => {\r\n                return {\r\n                    WidgetSettingId: item.WidgetSettingId,\r\n                    Value: item.Value\r\n                };\r\n            })\r\n        };\r\n        const request = new Request(this.tuxWidgetSaveSettingsUrl, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(postData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return fetch(request)\r\n            .then(this.validateResponse)\r\n            .then(this.readResponseAsJson)\r\n            .catch(this.logError);\r\n    }\r\n}\r\nexports.TuxboardService = TuxboardService;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Services/TuxboardService.ts?");

/***/ }),

/***/ "./wwwroot/src/Tuxboard.ts":
/*!*********************************!*\
  !*** ./wwwroot/src/Tuxboard.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tuxboard = void 0;\r\nconst common_1 = __webpack_require__(/*! ./core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst Tab_1 = __webpack_require__(/*! ./core/Tab */ \"./wwwroot/src/core/Tab.ts\");\r\nconst TuxboardService_1 = __webpack_require__(/*! ./Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nconst DragWidgetInfo_1 = __webpack_require__(/*! ./Models/DragWidgetInfo */ \"./wwwroot/src/Models/DragWidgetInfo.ts\");\r\nconst Tuxbar_1 = __webpack_require__(/*! ./Extras/Tuxbar/Tuxbar */ \"./wwwroot/src/Extras/Tuxbar/Tuxbar.ts\");\r\nclass Tuxboard {\r\n    constructor(selector = null) {\r\n        this.service = new TuxboardService_1.TuxboardService();\r\n        this.tuxboardSelector = \".dashboard\";\r\n        this.tuxboardSelector = selector || this.tuxboardSelector;\r\n        this.initialize();\r\n        this.updateAllWidgets();\r\n    }\r\n    getDom() {\r\n        return document.querySelector(this.tuxboardSelector);\r\n    }\r\n    getDashboardId() {\r\n        return common_1.getDataId(this.getDom());\r\n    }\r\n    initialize() {\r\n        this.attachDragAndDropEvents();\r\n    }\r\n    getTab(reload = false) {\r\n        if (!this.tab || reload) {\r\n            if (this.tab) {\r\n                delete this.tab;\r\n            }\r\n            this.tab = new Tab_1.Tab(this.getDom());\r\n        }\r\n        return this.tab;\r\n    }\r\n    addWidget(placementId) {\r\n        this.service.getWidgetTemplate(placementId)\r\n            .then((data) => {\r\n            if (!data)\r\n                return;\r\n            const column = this.getFirstColumn();\r\n            if (!column)\r\n                return;\r\n            this.addWidgetToColumn(column, data);\r\n            const widgets = this.getWidgetsByColumn(column);\r\n            const widgetList = widgets.getWidgets()\r\n                .filter((item, index) => item.getPlacementId() === placementId);\r\n            if (widgetList) {\r\n                this.updateWidgets(widgetList);\r\n            }\r\n        });\r\n    }\r\n    refresh() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.service.refreshService()\r\n                .then((data) => {\r\n                const db = this.getDom();\r\n                if (db) {\r\n                    common_1.clearNodes(db);\r\n                    const nodes = common_1.createFromHtml(String(data));\r\n                    nodes.forEach(node => db.insertAdjacentElement(\"beforeend\", node)); // Layout Rows\r\n                }\r\n            })\r\n                .catch(err => console.log(err));\r\n            this.initialize();\r\n            this.updateAllWidgets();\r\n        });\r\n    }\r\n    updateAllWidgets() {\r\n        const widgetPlacements = this.getWidgetsByTab(this.getTab(true));\r\n        this.updateWidgets(widgetPlacements);\r\n    }\r\n    updateWidgets(widgets) {\r\n        widgets.map((placement) => __awaiter(this, void 0, void 0, function* () {\r\n            yield placement.update();\r\n        }));\r\n    }\r\n    getWidgetsByTab(tab) {\r\n        return tab.getLayout().getWidgetPlacements();\r\n    }\r\n    getLayoutByTab(tab) {\r\n        return tab.getLayout();\r\n    }\r\n    getLayoutRowsByLayout(layout) {\r\n        return layout.getLayoutRows();\r\n    }\r\n    getColumnsByLayoutRow(layoutRow) {\r\n        return layoutRow.getColumns();\r\n    }\r\n    getWidgetsByColumn(column) {\r\n        return column.getWidgetCollection();\r\n    }\r\n    hasWidgets(tab) {\r\n        return this.getWidgetsByTab(tab).length > 0;\r\n    }\r\n    addWidgetToColumn(column, template) {\r\n        if (column) {\r\n            column.getDom().insertAdjacentHTML(\"beforeend\", template);\r\n        }\r\n    }\r\n    getFirstColumn() {\r\n        const layout = this.getLayoutByTab(this.getTab());\r\n        const columns = this.getColumnsByLayoutRow(layout.layoutRows[0]);\r\n        return columns && columns.length > 0 ? columns[0] : null;\r\n    }\r\n    ////////////////////\r\n    // Drag and Drop\r\n    /////////////////////\r\n    attachDragAndDropEvents() {\r\n        const layout = this.getTab().getLayout();\r\n        const columns = layout.getColumns();\r\n        for (const column of columns) {\r\n            column.getDom().addEventListener('dragstart', (ev) => {\r\n                this.dragStart(ev, column, this);\r\n            }, false);\r\n            column.getDom().addEventListener(\"dragover\", this.dragover, false);\r\n            column.getDom().addEventListener(\"dragenter\", this.dragenter, false);\r\n            column.getDom().addEventListener(\"dragleave\", this.dragLeave, false);\r\n            column.getDom().addEventListener(\"drop\", (ev) => { this.drop(ev, this); }, false);\r\n            column.getDom().addEventListener(\"dragend\", (ev) => { this.dragEnd(ev, this); }, false);\r\n        }\r\n    }\r\n    dragStart(ev, column, self) {\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        ev.dataTransfer.effectAllowed = 'move';\r\n        const elem = ev.target;\r\n        self.dragInfo = new DragWidgetInfo_1.DragWidgetInfo(elem.getAttribute(common_1.dataId), column.getIndex(), column.layoutRowId, column.getIndex(), column.layoutRowId);\r\n        ev.dataTransfer.setData('text', JSON.stringify(self.dragInfo));\r\n    }\r\n    dragover(ev) {\r\n        if (ev.preventDefault)\r\n            ev.preventDefault();\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        ev.dataTransfer.dropEffect = 'move';\r\n        const target = ev.target;\r\n        return common_1.isWidget(target, \".card\"); // TODO: DefaultSelector.getInstance().widgetSelector);\r\n    }\r\n    dragenter(ev) {\r\n        if (ev.preventDefault)\r\n            ev.preventDefault();\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        const target = ev.target;\r\n        if (target) {\r\n            target.classList.add('over');\r\n        }\r\n    }\r\n    dragLeave(ev) {\r\n        if (ev.preventDefault)\r\n            ev.preventDefault();\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        const target = ev.target;\r\n        if (target) {\r\n            target.classList.remove(\"over\");\r\n        }\r\n    }\r\n    drop(ev, self) {\r\n        if (ev.preventDefault)\r\n            ev.preventDefault();\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        const targetElement = ev.target; // .column or .card\r\n        self.dragInfo = JSON.parse(ev.dataTransfer.getData(\"text\"));\r\n        const draggedWidget = document.querySelector(`[${common_1.dataId}='${self.dragInfo.placementId}'`);\r\n        if (common_1.isWidget(targetElement, \".card\")) { // TODO: DefaultSelector.getInstance().widgetSelector)}) {\r\n            targetElement.insertBefore(draggedWidget, targetElement);\r\n            // TODO: } else if (targetElement.classList.contains(noPeriod(DefaultSelector.getInstance().columnSelector))) {\r\n        }\r\n        else if (targetElement.classList.contains(common_1.noPeriod(\".column\"))) {\r\n            const closestWidget = common_1.getClosestByClass(targetElement, \r\n            // TODO: noPeriod(DefaultSelector.getInstance().widgetSelector));\r\n            common_1.noPeriod(\".card\"));\r\n            if (closestWidget) {\r\n                targetElement.insertBefore(draggedWidget, closestWidget);\r\n            }\r\n            else {\r\n                targetElement.append(draggedWidget);\r\n            }\r\n        }\r\n    }\r\n    dragEnd(ev, self) {\r\n        if (ev.preventDefault)\r\n            ev.preventDefault();\r\n        if (ev.stopPropagation)\r\n            ev.stopPropagation();\r\n        document.querySelectorAll(\".column\") // TODO: DefaultSelector.getInstance().columnSelector)\r\n            .forEach((elem) => elem.classList.remove(\"over\"));\r\n        const id = self.dragInfo.placementId;\r\n        self.dragInfo.placementList = common_1.getWidgetSnapshot(self.dragInfo);\r\n        const selected = self.dragInfo.placementList\r\n            .filter(elem => elem.PlacementId === id);\r\n        if (selected && selected.length > 0) {\r\n            self.dragInfo.currentLayoutRowId = selected[0].LayoutRowId;\r\n            self.dragInfo.currentColumnIndex = selected[0].ColumnIndex;\r\n        }\r\n        this.service.saveWidgetPlacementService(ev, self.dragInfo)\r\n            .then((result) => console.log(\"Saved. Message: \" + result));\r\n        ev.dataTransfer.clearData();\r\n    }\r\n}\r\nexports.Tuxboard = Tuxboard;\r\n//(async function() {\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const dashboard = new Tuxboard();\r\n    const tuxbar = new Tuxbar_1.Tuxbar(dashboard);\r\n});\r\n//})\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Tuxboard.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetCollection.ts":
/*!************************************************!*\
  !*** ./wwwroot/src/Widget/WidgetCollection.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetCollection = void 0;\r\nconst WidgetPlacement_1 = __webpack_require__(/*! ../Widget/WidgetPlacement */ \"./wwwroot/src/Widget/WidgetPlacement.ts\");\r\nclass WidgetCollection {\r\n    constructor(parent, columnIndex, layoutRowId, selector = null) {\r\n        this.parent = parent;\r\n        this.columnIndex = columnIndex;\r\n        this.layoutRowId = layoutRowId;\r\n        this.widgetSelector = \".card\";\r\n        this.widgetSelector = selector || this.widgetSelector;\r\n    }\r\n    getWidgetSelector() {\r\n        return this.widgetSelector;\r\n    }\r\n    getWidgets() {\r\n        return Array.from(this.parent.querySelectorAll(this.widgetSelector))\r\n            .map((element, index) => this.createWidget(element, index));\r\n    }\r\n    createWidget(element, index) {\r\n        const widget = new WidgetPlacement_1.WidgetPlacement(this.parent);\r\n        const id = element.getAttribute(widget.getAttributeName());\r\n        widget.setPlacementId(id);\r\n        widget.setIndex(index);\r\n        widget.setColumnIndex(this.columnIndex);\r\n        return widget;\r\n    }\r\n    getWidgetProperties(widget) {\r\n        return widget.getProperties();\r\n    }\r\n}\r\nexports.WidgetCollection = WidgetCollection;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetCollection.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetPlacement.ts":
/*!***********************************************!*\
  !*** ./wwwroot/src/Widget/WidgetPlacement.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetPlacement = void 0;\r\nconst common_1 = __webpack_require__(/*! ../core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst WidgetSettings_1 = __webpack_require__(/*! ./WidgetSettings */ \"./wwwroot/src/Widget/WidgetSettings.ts\");\r\nconst WidgetToolBar_1 = __webpack_require__(/*! ./WidgetToolbar/WidgetToolBar */ \"./wwwroot/src/Widget/WidgetToolbar/WidgetToolBar.ts\");\r\nconst TuxboardService_1 = __webpack_require__(/*! ../Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nconst WidgetProperties_1 = __webpack_require__(/*! ../Models/WidgetProperties */ \"./wwwroot/src/Models/WidgetProperties.ts\");\r\nclass WidgetPlacement {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.widgetSelector = \".card\";\r\n        this.widgetTitleSelector = \".card-title\";\r\n        this.widgetBodySelector = \".card-body\";\r\n        this.generalOverlaySelector = \".overlay\";\r\n        this.loadingSelector = \".loading-status\";\r\n        this.widgetOverlaySelector = this.generalOverlaySelector + this.loadingSelector;\r\n        this.service = new TuxboardService_1.TuxboardService();\r\n        this.widgetSelector = selector || this.widgetSelector;\r\n        this.settings = new WidgetSettings_1.WidgetSettings(this);\r\n    }\r\n    isCollapsed() {\r\n        return this.getDom().classList.contains(common_1.collapsedToggleSelector);\r\n    }\r\n    isStatic() {\r\n        return this.getDom().getAttribute(common_1.isStaticAttribute) === \"true\";\r\n    }\r\n    getDom() { return this.parent.querySelector(this.getSelector()); }\r\n    getAttributeName() { return common_1.dataId; }\r\n    setPlacementId(value) { this.placementId = value; }\r\n    getPlacementId() { return this.placementId; }\r\n    setIndex(value) { this.index = value; }\r\n    getIndex() { return this.index; }\r\n    setColumnIndex(value) { this.columnIndex = value; }\r\n    getColumnIndex() { return this.columnIndex; }\r\n    getSelector() { return this.getSelectorWithId(this.getPlacementId()); }\r\n    getSelectorWithId(placementId) {\r\n        // \".card[data-id='blahblahblah']\"\r\n        return `${this.widgetSelector}[${this.getAttributeName()}='${placementId}']`;\r\n    }\r\n    getBody() {\r\n        return this.getDom().querySelector(this.widgetBodySelector);\r\n    }\r\n    hideBody() {\r\n        const body = this.getBody();\r\n        if (body && body.getAttribute('hidden') === null) {\r\n            body.setAttribute('hidden', '');\r\n        }\r\n    }\r\n    showBody() {\r\n        const body = this.getBody();\r\n        if (body && body.getAttribute('hidden') !== null) {\r\n            body.removeAttribute('hidden');\r\n        }\r\n    }\r\n    getOverlay() {\r\n        return this.getDom().querySelector(this.widgetOverlaySelector);\r\n    }\r\n    showOverlay() {\r\n        const overlay = this.getOverlay();\r\n        if (overlay && overlay.getAttribute('hidden') !== null) {\r\n            overlay.removeAttribute('hidden');\r\n        }\r\n    }\r\n    hideOverlay() {\r\n        const overlay = this.getOverlay();\r\n        if (overlay && overlay.getAttribute('hidden') === null) {\r\n            overlay.setAttribute('hidden', '');\r\n        }\r\n    }\r\n    getWidgetBodySelector() { return this.widgetBodySelector; }\r\n    setWidgetBodySelector(value) { this.widgetBodySelector = value; }\r\n    getWidgetOverlay() { return this.widgetOverlaySelector; }\r\n    setWidgetOverlay(value) { this.widgetOverlaySelector = value; }\r\n    setBody(html) {\r\n        const widget = this.getDom();\r\n        if (widget) {\r\n            const modalBody = widget.querySelector(this.widgetBodySelector);\r\n            if (modalBody) {\r\n                common_1.clearNodes(modalBody);\r\n                modalBody.insertAdjacentHTML('afterbegin', html);\r\n            }\r\n        }\r\n    }\r\n    setTitle(title) {\r\n        const widgetTitle = this.getDom().querySelector(this.widgetTitleSelector);\r\n        if (widgetTitle) {\r\n            widgetTitle.innerHTML = title;\r\n        }\r\n    }\r\n    showWidgetSettings() {\r\n        this.settings.displaySettings();\r\n    }\r\n    updateWidgetToolbar() {\r\n        if (typeof this.toolbar != \"object\") {\r\n            this.toolbar = new WidgetToolBar_1.WidgetToolBar(this);\r\n        }\r\n    }\r\n    update() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.isStatic())\r\n                return;\r\n            this.showOverlay();\r\n            yield this.service.getWidgetService(this.placementId)\r\n                .then((data) => {\r\n                this.setBody(data);\r\n                if (!this.isCollapsed()) {\r\n                    this.showBody();\r\n                }\r\n                this.hideOverlay();\r\n                this.updateWidgetToolbar();\r\n            });\r\n        });\r\n    }\r\n    getProperties() {\r\n        return new WidgetProperties_1.WidgetProperties(this.placementId, this.getColumnIndex(), this.getIndex(), this.parent.getAttribute(common_1.dataId));\r\n    }\r\n}\r\nexports.WidgetPlacement = WidgetPlacement;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetPlacement.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetSettings.ts":
/*!**********************************************!*\
  !*** ./wwwroot/src/Widget/WidgetSettings.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetSettings = void 0;\r\nconst TuxboardService_1 = __webpack_require__(/*! ../Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nconst common_1 = __webpack_require__(/*! ../core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst SettingValue_1 = __webpack_require__(/*! ../Models/SettingValue */ \"./wwwroot/src/Models/SettingValue.ts\");\r\nclass WidgetSettings {\r\n    constructor(widget, selector = null) {\r\n        this.widget = widget;\r\n        this.selector = selector;\r\n        this.widgetSettingsSelector = \".widget-settings\";\r\n        this.widgetSettingsCancelButtonSelector = \".settings-cancel\";\r\n        this.widgetSettingsSaveButtonSelector = \".settings-save\";\r\n        this.widgetSettingInputsSelector = \".setting-value\";\r\n        this.service = new TuxboardService_1.TuxboardService();\r\n        this.widgetSettingsSelector = selector || this.widgetSettingsSelector;\r\n    }\r\n    getDom() {\r\n        return this.widget.getDom().querySelector(this.widgetSettingsSelector);\r\n    }\r\n    showWidgetSettings() {\r\n        const settings = this.getDom();\r\n        if (settings && settings.getAttribute('hidden') !== null) {\r\n            settings.removeAttribute('hidden');\r\n        }\r\n        this.widget.hideBody();\r\n    }\r\n    hideWidgetSettings() {\r\n        const settings = this.getDom();\r\n        if (settings && settings.getAttribute('hidden') === null) {\r\n            settings.setAttribute('hidden', '');\r\n        }\r\n        this.widget.showBody();\r\n    }\r\n    attachSettingsEvent() {\r\n        const saveButton = this.getDom().querySelector(this.widgetSettingsSaveButtonSelector);\r\n        saveButton.addEventListener('click', (ev) => {\r\n            this.saveSettingsClick(ev);\r\n        }, false);\r\n        const cancelButton = this.getDom().querySelector(this.widgetSettingsCancelButtonSelector);\r\n        cancelButton.addEventListener('click', () => {\r\n            this.hideWidgetSettings();\r\n            this.widget.showBody();\r\n        }, false);\r\n    }\r\n    getSettingValues() {\r\n        const inputs = this.getDom().querySelectorAll(this.widgetSettingInputsSelector);\r\n        return Array.from(inputs).map((elem, index) => {\r\n            return new SettingValue_1.SettingValue(common_1.getDataId(elem), elem.value);\r\n        });\r\n    }\r\n    saveSettingsClick(ev) {\r\n        const values = this.getSettingValues();\r\n        this.service.saveSettings(values)\r\n            .then((response) => {\r\n            // Find the title if there is one\r\n            const setting = Array.from(response).filter((elem) => elem.name.toLowerCase() === \"widgettitle\")[0];\r\n            if (setting) {\r\n                this.widget.setTitle(setting.value);\r\n            }\r\n            this.hideWidgetSettings();\r\n            this.widget.update();\r\n        });\r\n    }\r\n    displaySettings() {\r\n        this.widget.showOverlay();\r\n        this.service.getWidgetSettings(this.widget.getPlacementId())\r\n            .then((data) => {\r\n            const settings = this.getDom();\r\n            if (settings) {\r\n                common_1.clearNodes(settings);\r\n                settings.insertAdjacentHTML(\"beforeend\", String(data));\r\n                this.widget.hideBody();\r\n                this.widget.hideOverlay();\r\n                this.showWidgetSettings();\r\n                this.attachSettingsEvent();\r\n            }\r\n            else {\r\n                this.widget.showBody();\r\n                this.hideWidgetSettings();\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.WidgetSettings = WidgetSettings;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetSettings.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetToolbar/WidgetCollapseButton.ts":
/*!******************************************************************!*\
  !*** ./wwwroot/src/Widget/WidgetToolbar/WidgetCollapseButton.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetCollapseButton = void 0;\r\nconst WidgetToolbarButton_1 = __webpack_require__(/*! ./WidgetToolbarButton */ \"./wwwroot/src/Widget/WidgetToolbar/WidgetToolbarButton.ts\");\r\nconst common_1 = __webpack_require__(/*! ../../core/common */ \"./wwwroot/src/core/common.ts\");\r\nconst TuxboardService_1 = __webpack_require__(/*! ../../Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nclass WidgetCollapseButton extends WidgetToolbarButton_1.WidgetToolbarButton {\r\n    constructor(parent, buttonSelector = null) {\r\n        super(parent, buttonSelector);\r\n        this.collapsedButtonSelector = \".collapse-widget\";\r\n        this.collapsedToggleSelector = \"collapsed\";\r\n        this.service = new TuxboardService_1.TuxboardService();\r\n        this.selector = buttonSelector || this.collapsedButtonSelector;\r\n        this.setName(\"collapseButton\");\r\n        const element = this.getDom();\r\n        if (element) {\r\n            element.addEventListener(\"click\", (ev) => { this.minimizeWidget(ev, parent); }, false);\r\n        }\r\n    }\r\n    minimizeWidget(ev, toolbar) {\r\n        const button = ev.currentTarget;\r\n        if (!button)\r\n            return;\r\n        const placementId = button.getAttribute(common_1.dataId);\r\n        const widget = toolbar.getWidgetPlacement().getDom();\r\n        if (widget) {\r\n            const minimized = widget.classList.contains(this.collapsedToggleSelector);\r\n            if (minimized) {\r\n                widget.classList.remove(this.collapsedToggleSelector);\r\n                this.showWidgetBody(placementId);\r\n                this.service.updateCollapsedWidgetService(placementId, false)\r\n                    .then((data) => { });\r\n            }\r\n            else {\r\n                widget.classList.add(this.collapsedToggleSelector);\r\n                this.hideWidgetBody(placementId);\r\n                this.service.updateCollapsedWidgetService(placementId, true)\r\n                    .then((data) => { });\r\n            }\r\n        }\r\n    }\r\n    getWidgetBody(placementId) {\r\n        const widget = common_1.getDomWidget(placementId);\r\n        if (widget)\r\n            return widget.querySelector(\".card\"); // TODO: DefaultSelector.getInstance().widgetBodySelector);\r\n        return null;\r\n    }\r\n    hideWidgetBody(placementId) {\r\n        const body = this.getWidgetBody(placementId);\r\n        if (body) {\r\n            body.setAttribute(\"hidden\", \"\");\r\n        }\r\n    }\r\n    showWidgetBody(placementId) {\r\n        const body = this.getWidgetBody(placementId);\r\n        if (body) {\r\n            body.removeAttribute(\"hidden\");\r\n        }\r\n    }\r\n}\r\nexports.WidgetCollapseButton = WidgetCollapseButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetToolbar/WidgetCollapseButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetToolbar/WidgetRemoveButton.ts":
/*!****************************************************************!*\
  !*** ./wwwroot/src/Widget/WidgetToolbar/WidgetRemoveButton.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetRemoveButton = void 0;\r\nconst WidgetToolbarButton_1 = __webpack_require__(/*! ./WidgetToolbarButton */ \"./wwwroot/src/Widget/WidgetToolbar/WidgetToolbarButton.ts\");\r\nconst TuxboardService_1 = __webpack_require__(/*! ../../Services/TuxboardService */ \"./wwwroot/src/Services/TuxboardService.ts\");\r\nconst common_1 = __webpack_require__(/*! ../../core/common */ \"./wwwroot/src/core/common.ts\");\r\nclass WidgetRemoveButton extends WidgetToolbarButton_1.WidgetToolbarButton {\r\n    constructor(parent, buttonSelector = null) {\r\n        super(parent, buttonSelector);\r\n        this.removeWidgetButtonSelector = \".remove-widget\";\r\n        this.service = new TuxboardService_1.TuxboardService();\r\n        this.selector = buttonSelector || this.removeWidgetButtonSelector;\r\n        this.setName(\"removeButton\");\r\n        const element = this.getDom();\r\n        if (element) {\r\n            element.addEventListener(\"click\", (ev) => { this.removeWidget(ev, parent); }, false);\r\n        }\r\n    }\r\n    removeWidget(ev, toolbar) {\r\n        const button = ev.currentTarget;\r\n        if (!button)\r\n            return;\r\n        const placementId = button.getAttribute(common_1.dataId);\r\n        this.service.removeWidgetService(placementId)\r\n            .then((result) => {\r\n            if (result && result.success) {\r\n                const widgetId = `[${common_1.dataId}='${result.id}']`;\r\n                const widget = document.querySelector(widgetId);\r\n                if (widget) {\r\n                    widget.remove();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.WidgetRemoveButton = WidgetRemoveButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetToolbar/WidgetRemoveButton.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetToolbar/WidgetToolBar.ts":
/*!***********************************************************!*\
  !*** ./wwwroot/src/Widget/WidgetToolbar/WidgetToolBar.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetToolBar = void 0;\r\nconst WidgetCollapseButton_1 = __webpack_require__(/*! ./WidgetCollapseButton */ \"./wwwroot/src/Widget/WidgetToolbar/WidgetCollapseButton.ts\");\r\nconst WidgetRemoveButton_1 = __webpack_require__(/*! ./WidgetRemoveButton */ \"./wwwroot/src/Widget/WidgetToolbar/WidgetRemoveButton.ts\");\r\nclass WidgetToolBar {\r\n    constructor(widgetPlacement, selector = null) {\r\n        this.widgetPlacement = widgetPlacement;\r\n        this.widgetToolbarSelector = \".card-tools\";\r\n        this.widgetToolDropdownSelector = \".dropdown-card-tool\";\r\n        this.dropdownRefreshOption = \".refresh-option\";\r\n        this.dropdownSettingsOption = \".settings-option\";\r\n        this.buttons = new Array();\r\n        this.widgetToolbarSelector = selector || this.widgetToolbarSelector;\r\n        // Default buttons\r\n        this.addButton(new WidgetCollapseButton_1.WidgetCollapseButton(this));\r\n        this.addButton(new WidgetRemoveButton_1.WidgetRemoveButton(this));\r\n        // Dropdown options\r\n        this.setupWidgetDropdown();\r\n    }\r\n    getDom() {\r\n        return this.widgetPlacement\r\n            .getDom()\r\n            .querySelector(this.widgetToolbarSelector);\r\n    }\r\n    getWidgetPlacement() { return this.widgetPlacement; }\r\n    addButton(button) {\r\n        this.buttons.push(button);\r\n    }\r\n    removeButton(button) {\r\n        const name = button.getName();\r\n        const index = this.buttons.indexOf(name, 0);\r\n        if (index > -1) {\r\n            this.buttons.splice(index, 1);\r\n        }\r\n    }\r\n    setupWidgetDropdown() {\r\n        /* dropdown options */\r\n        const settingsOption = this.widgetPlacement.getDom().querySelector(this.dropdownSettingsOption);\r\n        if (settingsOption) {\r\n            settingsOption.addEventListener(\"click\", (ev) => {\r\n                this.widgetPlacement.showWidgetSettings();\r\n            }, false);\r\n        }\r\n        const refreshOption = this.widgetPlacement.getDom().querySelector(this.dropdownRefreshOption);\r\n        if (refreshOption) {\r\n            refreshOption.addEventListener(\"click\", (ev) => {\r\n                ev.preventDefault();\r\n                this.widgetPlacement.update();\r\n            }, false);\r\n        }\r\n    }\r\n    attachSettingEvents(widget) {\r\n        //let saveButton = widget.querySelector(tuxWidgetSettingsSave);\r\n        //saveButton.addEventListener(\"click\", saveSettingsClick, false);\r\n        //let cancelButton = widget.querySelector(tuxWidgetSettingsCancel);\r\n        //cancelButton.addEventListener(\"click\", cancelSettingsClick, false);\r\n    }\r\n    cancelSettingsClick(ev) {\r\n        //let widget = getParentByClass(ev, tuxWidgetClass);\r\n        //if (widget) {\r\n        //    hideWidgetSettings(widget);\r\n        //    showWidgetBody(widget);\r\n        //}\r\n    }\r\n    saveSettingsClick(ev) {\r\n        //let widget = getParentByClass(ev, tuxWidgetClass) as HTMLDivElement;\r\n        //if (widget) {\r\n        //    saveSettingsService(widget);\r\n        //}\r\n    }\r\n    settingsClick(ev) {\r\n        //let widget = getParentByClass(ev, tuxWidgetClass);\r\n        //if (widget) {\r\n        //    getWidgetSettingsService(getPlacementId(widget));\r\n        //}\r\n    }\r\n}\r\nexports.WidgetToolBar = WidgetToolBar;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetToolbar/WidgetToolBar.ts?");

/***/ }),

/***/ "./wwwroot/src/Widget/WidgetToolbar/WidgetToolbarButton.ts":
/*!*****************************************************************!*\
  !*** ./wwwroot/src/Widget/WidgetToolbar/WidgetToolbarButton.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.WidgetToolbarButton = void 0;\r\nclass WidgetToolbarButton {\r\n    constructor(parent, selector) {\r\n        this.parent = parent;\r\n        this.selector = selector;\r\n    }\r\n    getDom() { return this.parent.getDom().querySelector(this.selector); }\r\n    setName(name) { this.name = name; }\r\n    getName() { return name; }\r\n    getSelector() { return this.selector; }\r\n}\r\nexports.WidgetToolbarButton = WidgetToolbarButton;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/Widget/WidgetToolbar/WidgetToolbarButton.ts?");

/***/ }),

/***/ "./wwwroot/src/core/BaseDialog.ts":
/*!****************************************!*\
  !*** ./wwwroot/src/core/BaseDialog.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BaseDialog = void 0;\r\nclass BaseDialog {\r\n    constructor(selector) {\r\n        this.selector = selector;\r\n        this.dialogBodySelector = \".modal-body\";\r\n        this.generalOverlaySelector = \".overlay\";\r\n        this.loadingSelector = \".loading-status\";\r\n        this.dialogOverlaySelector = this.generalOverlaySelector + this.loadingSelector;\r\n    }\r\n    getDom() {\r\n        return document.querySelector(this.selector);\r\n    }\r\n    getOverlay() {\r\n        return this.getDom().querySelector(this.generalOverlaySelector);\r\n    }\r\n    showOverlay() {\r\n        const overlay = this.getOverlay();\r\n        if (overlay && overlay.hasAttribute(\"hidden\")) {\r\n            overlay.removeAttribute(\"hidden\");\r\n        }\r\n    }\r\n    hideOverlay() {\r\n        const overlay = this.getOverlay();\r\n        if (overlay && !overlay.hasAttribute(\"hidden\")) {\r\n            overlay.setAttribute(\"hidden\", \"\");\r\n        }\r\n    }\r\n}\r\nexports.BaseDialog = BaseDialog;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/BaseDialog.ts?");

/***/ }),

/***/ "./wwwroot/src/core/BaseService.ts":
/*!*****************************************!*\
  !*** ./wwwroot/src/core/BaseService.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BaseService = void 0;\r\nclass BaseService {\r\n    constructor(debugParam = false) {\r\n        this.debug = debugParam;\r\n    }\r\n    validateResponse(response) {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n            const status = `${response.status} - ${response.statusText}`;\r\n            throw Error(status);\r\n        }\r\n        return response;\r\n    }\r\n    readResponseAsJson(response) {\r\n        console.log(response);\r\n        return response.json();\r\n    }\r\n    readResponseAsText(response) {\r\n        console.log(response);\r\n        return response.text();\r\n    }\r\n    logError(error) {\r\n        console.log('Issue w/ fetch call: \\n', error);\r\n    }\r\n}\r\nexports.BaseService = BaseService;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/BaseService.ts?");

/***/ }),

/***/ "./wwwroot/src/core/Column.ts":
/*!************************************!*\
  !*** ./wwwroot/src/core/Column.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Column = void 0;\r\nconst common_1 = __webpack_require__(/*! ./common */ \"./wwwroot/src/core/common.ts\");\r\nconst WidgetCollection_1 = __webpack_require__(/*! ../Widget/WidgetCollection */ \"./wwwroot/src/Widget/WidgetCollection.ts\");\r\nclass Column {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.selector = selector;\r\n        this.columnSelector = \".column\";\r\n        this.columnSelector = selector || this.columnSelector;\r\n    }\r\n    getDom() { return this.parent; }\r\n    getAttributeName() { return common_1.dataId; }\r\n    getIndex() { return this.index; }\r\n    setIndex(value) { this.index = value; }\r\n    setLayoutRowId(value) { this.layoutRowId = value; }\r\n    getSelector() {\r\n        return this.selector;\r\n    }\r\n    getColumnSelector() {\r\n        // \".column[data-column='1']\"\r\n        return `${this.selector}:nth-child(${this.index + 1})`;\r\n    }\r\n    getWidgetCollection() {\r\n        if (!this.widgets) {\r\n            this.widgets = new WidgetCollection_1.WidgetCollection(this.parent, this.index, this.layoutRowId);\r\n        }\r\n        return this.widgets;\r\n    }\r\n    getPlacement(placementId) {\r\n        const item = this.getWidgetCollection().getWidgets().find((item, index) => item.getPlacementId() === placementId);\r\n        return item.getDom();\r\n    }\r\n    getColumnByPlacement(placementId) {\r\n        const placement = this.getPlacement(placementId);\r\n        return common_1.getClosestByClass(placement, common_1.noPeriod(this.columnSelector));\r\n    }\r\n}\r\nexports.Column = Column;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/Column.ts?");

/***/ }),

/***/ "./wwwroot/src/core/ColumnCollection.ts":
/*!**********************************************!*\
  !*** ./wwwroot/src/core/ColumnCollection.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColumnCollection = void 0;\r\nconst Column_1 = __webpack_require__(/*! ./Column */ \"./wwwroot/src/core/Column.ts\");\r\nclass ColumnCollection {\r\n    constructor(parent, layoutRowId, selector = null) {\r\n        this.parent = parent;\r\n        this.layoutRowId = layoutRowId;\r\n        this.columnSelector = \".column\";\r\n        this.columnSelector = selector || this.columnSelector;\r\n    }\r\n    fromLayoutRow() {\r\n        return Array.from(this.parent.querySelectorAll(this.columnSelector))\r\n            .map((element, index) => this.createColumn(element, index));\r\n    }\r\n    createColumn(element, index) {\r\n        const column = new Column_1.Column(element);\r\n        column.setIndex(index);\r\n        column.setLayoutRowId(this.layoutRowId);\r\n        return column;\r\n    }\r\n    getWidgets() {\r\n        return this.fromLayoutRow().map((elem, index) => {\r\n            return elem.getWidgetCollection();\r\n        });\r\n    }\r\n}\r\nexports.ColumnCollection = ColumnCollection;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/ColumnCollection.ts?");

/***/ }),

/***/ "./wwwroot/src/core/Layout.ts":
/*!************************************!*\
  !*** ./wwwroot/src/core/Layout.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Layout = void 0;\r\nconst LayoutRowCollection_1 = __webpack_require__(/*! ./LayoutRowCollection */ \"./wwwroot/src/core/LayoutRowCollection.ts\");\r\nclass Layout {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.layoutRowSelector = \".layout-row\";\r\n        this.layoutRowSelector = selector || this.layoutRowSelector;\r\n    }\r\n    getDom() {\r\n        return this.parent.querySelectorAll(this.layoutRowSelector);\r\n    }\r\n    fromTab(tab) {\r\n        return tab.getDom().querySelectorAll(this.layoutRowSelector);\r\n    }\r\n    getLayoutRows() {\r\n        if (!this.layoutRows) {\r\n            this.layoutRows = new LayoutRowCollection_1.LayoutRowCollection(this.parent);\r\n        }\r\n        return this.layoutRows.getLayoutRows();\r\n    }\r\n    getFirstLayoutRow() {\r\n        return this.layoutRows.getLayoutRows()[0];\r\n    }\r\n    getColumns() {\r\n        const result = [];\r\n        const rows = this.getLayoutRows();\r\n        rows.map((row, index) => {\r\n            const columns = row.getColumns();\r\n            result.push(...columns);\r\n        });\r\n        return result;\r\n    }\r\n    getWidgetPlacements() {\r\n        const widgets = [];\r\n        const rows = this.getLayoutRows();\r\n        rows.map((row, index) => {\r\n            const columns = row.getColumns();\r\n            columns.map((col, num) => {\r\n                const items = col.getWidgetCollection().getWidgets();\r\n                widgets.push(...items);\r\n            });\r\n        });\r\n        //const columns = this.getColumns();\r\n        //columns.map((col: Column, num: number) => {\r\n        //    const items = col.getWidgetCollection().getWidgets();\r\n        //    widgets.push(...items);\r\n        //});\r\n        return widgets;\r\n    }\r\n}\r\nexports.Layout = Layout;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/Layout.ts?");

/***/ }),

/***/ "./wwwroot/src/core/LayoutRow.ts":
/*!***************************************!*\
  !*** ./wwwroot/src/core/LayoutRow.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LayoutRow = void 0;\r\nconst common_1 = __webpack_require__(/*! ./common */ \"./wwwroot/src/core/common.ts\");\r\nconst ColumnCollection_1 = __webpack_require__(/*! ./ColumnCollection */ \"./wwwroot/src/core/ColumnCollection.ts\");\r\nclass LayoutRow {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.layoutRowSelector = \".layout-row\";\r\n        this.layoutRowSelector = selector || this.layoutRowSelector;\r\n    }\r\n    getDom() { return this.parent.querySelector(this.getSelector()); }\r\n    getAttributeName() { return common_1.dataId; }\r\n    setId(value) { this.id = value; }\r\n    setIndex(value) { this.index = value; }\r\n    getSelector() {\r\n        // \".layout-row[data-id='9AF39A45-D9FE-493A-8BB5-1F12218D03CD']\"\r\n        return `${this.layoutRowSelector}[${this.getAttributeName()}='${this.id}']`;\r\n    }\r\n    getColumns() {\r\n        if (!this.columns) {\r\n            this.columns = new ColumnCollection_1.ColumnCollection(this.getDom(), this.id);\r\n        }\r\n        return this.columns.fromLayoutRow();\r\n    }\r\n    getWidgets() {\r\n        return this.getColumns().map((elem, index) => {\r\n            return elem.getWidgetCollection();\r\n        });\r\n    }\r\n}\r\nexports.LayoutRow = LayoutRow;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/LayoutRow.ts?");

/***/ }),

/***/ "./wwwroot/src/core/LayoutRowCollection.ts":
/*!*************************************************!*\
  !*** ./wwwroot/src/core/LayoutRowCollection.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LayoutRowCollection = void 0;\r\nconst LayoutRow_1 = __webpack_require__(/*! ./LayoutRow */ \"./wwwroot/src/core/LayoutRow.ts\");\r\nclass LayoutRowCollection {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.layoutRowSelector = \".layout-row\";\r\n        this.layoutRowSelector = selector || this.layoutRowSelector;\r\n    }\r\n    fromLayout() {\r\n        return Array.from(this.parent.querySelectorAll(this.layoutRowSelector))\r\n            .map((element, index) => this.createLayoutRow(element, index));\r\n    }\r\n    createLayoutRow(element, index) {\r\n        const row = new LayoutRow_1.LayoutRow(this.parent);\r\n        const id = element.getAttribute(row.getAttributeName());\r\n        row.setId(id);\r\n        row.setIndex(index);\r\n        return row;\r\n    }\r\n    getLayoutRows() {\r\n        return this.fromLayout();\r\n    }\r\n}\r\nexports.LayoutRowCollection = LayoutRowCollection;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/LayoutRowCollection.ts?");

/***/ }),

/***/ "./wwwroot/src/core/Tab.ts":
/*!*********************************!*\
  !*** ./wwwroot/src/core/Tab.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tab = void 0;\r\nconst Layout_1 = __webpack_require__(/*! ./Layout */ \"./wwwroot/src/core/Layout.ts\");\r\nconst common_1 = __webpack_require__(/*! ./common */ \"./wwwroot/src/core/common.ts\");\r\nclass Tab {\r\n    constructor(parent, selector = null) {\r\n        this.parent = parent;\r\n        this.tabSelector = \".dashboard-tab\";\r\n        this.tabSelector = selector || this.tabSelector;\r\n    }\r\n    getDom() {\r\n        return this.parent.querySelector(this.tabSelector);\r\n    }\r\n    getLayout() {\r\n        if (!this.layout) {\r\n            this.layout = new Layout_1.Layout(this.getDom());\r\n        }\r\n        return this.layout;\r\n    }\r\n    getCurrentTab() {\r\n        return document.querySelector(this.tabSelector + \"[data-active='true']\");\r\n    }\r\n    getCurrentTabId() {\r\n        const tab = this.getCurrentTab();\r\n        return tab.getAttribute(common_1.dataId);\r\n    }\r\n}\r\nexports.Tab = Tab;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/Tab.ts?");

/***/ }),

/***/ "./wwwroot/src/core/common.ts":
/*!************************************!*\
  !*** ./wwwroot/src/core/common.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isLayoutListItem = exports.createFromHtml = exports.isBefore = exports.getWidgetIndex = exports.getColumnIndexByDragInfo = exports.getColumnByPlacement = exports.getWidgetSnapshot = exports.getClosestByClass = exports.isWidget = exports.clearNodes = exports.disableElement = exports.enableElement = exports.noPeriod = exports.getPlacementId = exports.getDomWidget = exports.getDataId = exports.collapsedToggleSelector = exports.isStaticAttribute = exports.dataId = void 0;\r\nconst PlacementItem_1 = __webpack_require__(/*! ../Models/PlacementItem */ \"./wwwroot/src/Models/PlacementItem.ts\");\r\nexports.dataId = \"data-id\";\r\nexports.isStaticAttribute = \"data-static\";\r\nexports.collapsedToggleSelector = \"collapsed\";\r\n/* Widget Class (commonly used) */\r\n//export let widgetSelector: string = \".card\";\r\n//export function setWidgetSelector(value:string) {\r\n//    widgetSelector = value;\r\n//}\r\n//export function getWidgetSelector() {\r\n//    return widgetSelector;\r\n//}\r\nfunction getDataId(elem) { return elem.getAttribute(exports.dataId); }\r\nexports.getDataId = getDataId;\r\nfunction getDomWidget(id) {\r\n    const dId = `[${exports.dataId}='${id}']`;\r\n    return document.querySelector(dId);\r\n}\r\nexports.getDomWidget = getDomWidget;\r\nfunction getPlacementId(widget) { return getDataId(widget); }\r\nexports.getPlacementId = getPlacementId;\r\nfunction noPeriod(id) { return id.startsWith(\".\") ? id.replace(\".\", \"\") : id; }\r\nexports.noPeriod = noPeriod;\r\nfunction enableElement(elem) { elem.classList.remove(\"disabled\"); elem.removeAttribute(\"disabled\"); }\r\nexports.enableElement = enableElement;\r\nfunction disableElement(elem) { elem.classList.add(\"disabled\"); elem.setAttribute(\"disabled\", \"disabled\"); }\r\nexports.disableElement = disableElement;\r\nfunction clearNodes(node) {\r\n    // node.innerHTML = \"\";\r\n    while (node.firstChild)\r\n        node.firstChild.remove();\r\n}\r\nexports.clearNodes = clearNodes;\r\nfunction isWidget(target, widgetSelector) {\r\n    return (target.tagName.toLowerCase() === \"div\" &&\r\n        target.classList.contains(noPeriod(widgetSelector)) &&\r\n        getDataId(target) !== \"\");\r\n}\r\nexports.isWidget = isWidget;\r\nfunction getClosestByClass(element, classToSearch) {\r\n    while (element) {\r\n        if (element.classList.contains(classToSearch)) {\r\n            return element;\r\n        }\r\n        element = element.parentElement;\r\n    }\r\n}\r\nexports.getClosestByClass = getClosestByClass;\r\nfunction getWidgetSnapshot(dragInfo) {\r\n    const widgetList = Array.from(document.querySelectorAll(\".card\")); // TODO: DefaultSelector.getInstance().layoutRowSelector));\r\n    return widgetList.map((elem) => {\r\n        const placementId = getDataId(elem);\r\n        const rowTemplate = getClosestByClass(elem, noPeriod(\".layout-row\")); // TODO: DefaultSelector.getInstance().layoutRowSelector));\r\n        const widgetIndex = getWidgetIndex(dragInfo, placementId);\r\n        const columnIndex = getColumnIndexByDragInfo(dragInfo, placementId);\r\n        const isStatic = elem.getAttribute(exports.isStaticAttribute) === \"true\";\r\n        return new PlacementItem_1.PlacementItem(getDataId(elem), widgetIndex, rowTemplate.getAttribute(exports.dataId), columnIndex, isStatic);\r\n    });\r\n}\r\nexports.getWidgetSnapshot = getWidgetSnapshot;\r\nfunction getColumnByPlacement(dragInfo, placementId) {\r\n    const placement = getDomWidget(placementId);\r\n    return getClosestByClass(placement, noPeriod(\".column\")); // TODO: DefaultSelector.getInstance().columnSelector));\r\n}\r\nexports.getColumnByPlacement = getColumnByPlacement;\r\nfunction getColumnIndexByDragInfo(dragInfo, placementId) {\r\n    const column = getColumnByPlacement(dragInfo, placementId);\r\n    return Array.from(column.parentElement.querySelectorAll(\".column\")) // TODO: DefaultSelector.getInstance().columnSelector))\r\n        .findIndex((column) => column.querySelector(`[${exports.dataId}='${placementId}']`) != null);\r\n}\r\nexports.getColumnIndexByDragInfo = getColumnIndexByDragInfo;\r\nfunction getWidgetIndex(dragInfo, placementId) {\r\n    const column = getColumnByPlacement(dragInfo, placementId);\r\n    const columnWidgets = column.querySelectorAll(\".card\"); // TODO: DefaultSelector.getInstance().columnSelector))\r\n    return Array.from(columnWidgets)\r\n        .findIndex((widget, index) => {\r\n        return widget.getAttribute(exports.dataId) === placementId;\r\n    });\r\n}\r\nexports.getWidgetIndex = getWidgetIndex;\r\nfunction isBefore(el1, el2) {\r\n    var cur;\r\n    if (el2.parentNode === el1.parentNode) {\r\n        for (cur = el1.previousSibling; cur; cur = cur.previousSibling) {\r\n            if (cur === el2)\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexports.isBefore = isBefore;\r\nfunction createFromHtml(htmlString) {\r\n    var div = document.createElement('div');\r\n    div.innerHTML = htmlString.trim();\r\n    return Array.from(div.children);\r\n}\r\nexports.createFromHtml = createFromHtml;\r\nfunction isLayoutListItem(elem) {\r\n    return elem && elem.tagName.toLowerCase() === \"li\" && elem.classList.contains(\"layout-item\"); // TODO: Layout-Item\r\n}\r\nexports.isLayoutListItem = isLayoutListItem;\r\n\n\n//# sourceURL=webpack:///./wwwroot/src/core/common.ts?");

/***/ })

/******/ });